package org.apache.commons.io.monitor;
import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.util.Collection;
import java.util.Iterator;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.filefilter.CanReadFileFilter;
import org.apache.commons.io.filefilter.FileFilterUtils;
import org.apache.commons.io.filefilter.NameFileFilter;
import org.junit.jupiter.api.Assertions;
import org.powerapi.jjoules.junit5.EnergyTest;
public class AmplEnergyFileAlterationObserverTestCase extends AbstractMonitorTestCase {

    @EnergyTest
    public void aaawarmup0() {
        System.out.println("aaawarmup");
    }
    
    @EnergyTest
    public void aaawarmup1() {
        System.out.println("aaawarmup");
    }
    
    @EnergyTest
    public void aaawarmup2() {
        System.out.println("aaawarmup");
    }
    
    @EnergyTest
    public void aaawarmup3() {
        System.out.println("aaawarmup");
    }

    @EnergyTest
    public void aaawarmup4() {
        System.out.println("aaawarmup");
    }

    @EnergyTest
    public void aaawarmup5() {
        System.out.println("aaawarmup");
    }

    @EnergyTest
    public void aaawarmup6() {
        System.out.println("aaawarmup");
    }

    @EnergyTest
    public void aaawarmup7() {
    }

    @EnergyTest
    public void aaawarmup8() {
        System.out.println("aaawarmup");
    }

    @EnergyTest
    public void aaawarmup9() {
        System.out.println("aaawarmup");
    }

    public FileAlterationObserverTestCase() {
        listener = new CollectionFileListener(true);
    }

    @EnergyTest
    public void testAddRemoveListeners() throws Exception {
        final FileAlterationObserver observer = new FileAlterationObserver("/foo");
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        Assertions.assertNull(((FileAlterationObserver) (observer)).getFileFilter());
        observer.addListener(null);
        boolean o_testAddRemoveListeners__5 = observer.getListeners().iterator().hasNext();
        Assertions.assertFalse(o_testAddRemoveListeners__5);
        observer.removeListener(null);
        boolean o_testAddRemoveListeners__9 = observer.getListeners().iterator().hasNext();
        Assertions.assertFalse(o_testAddRemoveListeners__9);
        final FileAlterationListenerAdaptor listener = new FileAlterationListenerAdaptor();
        observer.addListener(listener);
        final Iterator<FileAlterationListener> it = observer.getListeners().iterator();
        boolean o_testAddRemoveListeners__19 = it.hasNext();
        Assertions.assertTrue(o_testAddRemoveListeners__19);
        it.next();
        boolean o_testAddRemoveListeners__21 = it.hasNext();
        Assertions.assertFalse(o_testAddRemoveListeners__21);
        observer.removeListener(listener);
        boolean o_testAddRemoveListeners__24 = observer.getListeners().iterator().hasNext();
        Assertions.assertFalse(o_testAddRemoveListeners__24);
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        Assertions.assertNull(((FileAlterationObserver) (observer)).getFileFilter());
        Assertions.assertFalse(o_testAddRemoveListeners__5);
        Assertions.assertFalse(o_testAddRemoveListeners__9);
        Assertions.assertTrue(o_testAddRemoveListeners__19);
        Assertions.assertFalse(o_testAddRemoveListeners__21);
    }

    @EnergyTest
    public void testAddRemoveListeners_literalMutationString22() throws Exception {
        final FileAlterationObserver observer = new FileAlterationObserver("");
        Assertions.assertEquals("FileAlterationObserver[file=\'\', listeners=0]", ((FileAlterationObserver) (observer)).toString());
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        Assertions.assertNull(((FileAlterationObserver) (observer)).getFileFilter());
        observer.addListener(null);
        boolean o_testAddRemoveListeners_literalMutationString22__6 = observer.getListeners().iterator().hasNext();
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString22__6);
        observer.removeListener(null);
        boolean o_testAddRemoveListeners_literalMutationString22__10 = observer.getListeners().iterator().hasNext();
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString22__10);
        final FileAlterationListenerAdaptor listener = new FileAlterationListenerAdaptor();
        observer.addListener(listener);
        final Iterator<FileAlterationListener> it = observer.getListeners().iterator();
        boolean o_testAddRemoveListeners_literalMutationString22__20 = it.hasNext();
        Assertions.assertTrue(o_testAddRemoveListeners_literalMutationString22__20);
        it.next();
        boolean o_testAddRemoveListeners_literalMutationString22__22 = it.hasNext();
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString22__22);
        observer.removeListener(listener);
        boolean o_testAddRemoveListeners_literalMutationString22__25 = observer.getListeners().iterator().hasNext();
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString22__25);
        Assertions.assertEquals("FileAlterationObserver[file=\'\', listeners=0]", ((FileAlterationObserver) (observer)).toString());
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        Assertions.assertNull(((FileAlterationObserver) (observer)).getFileFilter());
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString22__6);
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString22__10);
        Assertions.assertTrue(o_testAddRemoveListeners_literalMutationString22__20);
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString22__22);
    }

    @EnergyTest
    public void testAddRemoveListeners_literalMutationString23() throws Exception {
        final FileAlterationObserver observer = new FileAlterationObserver("Delete");
        Assertions.assertEquals("FileAlterationObserver[file=\'Delete\', listeners=0]", ((FileAlterationObserver) (observer)).toString());
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        Assertions.assertNull(((FileAlterationObserver) (observer)).getFileFilter());
        observer.addListener(null);
        boolean o_testAddRemoveListeners_literalMutationString23__6 = observer.getListeners().iterator().hasNext();
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString23__6);
        observer.removeListener(null);
        boolean o_testAddRemoveListeners_literalMutationString23__10 = observer.getListeners().iterator().hasNext();
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString23__10);
        final FileAlterationListenerAdaptor listener = new FileAlterationListenerAdaptor();
        observer.addListener(listener);
        final Iterator<FileAlterationListener> it = observer.getListeners().iterator();
        boolean o_testAddRemoveListeners_literalMutationString23__20 = it.hasNext();
        Assertions.assertTrue(o_testAddRemoveListeners_literalMutationString23__20);
        it.next();
        boolean o_testAddRemoveListeners_literalMutationString23__22 = it.hasNext();
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString23__22);
        observer.removeListener(listener);
        boolean o_testAddRemoveListeners_literalMutationString23__25 = observer.getListeners().iterator().hasNext();
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString23__25);
        Assertions.assertEquals("FileAlterationObserver[file=\'Delete\', listeners=0]", ((FileAlterationObserver) (observer)).toString());
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        Assertions.assertNull(((FileAlterationObserver) (observer)).getFileFilter());
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString23__6);
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString23__10);
        Assertions.assertTrue(o_testAddRemoveListeners_literalMutationString23__20);
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString23__22);
    }

    @EnergyTest
    public void testAddRemoveListeners_literalMutationString24() throws Exception {
        final FileAlterationObserver observer = new FileAlterationObserver("/}foo");
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        Assertions.assertNull(((FileAlterationObserver) (observer)).getFileFilter());
        observer.addListener(null);
        boolean o_testAddRemoveListeners_literalMutationString24__6 = observer.getListeners().iterator().hasNext();
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString24__6);
        observer.removeListener(null);
        boolean o_testAddRemoveListeners_literalMutationString24__10 = observer.getListeners().iterator().hasNext();
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString24__10);
        final FileAlterationListenerAdaptor listener = new FileAlterationListenerAdaptor();
        observer.addListener(listener);
        final Iterator<FileAlterationListener> it = observer.getListeners().iterator();
        boolean o_testAddRemoveListeners_literalMutationString24__20 = it.hasNext();
        Assertions.assertTrue(o_testAddRemoveListeners_literalMutationString24__20);
        it.next();
        boolean o_testAddRemoveListeners_literalMutationString24__22 = it.hasNext();
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString24__22);
        observer.removeListener(listener);
        boolean o_testAddRemoveListeners_literalMutationString24__25 = observer.getListeners().iterator().hasNext();
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString24__25);
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        Assertions.assertNull(((FileAlterationObserver) (observer)).getFileFilter());
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString24__6);
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString24__10);
        Assertions.assertTrue(o_testAddRemoveListeners_literalMutationString24__20);
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString24__22);
    }

    @EnergyTest
    public void testAddRemoveListeners_literalMutationString25() throws Exception {
        final FileAlterationObserver observer = new FileAlterationObserver("Gdhs");
        Assertions.assertEquals("FileAlterationObserver[file=\'Gdhs\', listeners=0]", ((FileAlterationObserver) (observer)).toString());
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        Assertions.assertNull(((FileAlterationObserver) (observer)).getFileFilter());
        observer.addListener(null);
        boolean o_testAddRemoveListeners_literalMutationString25__6 = observer.getListeners().iterator().hasNext();
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString25__6);
        observer.removeListener(null);
        boolean o_testAddRemoveListeners_literalMutationString25__10 = observer.getListeners().iterator().hasNext();
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString25__10);
        final FileAlterationListenerAdaptor listener = new FileAlterationListenerAdaptor();
        observer.addListener(listener);
        final Iterator<FileAlterationListener> it = observer.getListeners().iterator();
        boolean o_testAddRemoveListeners_literalMutationString25__20 = it.hasNext();
        Assertions.assertTrue(o_testAddRemoveListeners_literalMutationString25__20);
        it.next();
        boolean o_testAddRemoveListeners_literalMutationString25__22 = it.hasNext();
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString25__22);
        observer.removeListener(listener);
        boolean o_testAddRemoveListeners_literalMutationString25__25 = observer.getListeners().iterator().hasNext();
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString25__25);
        Assertions.assertEquals("FileAlterationObserver[file=\'Gdhs\', listeners=0]", ((FileAlterationObserver) (observer)).toString());
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        Assertions.assertNull(((FileAlterationObserver) (observer)).getFileFilter());
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString25__6);
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString25__10);
        Assertions.assertTrue(o_testAddRemoveListeners_literalMutationString25__20);
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString25__22);
    }

    @EnergyTest
    public void testAddRemoveListeners_literalMutationString26() throws Exception {
        final FileAlterationObserver observer = new FileAlterationObserver("/*oo");
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        Assertions.assertNull(((FileAlterationObserver) (observer)).getFileFilter());
        observer.addListener(null);
        boolean o_testAddRemoveListeners_literalMutationString26__6 = observer.getListeners().iterator().hasNext();
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString26__6);
        observer.removeListener(null);
        boolean o_testAddRemoveListeners_literalMutationString26__10 = observer.getListeners().iterator().hasNext();
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString26__10);
        final FileAlterationListenerAdaptor listener = new FileAlterationListenerAdaptor();
        observer.addListener(listener);
        final Iterator<FileAlterationListener> it = observer.getListeners().iterator();
        boolean o_testAddRemoveListeners_literalMutationString26__20 = it.hasNext();
        Assertions.assertTrue(o_testAddRemoveListeners_literalMutationString26__20);
        it.next();
        boolean o_testAddRemoveListeners_literalMutationString26__22 = it.hasNext();
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString26__22);
        observer.removeListener(listener);
        boolean o_testAddRemoveListeners_literalMutationString26__25 = observer.getListeners().iterator().hasNext();
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString26__25);
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        Assertions.assertNull(((FileAlterationObserver) (observer)).getFileFilter());
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString26__6);
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString26__10);
        Assertions.assertTrue(o_testAddRemoveListeners_literalMutationString26__20);
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString26__22);
    }

    @EnergyTest
    public void testAddRemoveListeners_literalMutationString27() throws Exception {
        final FileAlterationObserver observer = new FileAlterationObserver("/oo");
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        Assertions.assertNull(((FileAlterationObserver) (observer)).getFileFilter());
        observer.addListener(null);
        boolean o_testAddRemoveListeners_literalMutationString27__6 = observer.getListeners().iterator().hasNext();
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString27__6);
        observer.removeListener(null);
        boolean o_testAddRemoveListeners_literalMutationString27__10 = observer.getListeners().iterator().hasNext();
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString27__10);
        final FileAlterationListenerAdaptor listener = new FileAlterationListenerAdaptor();
        observer.addListener(listener);
        final Iterator<FileAlterationListener> it = observer.getListeners().iterator();
        boolean o_testAddRemoveListeners_literalMutationString27__20 = it.hasNext();
        Assertions.assertTrue(o_testAddRemoveListeners_literalMutationString27__20);
        it.next();
        boolean o_testAddRemoveListeners_literalMutationString27__22 = it.hasNext();
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString27__22);
        observer.removeListener(listener);
        boolean o_testAddRemoveListeners_literalMutationString27__25 = observer.getListeners().iterator().hasNext();
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString27__25);
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        Assertions.assertNull(((FileAlterationObserver) (observer)).getFileFilter());
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString27__6);
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString27__10);
        Assertions.assertTrue(o_testAddRemoveListeners_literalMutationString27__20);
        Assertions.assertFalse(o_testAddRemoveListeners_literalMutationString27__22);
    }

    @EnergyTest
    public void testToString() throws Exception {
        final File file = new File("/foo");
        FileAlterationObserver observer = new FileAlterationObserver(file);
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        Assertions.assertNull(((FileAlterationObserver) (observer)).getFileFilter());
        String String_0 = ("FileAlterationObserver[file='" + file.getPath()) + "', listeners=0]";
        observer.toString();
        observer = new FileAlterationObserver(file, CanReadFileFilter.CAN_READ);
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        String String_1 = ("FileAlterationObserver[file='" + file.getPath()) + "', CanReadFileFilter, listeners=0]";
        observer.toString();
        observer.getDirectory();
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
    }

    @EnergyTest
    public void testToString_literalMutationString310() throws Exception {
        final File file = new File("");
        FileAlterationObserver observer = new FileAlterationObserver(file);
        Assertions.assertEquals("FileAlterationObserver[file=\'\', listeners=0]", ((FileAlterationObserver) (observer)).toString());
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        Assertions.assertNull(((FileAlterationObserver) (observer)).getFileFilter());
        String String_2 = ("FileAlterationObserver[file='" + file.getPath()) + "', listeners=0]";
        Assertions.assertEquals("FileAlterationObserver[file=\'\', listeners=0]", String_2);
        String o_testToString_literalMutationString310__8 = observer.toString();
        Assertions.assertEquals("FileAlterationObserver[file=\'\', listeners=0]", o_testToString_literalMutationString310__8);
        observer = new FileAlterationObserver(file, CanReadFileFilter.CAN_READ);
        Assertions.assertEquals("FileAlterationObserver[file=\'\', CanReadFileFilter, listeners=0]", ((FileAlterationObserver) (observer)).toString());
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        String String_3 = ("FileAlterationObserver[file='" + file.getPath()) + "', CanReadFileFilter, listeners=0]";
        Assertions.assertEquals("FileAlterationObserver[file=\'\', CanReadFileFilter, listeners=0]", String_3);
        String o_testToString_literalMutationString310__13 = observer.toString();
        Assertions.assertEquals("FileAlterationObserver[file=\'\', CanReadFileFilter, listeners=0]", o_testToString_literalMutationString310__13);
        observer.getDirectory();
        Assertions.assertEquals("FileAlterationObserver[file=\'\', CanReadFileFilter, listeners=0]", ((FileAlterationObserver) (observer)).toString());
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        Assertions.assertEquals("FileAlterationObserver[file=\'\', listeners=0]", String_2);
        Assertions.assertEquals("FileAlterationObserver[file=\'\', listeners=0]", o_testToString_literalMutationString310__8);
        Assertions.assertEquals("FileAlterationObserver[file=\'\', CanReadFileFilter, listeners=0]", ((FileAlterationObserver) (observer)).toString());
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        Assertions.assertEquals("FileAlterationObserver[file=\'\', CanReadFileFilter, listeners=0]", String_3);
        Assertions.assertEquals("FileAlterationObserver[file=\'\', CanReadFileFilter, listeners=0]", o_testToString_literalMutationString310__13);
    }

    @EnergyTest
    public void testToString_literalMutationString311() throws Exception {
        final File file = new File("Delete");
        FileAlterationObserver observer = new FileAlterationObserver(file);
        Assertions.assertEquals("FileAlterationObserver[file=\'Delete\', listeners=0]", ((FileAlterationObserver) (observer)).toString());
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        Assertions.assertNull(((FileAlterationObserver) (observer)).getFileFilter());
        String String_4 = ("FileAlterationObserver[file='" + file.getPath()) + "', listeners=0]";
        Assertions.assertEquals("FileAlterationObserver[file=\'Delete\', listeners=0]", String_4);
        String o_testToString_literalMutationString311__8 = observer.toString();
        Assertions.assertEquals("FileAlterationObserver[file=\'Delete\', listeners=0]", o_testToString_literalMutationString311__8);
        observer = new FileAlterationObserver(file, CanReadFileFilter.CAN_READ);
        Assertions.assertEquals("FileAlterationObserver[file=\'Delete\', CanReadFileFilter, listeners=0]", ((FileAlterationObserver) (observer)).toString());
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        String String_5 = ("FileAlterationObserver[file='" + file.getPath()) + "', CanReadFileFilter, listeners=0]";
        Assertions.assertEquals("FileAlterationObserver[file=\'Delete\', CanReadFileFilter, listeners=0]", String_5);
        String o_testToString_literalMutationString311__13 = observer.toString();
        Assertions.assertEquals("FileAlterationObserver[file=\'Delete\', CanReadFileFilter, listeners=0]", o_testToString_literalMutationString311__13);
        observer.getDirectory();
        Assertions.assertEquals("FileAlterationObserver[file=\'Delete\', CanReadFileFilter, listeners=0]", ((FileAlterationObserver) (observer)).toString());
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        Assertions.assertEquals("FileAlterationObserver[file=\'Delete\', listeners=0]", String_4);
        Assertions.assertEquals("FileAlterationObserver[file=\'Delete\', listeners=0]", o_testToString_literalMutationString311__8);
        Assertions.assertEquals("FileAlterationObserver[file=\'Delete\', CanReadFileFilter, listeners=0]", ((FileAlterationObserver) (observer)).toString());
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        Assertions.assertEquals("FileAlterationObserver[file=\'Delete\', CanReadFileFilter, listeners=0]", String_5);
        Assertions.assertEquals("FileAlterationObserver[file=\'Delete\', CanReadFileFilter, listeners=0]", o_testToString_literalMutationString311__13);
    }

    @EnergyTest
    public void testToString_literalMutationString312() throws Exception {
        final File file = new File("z>YS");
        FileAlterationObserver observer = new FileAlterationObserver(file);
        Assertions.assertEquals("FileAlterationObserver[file=\'z>YS\', listeners=0]", ((FileAlterationObserver) (observer)).toString());
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        Assertions.assertNull(((FileAlterationObserver) (observer)).getFileFilter());
        String String_6 = ("FileAlterationObserver[file='" + file.getPath()) + "', listeners=0]";
        Assertions.assertEquals("FileAlterationObserver[file=\'z>YS\', listeners=0]", String_6);
        String o_testToString_literalMutationString312__8 = observer.toString();
        Assertions.assertEquals("FileAlterationObserver[file=\'z>YS\', listeners=0]", o_testToString_literalMutationString312__8);
        observer = new FileAlterationObserver(file, CanReadFileFilter.CAN_READ);
        Assertions.assertEquals("FileAlterationObserver[file=\'z>YS\', CanReadFileFilter, listeners=0]", ((FileAlterationObserver) (observer)).toString());
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        String String_7 = ("FileAlterationObserver[file='" + file.getPath()) + "', CanReadFileFilter, listeners=0]";
        Assertions.assertEquals("FileAlterationObserver[file=\'z>YS\', CanReadFileFilter, listeners=0]", String_7);
        String o_testToString_literalMutationString312__13 = observer.toString();
        Assertions.assertEquals("FileAlterationObserver[file=\'z>YS\', CanReadFileFilter, listeners=0]", o_testToString_literalMutationString312__13);
        observer.getDirectory();
        Assertions.assertEquals("FileAlterationObserver[file=\'z>YS\', CanReadFileFilter, listeners=0]", ((FileAlterationObserver) (observer)).toString());
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        Assertions.assertEquals("FileAlterationObserver[file=\'z>YS\', listeners=0]", String_6);
        Assertions.assertEquals("FileAlterationObserver[file=\'z>YS\', listeners=0]", o_testToString_literalMutationString312__8);
        Assertions.assertEquals("FileAlterationObserver[file=\'z>YS\', CanReadFileFilter, listeners=0]", ((FileAlterationObserver) (observer)).toString());
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        Assertions.assertEquals("FileAlterationObserver[file=\'z>YS\', CanReadFileFilter, listeners=0]", String_7);
        Assertions.assertEquals("FileAlterationObserver[file=\'z>YS\', CanReadFileFilter, listeners=0]", o_testToString_literalMutationString312__13);
    }

    @EnergyTest
    public void testToString_literalMutationString313() throws Exception {
        final File file = new File("/fo");
        FileAlterationObserver observer = new FileAlterationObserver(file);
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        Assertions.assertNull(((FileAlterationObserver) (observer)).getFileFilter());
        String String_8 = ("FileAlterationObserver[file='" + file.getPath()) + "', listeners=0]";
        observer.toString();
        observer = new FileAlterationObserver(file, CanReadFileFilter.CAN_READ);
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        String String_9 = ("FileAlterationObserver[file='" + file.getPath()) + "', CanReadFileFilter, listeners=0]";
        observer.toString();
        observer.getDirectory();
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
    }

    @EnergyTest
    public void testToString_literalMutationString314() throws Exception {
        final File file = new File("bfoo");
        FileAlterationObserver observer = new FileAlterationObserver(file);
        Assertions.assertEquals("FileAlterationObserver[file=\'bfoo\', listeners=0]", ((FileAlterationObserver) (observer)).toString());
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        Assertions.assertNull(((FileAlterationObserver) (observer)).getFileFilter());
        String String_10 = ("FileAlterationObserver[file='" + file.getPath()) + "', listeners=0]";
        Assertions.assertEquals("FileAlterationObserver[file=\'bfoo\', listeners=0]", String_10);
        String o_testToString_literalMutationString314__8 = observer.toString();
        Assertions.assertEquals("FileAlterationObserver[file=\'bfoo\', listeners=0]", o_testToString_literalMutationString314__8);
        observer = new FileAlterationObserver(file, CanReadFileFilter.CAN_READ);
        Assertions.assertEquals("FileAlterationObserver[file=\'bfoo\', CanReadFileFilter, listeners=0]", ((FileAlterationObserver) (observer)).toString());
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        String String_11 = ("FileAlterationObserver[file='" + file.getPath()) + "', CanReadFileFilter, listeners=0]";
        Assertions.assertEquals("FileAlterationObserver[file=\'bfoo\', CanReadFileFilter, listeners=0]", String_11);
        String o_testToString_literalMutationString314__13 = observer.toString();
        Assertions.assertEquals("FileAlterationObserver[file=\'bfoo\', CanReadFileFilter, listeners=0]", o_testToString_literalMutationString314__13);
        observer.getDirectory();
        Assertions.assertEquals("FileAlterationObserver[file=\'bfoo\', CanReadFileFilter, listeners=0]", ((FileAlterationObserver) (observer)).toString());
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        Assertions.assertEquals("FileAlterationObserver[file=\'bfoo\', listeners=0]", String_10);
        Assertions.assertEquals("FileAlterationObserver[file=\'bfoo\', listeners=0]", o_testToString_literalMutationString314__8);
        Assertions.assertEquals("FileAlterationObserver[file=\'bfoo\', CanReadFileFilter, listeners=0]", ((FileAlterationObserver) (observer)).toString());
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        Assertions.assertEquals("FileAlterationObserver[file=\'bfoo\', CanReadFileFilter, listeners=0]", String_11);
        Assertions.assertEquals("FileAlterationObserver[file=\'bfoo\', CanReadFileFilter, listeners=0]", o_testToString_literalMutationString314__13);
    }

    @EnergyTest
    public void testToString_literalMutationString315() throws Exception {
        final File file = new File("/[foo");
        FileAlterationObserver observer = new FileAlterationObserver(file);
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        Assertions.assertNull(((FileAlterationObserver) (observer)).getFileFilter());
        String String_12 = ("FileAlterationObserver[file='" + file.getPath()) + "', listeners=0]";
        observer.toString();
        observer = new FileAlterationObserver(file, CanReadFileFilter.CAN_READ);
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        String String_13 = ("FileAlterationObserver[file='" + file.getPath()) + "', CanReadFileFilter, listeners=0]";
        observer.toString();
        observer.getDirectory();
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
        Assertions.assertTrue(((Collection) (((FileAlterationObserver) (observer)).getListeners())).isEmpty());
    }

    @EnergyTest
    public void testDirectory() throws Exception {
        checkAndNotify();
        final File testDirA = new File(testDir, "test-dir-A");
        final File testDirB = new File(testDir, "test-dir-B");
        final File testDirC = new File(testDir, "test-dir-C");
        boolean o_testDirectory__8 = testDirA.mkdir();
        Assertions.assertTrue(o_testDirectory__8);
        boolean o_testDirectory__9 = testDirB.mkdir();
        Assertions.assertTrue(o_testDirectory__9);
        boolean o_testDirectory__10 = testDirC.mkdir();
        Assertions.assertTrue(o_testDirectory__10);
        final File testDirAFile1 = touch(new File(testDirA, "A-file1.java"));
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.txt"));
        final File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        final File testDirBFile1 = touch(new File(testDirB, "B-file1.java"));
        checkAndNotify();
        boolean o_testDirectory__28 = listener.getCreatedDirectories().contains(testDirA);
        Assertions.assertTrue(o_testDirectory__28);
        boolean o_testDirectory__30 = listener.getCreatedDirectories().contains(testDirB);
        Assertions.assertTrue(o_testDirectory__30);
        boolean o_testDirectory__32 = listener.getCreatedDirectories().contains(testDirC);
        Assertions.assertTrue(o_testDirectory__32);
        boolean o_testDirectory__34 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory__34);
        boolean o_testDirectory__36 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory__36);
        boolean o_testDirectory__38 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory__38);
        boolean o_testDirectory__40 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory__40);
        boolean o_testDirectory__42 = listener.getCreatedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory__42);
        checkAndNotify();
        testDirAFile4 = touch(testDirAFile4);
        FileUtils.deleteDirectory(testDirB);
        checkAndNotify();
        boolean o_testDirectory__49 = listener.getDeletedDirectories().contains(testDirB);
        Assertions.assertTrue(o_testDirectory__49);
        boolean o_testDirectory__51 = listener.getChangedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory__51);
        boolean o_testDirectory__53 = listener.getDeletedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory__53);
        FileUtils.deleteDirectory(testDir);
        checkAndNotify();
        boolean o_testDirectory__57 = listener.getDeletedDirectories().contains(testDirA);
        Assertions.assertTrue(o_testDirectory__57);
        boolean o_testDirectory__59 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory__59);
        boolean o_testDirectory__61 = listener.getDeletedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory__61);
        boolean o_testDirectory__63 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory__63);
        boolean o_testDirectory__65 = listener.getDeletedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory__65);
        boolean o_testDirectory__67 = testDir.mkdir();
        Assertions.assertTrue(o_testDirectory__67);
        checkAndNotify();
        checkAndNotify();
        Assertions.assertTrue(o_testDirectory__8);
        Assertions.assertTrue(o_testDirectory__9);
        Assertions.assertTrue(o_testDirectory__10);
        Assertions.assertTrue(o_testDirectory__28);
        Assertions.assertTrue(o_testDirectory__30);
        Assertions.assertTrue(o_testDirectory__32);
        Assertions.assertTrue(o_testDirectory__34);
        Assertions.assertFalse(o_testDirectory__36);
        Assertions.assertTrue(o_testDirectory__38);
        Assertions.assertTrue(o_testDirectory__40);
        Assertions.assertTrue(o_testDirectory__42);
        Assertions.assertTrue(o_testDirectory__49);
        Assertions.assertTrue(o_testDirectory__51);
        Assertions.assertTrue(o_testDirectory__53);
        Assertions.assertTrue(o_testDirectory__57);
        Assertions.assertTrue(o_testDirectory__59);
        Assertions.assertFalse(o_testDirectory__61);
        Assertions.assertTrue(o_testDirectory__63);
        Assertions.assertTrue(o_testDirectory__65);
        Assertions.assertTrue(o_testDirectory__67);
    }

    @EnergyTest
    public void testDirectory_literalMutationString46() throws Exception {
        checkAndNotify();
        final File testDirA = new File(testDir, "");
        final File testDirB = new File(testDir, "test-dir-B");
        final File testDirC = new File(testDir, "test-dir-C");
        boolean o_testDirectory_literalMutationString46__9 = testDirA.mkdir();
        Assertions.assertFalse(o_testDirectory_literalMutationString46__9);
        boolean o_testDirectory_literalMutationString46__10 = testDirB.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString46__10);
        boolean o_testDirectory_literalMutationString46__11 = testDirC.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString46__11);
        final File testDirAFile1 = touch(new File(testDirA, "A-file1.java"));
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.txt"));
        final File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        final File testDirBFile1 = touch(new File(testDirB, "B-file1.java"));
        checkAndNotify();
        boolean o_testDirectory_literalMutationString46__29 = listener.getCreatedDirectories().contains(testDirA);
        Assertions.assertFalse(o_testDirectory_literalMutationString46__29);
        boolean o_testDirectory_literalMutationString46__31 = listener.getCreatedDirectories().contains(testDirB);
        Assertions.assertTrue(o_testDirectory_literalMutationString46__31);
        boolean o_testDirectory_literalMutationString46__33 = listener.getCreatedDirectories().contains(testDirC);
        Assertions.assertTrue(o_testDirectory_literalMutationString46__33);
        boolean o_testDirectory_literalMutationString46__35 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString46__35);
        boolean o_testDirectory_literalMutationString46__37 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory_literalMutationString46__37);
        boolean o_testDirectory_literalMutationString46__39 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory_literalMutationString46__39);
        boolean o_testDirectory_literalMutationString46__41 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString46__41);
        boolean o_testDirectory_literalMutationString46__43 = listener.getCreatedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString46__43);
        checkAndNotify();
        testDirAFile4 = touch(testDirAFile4);
        FileUtils.deleteDirectory(testDirB);
        checkAndNotify();
        boolean o_testDirectory_literalMutationString46__50 = listener.getDeletedDirectories().contains(testDirB);
        Assertions.assertTrue(o_testDirectory_literalMutationString46__50);
        boolean o_testDirectory_literalMutationString46__52 = listener.getChangedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString46__52);
        boolean o_testDirectory_literalMutationString46__54 = listener.getDeletedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString46__54);
        FileUtils.deleteDirectory(testDir);
        checkAndNotify();
        boolean o_testDirectory_literalMutationString46__58 = listener.getDeletedDirectories().contains(testDirA);
        Assertions.assertFalse(o_testDirectory_literalMutationString46__58);
        boolean o_testDirectory_literalMutationString46__60 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString46__60);
        boolean o_testDirectory_literalMutationString46__62 = listener.getDeletedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory_literalMutationString46__62);
        boolean o_testDirectory_literalMutationString46__64 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory_literalMutationString46__64);
        boolean o_testDirectory_literalMutationString46__66 = listener.getDeletedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString46__66);
        boolean o_testDirectory_literalMutationString46__68 = testDir.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString46__68);
        checkAndNotify();
        checkAndNotify();
        Assertions.assertFalse(o_testDirectory_literalMutationString46__9);
        Assertions.assertTrue(o_testDirectory_literalMutationString46__10);
        Assertions.assertTrue(o_testDirectory_literalMutationString46__11);
        Assertions.assertFalse(o_testDirectory_literalMutationString46__29);
        Assertions.assertTrue(o_testDirectory_literalMutationString46__31);
        Assertions.assertTrue(o_testDirectory_literalMutationString46__33);
        Assertions.assertTrue(o_testDirectory_literalMutationString46__35);
        Assertions.assertFalse(o_testDirectory_literalMutationString46__37);
        Assertions.assertTrue(o_testDirectory_literalMutationString46__39);
        Assertions.assertTrue(o_testDirectory_literalMutationString46__41);
        Assertions.assertTrue(o_testDirectory_literalMutationString46__43);
        Assertions.assertTrue(o_testDirectory_literalMutationString46__50);
        Assertions.assertTrue(o_testDirectory_literalMutationString46__52);
        Assertions.assertTrue(o_testDirectory_literalMutationString46__54);
        Assertions.assertFalse(o_testDirectory_literalMutationString46__58);
        Assertions.assertTrue(o_testDirectory_literalMutationString46__60);
        Assertions.assertFalse(o_testDirectory_literalMutationString46__62);
        Assertions.assertTrue(o_testDirectory_literalMutationString46__64);
        Assertions.assertTrue(o_testDirectory_literalMutationString46__66);
        Assertions.assertTrue(o_testDirectory_literalMutationString46__68);
    }

    @EnergyTest
    public void testDirectory_literalMutationString47() throws Exception {
        checkAndNotify();
        final File testDirA = new File(testDir, "Delete");
        final File testDirB = new File(testDir, "test-dir-B");
        final File testDirC = new File(testDir, "test-dir-C");
        boolean o_testDirectory_literalMutationString47__9 = testDirA.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString47__9);
        boolean o_testDirectory_literalMutationString47__10 = testDirB.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString47__10);
        boolean o_testDirectory_literalMutationString47__11 = testDirC.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString47__11);
        final File testDirAFile1 = touch(new File(testDirA, "A-file1.java"));
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.txt"));
        final File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        final File testDirBFile1 = touch(new File(testDirB, "B-file1.java"));
        checkAndNotify();
        boolean o_testDirectory_literalMutationString47__29 = listener.getCreatedDirectories().contains(testDirA);
        Assertions.assertTrue(o_testDirectory_literalMutationString47__29);
        boolean o_testDirectory_literalMutationString47__31 = listener.getCreatedDirectories().contains(testDirB);
        Assertions.assertTrue(o_testDirectory_literalMutationString47__31);
        boolean o_testDirectory_literalMutationString47__33 = listener.getCreatedDirectories().contains(testDirC);
        Assertions.assertTrue(o_testDirectory_literalMutationString47__33);
        boolean o_testDirectory_literalMutationString47__35 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString47__35);
        boolean o_testDirectory_literalMutationString47__37 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory_literalMutationString47__37);
        boolean o_testDirectory_literalMutationString47__39 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory_literalMutationString47__39);
        boolean o_testDirectory_literalMutationString47__41 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString47__41);
        boolean o_testDirectory_literalMutationString47__43 = listener.getCreatedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString47__43);
        checkAndNotify();
        testDirAFile4 = touch(testDirAFile4);
        FileUtils.deleteDirectory(testDirB);
        checkAndNotify();
        boolean o_testDirectory_literalMutationString47__50 = listener.getDeletedDirectories().contains(testDirB);
        Assertions.assertTrue(o_testDirectory_literalMutationString47__50);
        boolean o_testDirectory_literalMutationString47__52 = listener.getChangedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString47__52);
        boolean o_testDirectory_literalMutationString47__54 = listener.getDeletedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString47__54);
        FileUtils.deleteDirectory(testDir);
        checkAndNotify();
        boolean o_testDirectory_literalMutationString47__58 = listener.getDeletedDirectories().contains(testDirA);
        Assertions.assertTrue(o_testDirectory_literalMutationString47__58);
        boolean o_testDirectory_literalMutationString47__60 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString47__60);
        boolean o_testDirectory_literalMutationString47__62 = listener.getDeletedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory_literalMutationString47__62);
        boolean o_testDirectory_literalMutationString47__64 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory_literalMutationString47__64);
        boolean o_testDirectory_literalMutationString47__66 = listener.getDeletedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString47__66);
        boolean o_testDirectory_literalMutationString47__68 = testDir.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString47__68);
        checkAndNotify();
        checkAndNotify();
        Assertions.assertTrue(o_testDirectory_literalMutationString47__9);
        Assertions.assertTrue(o_testDirectory_literalMutationString47__10);
        Assertions.assertTrue(o_testDirectory_literalMutationString47__11);
        Assertions.assertTrue(o_testDirectory_literalMutationString47__29);
        Assertions.assertTrue(o_testDirectory_literalMutationString47__31);
        Assertions.assertTrue(o_testDirectory_literalMutationString47__33);
        Assertions.assertTrue(o_testDirectory_literalMutationString47__35);
        Assertions.assertFalse(o_testDirectory_literalMutationString47__37);
        Assertions.assertTrue(o_testDirectory_literalMutationString47__39);
        Assertions.assertTrue(o_testDirectory_literalMutationString47__41);
        Assertions.assertTrue(o_testDirectory_literalMutationString47__43);
        Assertions.assertTrue(o_testDirectory_literalMutationString47__50);
        Assertions.assertTrue(o_testDirectory_literalMutationString47__52);
        Assertions.assertTrue(o_testDirectory_literalMutationString47__54);
        Assertions.assertTrue(o_testDirectory_literalMutationString47__58);
        Assertions.assertTrue(o_testDirectory_literalMutationString47__60);
        Assertions.assertFalse(o_testDirectory_literalMutationString47__62);
        Assertions.assertTrue(o_testDirectory_literalMutationString47__64);
        Assertions.assertTrue(o_testDirectory_literalMutationString47__66);
        Assertions.assertTrue(o_testDirectory_literalMutationString47__68);
    }

    @EnergyTest
    public void testDirectory_literalMutationString48() throws Exception {
        checkAndNotify();
        final File testDirA = new File(testDir, "test-bir-A");
        final File testDirB = new File(testDir, "test-dir-B");
        final File testDirC = new File(testDir, "test-dir-C");
        boolean o_testDirectory_literalMutationString48__9 = testDirA.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString48__9);
        boolean o_testDirectory_literalMutationString48__10 = testDirB.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString48__10);
        boolean o_testDirectory_literalMutationString48__11 = testDirC.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString48__11);
        final File testDirAFile1 = touch(new File(testDirA, "A-file1.java"));
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.txt"));
        final File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        final File testDirBFile1 = touch(new File(testDirB, "B-file1.java"));
        checkAndNotify();
        boolean o_testDirectory_literalMutationString48__29 = listener.getCreatedDirectories().contains(testDirA);
        Assertions.assertTrue(o_testDirectory_literalMutationString48__29);
        boolean o_testDirectory_literalMutationString48__31 = listener.getCreatedDirectories().contains(testDirB);
        Assertions.assertTrue(o_testDirectory_literalMutationString48__31);
        boolean o_testDirectory_literalMutationString48__33 = listener.getCreatedDirectories().contains(testDirC);
        Assertions.assertTrue(o_testDirectory_literalMutationString48__33);
        boolean o_testDirectory_literalMutationString48__35 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString48__35);
        boolean o_testDirectory_literalMutationString48__37 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory_literalMutationString48__37);
        boolean o_testDirectory_literalMutationString48__39 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory_literalMutationString48__39);
        boolean o_testDirectory_literalMutationString48__41 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString48__41);
        boolean o_testDirectory_literalMutationString48__43 = listener.getCreatedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString48__43);
        checkAndNotify();
        testDirAFile4 = touch(testDirAFile4);
        FileUtils.deleteDirectory(testDirB);
        checkAndNotify();
        boolean o_testDirectory_literalMutationString48__50 = listener.getDeletedDirectories().contains(testDirB);
        Assertions.assertTrue(o_testDirectory_literalMutationString48__50);
        boolean o_testDirectory_literalMutationString48__52 = listener.getChangedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString48__52);
        boolean o_testDirectory_literalMutationString48__54 = listener.getDeletedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString48__54);
        FileUtils.deleteDirectory(testDir);
        checkAndNotify();
        boolean o_testDirectory_literalMutationString48__58 = listener.getDeletedDirectories().contains(testDirA);
        Assertions.assertTrue(o_testDirectory_literalMutationString48__58);
        boolean o_testDirectory_literalMutationString48__60 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString48__60);
        boolean o_testDirectory_literalMutationString48__62 = listener.getDeletedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory_literalMutationString48__62);
        boolean o_testDirectory_literalMutationString48__64 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory_literalMutationString48__64);
        boolean o_testDirectory_literalMutationString48__66 = listener.getDeletedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString48__66);
        boolean o_testDirectory_literalMutationString48__68 = testDir.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString48__68);
        checkAndNotify();
        checkAndNotify();
        Assertions.assertTrue(o_testDirectory_literalMutationString48__9);
        Assertions.assertTrue(o_testDirectory_literalMutationString48__10);
        Assertions.assertTrue(o_testDirectory_literalMutationString48__11);
        Assertions.assertTrue(o_testDirectory_literalMutationString48__29);
        Assertions.assertTrue(o_testDirectory_literalMutationString48__31);
        Assertions.assertTrue(o_testDirectory_literalMutationString48__33);
        Assertions.assertTrue(o_testDirectory_literalMutationString48__35);
        Assertions.assertFalse(o_testDirectory_literalMutationString48__37);
        Assertions.assertTrue(o_testDirectory_literalMutationString48__39);
        Assertions.assertTrue(o_testDirectory_literalMutationString48__41);
        Assertions.assertTrue(o_testDirectory_literalMutationString48__43);
        Assertions.assertTrue(o_testDirectory_literalMutationString48__50);
        Assertions.assertTrue(o_testDirectory_literalMutationString48__52);
        Assertions.assertTrue(o_testDirectory_literalMutationString48__54);
        Assertions.assertTrue(o_testDirectory_literalMutationString48__58);
        Assertions.assertTrue(o_testDirectory_literalMutationString48__60);
        Assertions.assertFalse(o_testDirectory_literalMutationString48__62);
        Assertions.assertTrue(o_testDirectory_literalMutationString48__64);
        Assertions.assertTrue(o_testDirectory_literalMutationString48__66);
        Assertions.assertTrue(o_testDirectory_literalMutationString48__68);
    }

    @EnergyTest
    public void testDirectory_literalMutationString49() throws Exception {
        checkAndNotify();
        final File testDirA = new File(testDir, "!x*zH_,y(q");
        final File testDirB = new File(testDir, "test-dir-B");
        final File testDirC = new File(testDir, "test-dir-C");
        boolean o_testDirectory_literalMutationString49__9 = testDirA.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString49__9);
        boolean o_testDirectory_literalMutationString49__10 = testDirB.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString49__10);
        boolean o_testDirectory_literalMutationString49__11 = testDirC.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString49__11);
        final File testDirAFile1 = touch(new File(testDirA, "A-file1.java"));
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.txt"));
        final File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        final File testDirBFile1 = touch(new File(testDirB, "B-file1.java"));
        checkAndNotify();
        boolean o_testDirectory_literalMutationString49__29 = listener.getCreatedDirectories().contains(testDirA);
        Assertions.assertTrue(o_testDirectory_literalMutationString49__29);
        boolean o_testDirectory_literalMutationString49__31 = listener.getCreatedDirectories().contains(testDirB);
        Assertions.assertTrue(o_testDirectory_literalMutationString49__31);
        boolean o_testDirectory_literalMutationString49__33 = listener.getCreatedDirectories().contains(testDirC);
        Assertions.assertTrue(o_testDirectory_literalMutationString49__33);
        boolean o_testDirectory_literalMutationString49__35 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString49__35);
        boolean o_testDirectory_literalMutationString49__37 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory_literalMutationString49__37);
        boolean o_testDirectory_literalMutationString49__39 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory_literalMutationString49__39);
        boolean o_testDirectory_literalMutationString49__41 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString49__41);
        boolean o_testDirectory_literalMutationString49__43 = listener.getCreatedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString49__43);
        checkAndNotify();
        testDirAFile4 = touch(testDirAFile4);
        FileUtils.deleteDirectory(testDirB);
        checkAndNotify();
        boolean o_testDirectory_literalMutationString49__50 = listener.getDeletedDirectories().contains(testDirB);
        Assertions.assertTrue(o_testDirectory_literalMutationString49__50);
        boolean o_testDirectory_literalMutationString49__52 = listener.getChangedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString49__52);
        boolean o_testDirectory_literalMutationString49__54 = listener.getDeletedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString49__54);
        FileUtils.deleteDirectory(testDir);
        checkAndNotify();
        boolean o_testDirectory_literalMutationString49__58 = listener.getDeletedDirectories().contains(testDirA);
        Assertions.assertTrue(o_testDirectory_literalMutationString49__58);
        boolean o_testDirectory_literalMutationString49__60 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString49__60);
        boolean o_testDirectory_literalMutationString49__62 = listener.getDeletedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory_literalMutationString49__62);
        boolean o_testDirectory_literalMutationString49__64 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory_literalMutationString49__64);
        boolean o_testDirectory_literalMutationString49__66 = listener.getDeletedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString49__66);
        boolean o_testDirectory_literalMutationString49__68 = testDir.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString49__68);
        checkAndNotify();
        checkAndNotify();
        Assertions.assertTrue(o_testDirectory_literalMutationString49__9);
        Assertions.assertTrue(o_testDirectory_literalMutationString49__10);
        Assertions.assertTrue(o_testDirectory_literalMutationString49__11);
        Assertions.assertTrue(o_testDirectory_literalMutationString49__29);
        Assertions.assertTrue(o_testDirectory_literalMutationString49__31);
        Assertions.assertTrue(o_testDirectory_literalMutationString49__33);
        Assertions.assertTrue(o_testDirectory_literalMutationString49__35);
        Assertions.assertFalse(o_testDirectory_literalMutationString49__37);
        Assertions.assertTrue(o_testDirectory_literalMutationString49__39);
        Assertions.assertTrue(o_testDirectory_literalMutationString49__41);
        Assertions.assertTrue(o_testDirectory_literalMutationString49__43);
        Assertions.assertTrue(o_testDirectory_literalMutationString49__50);
        Assertions.assertTrue(o_testDirectory_literalMutationString49__52);
        Assertions.assertTrue(o_testDirectory_literalMutationString49__54);
        Assertions.assertTrue(o_testDirectory_literalMutationString49__58);
        Assertions.assertTrue(o_testDirectory_literalMutationString49__60);
        Assertions.assertFalse(o_testDirectory_literalMutationString49__62);
        Assertions.assertTrue(o_testDirectory_literalMutationString49__64);
        Assertions.assertTrue(o_testDirectory_literalMutationString49__66);
        Assertions.assertTrue(o_testDirectory_literalMutationString49__68);
    }

    @EnergyTest
    public void testDirectory_literalMutationString50() throws Exception {
        checkAndNotify();
        final File testDirA = new File(testDir, "test-Sdir-A");
        final File testDirB = new File(testDir, "test-dir-B");
        final File testDirC = new File(testDir, "test-dir-C");
        boolean o_testDirectory_literalMutationString50__9 = testDirA.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString50__9);
        boolean o_testDirectory_literalMutationString50__10 = testDirB.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString50__10);
        boolean o_testDirectory_literalMutationString50__11 = testDirC.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString50__11);
        final File testDirAFile1 = touch(new File(testDirA, "A-file1.java"));
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.txt"));
        final File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        final File testDirBFile1 = touch(new File(testDirB, "B-file1.java"));
        checkAndNotify();
        boolean o_testDirectory_literalMutationString50__29 = listener.getCreatedDirectories().contains(testDirA);
        Assertions.assertTrue(o_testDirectory_literalMutationString50__29);
        boolean o_testDirectory_literalMutationString50__31 = listener.getCreatedDirectories().contains(testDirB);
        Assertions.assertTrue(o_testDirectory_literalMutationString50__31);
        boolean o_testDirectory_literalMutationString50__33 = listener.getCreatedDirectories().contains(testDirC);
        Assertions.assertTrue(o_testDirectory_literalMutationString50__33);
        boolean o_testDirectory_literalMutationString50__35 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString50__35);
        boolean o_testDirectory_literalMutationString50__37 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory_literalMutationString50__37);
        boolean o_testDirectory_literalMutationString50__39 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory_literalMutationString50__39);
        boolean o_testDirectory_literalMutationString50__41 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString50__41);
        boolean o_testDirectory_literalMutationString50__43 = listener.getCreatedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString50__43);
        checkAndNotify();
        testDirAFile4 = touch(testDirAFile4);
        FileUtils.deleteDirectory(testDirB);
        checkAndNotify();
        boolean o_testDirectory_literalMutationString50__50 = listener.getDeletedDirectories().contains(testDirB);
        Assertions.assertTrue(o_testDirectory_literalMutationString50__50);
        boolean o_testDirectory_literalMutationString50__52 = listener.getChangedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString50__52);
        boolean o_testDirectory_literalMutationString50__54 = listener.getDeletedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString50__54);
        FileUtils.deleteDirectory(testDir);
        checkAndNotify();
        boolean o_testDirectory_literalMutationString50__58 = listener.getDeletedDirectories().contains(testDirA);
        Assertions.assertTrue(o_testDirectory_literalMutationString50__58);
        boolean o_testDirectory_literalMutationString50__60 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString50__60);
        boolean o_testDirectory_literalMutationString50__62 = listener.getDeletedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory_literalMutationString50__62);
        boolean o_testDirectory_literalMutationString50__64 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory_literalMutationString50__64);
        boolean o_testDirectory_literalMutationString50__66 = listener.getDeletedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString50__66);
        boolean o_testDirectory_literalMutationString50__68 = testDir.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString50__68);
        checkAndNotify();
        checkAndNotify();
        Assertions.assertTrue(o_testDirectory_literalMutationString50__9);
        Assertions.assertTrue(o_testDirectory_literalMutationString50__10);
        Assertions.assertTrue(o_testDirectory_literalMutationString50__11);
        Assertions.assertTrue(o_testDirectory_literalMutationString50__29);
        Assertions.assertTrue(o_testDirectory_literalMutationString50__31);
        Assertions.assertTrue(o_testDirectory_literalMutationString50__33);
        Assertions.assertTrue(o_testDirectory_literalMutationString50__35);
        Assertions.assertFalse(o_testDirectory_literalMutationString50__37);
        Assertions.assertTrue(o_testDirectory_literalMutationString50__39);
        Assertions.assertTrue(o_testDirectory_literalMutationString50__41);
        Assertions.assertTrue(o_testDirectory_literalMutationString50__43);
        Assertions.assertTrue(o_testDirectory_literalMutationString50__50);
        Assertions.assertTrue(o_testDirectory_literalMutationString50__52);
        Assertions.assertTrue(o_testDirectory_literalMutationString50__54);
        Assertions.assertTrue(o_testDirectory_literalMutationString50__58);
        Assertions.assertTrue(o_testDirectory_literalMutationString50__60);
        Assertions.assertFalse(o_testDirectory_literalMutationString50__62);
        Assertions.assertTrue(o_testDirectory_literalMutationString50__64);
        Assertions.assertTrue(o_testDirectory_literalMutationString50__66);
        Assertions.assertTrue(o_testDirectory_literalMutationString50__68);
    }

    @EnergyTest
    public void testDirectory_literalMutationString51() throws Exception {
        checkAndNotify();
        final File testDirA = new File(testDir, "test-ir-A");
        final File testDirB = new File(testDir, "test-dir-B");
        final File testDirC = new File(testDir, "test-dir-C");
        boolean o_testDirectory_literalMutationString51__9 = testDirA.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString51__9);
        boolean o_testDirectory_literalMutationString51__10 = testDirB.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString51__10);
        boolean o_testDirectory_literalMutationString51__11 = testDirC.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString51__11);
        final File testDirAFile1 = touch(new File(testDirA, "A-file1.java"));
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.txt"));
        final File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        final File testDirBFile1 = touch(new File(testDirB, "B-file1.java"));
        checkAndNotify();
        boolean o_testDirectory_literalMutationString51__29 = listener.getCreatedDirectories().contains(testDirA);
        Assertions.assertTrue(o_testDirectory_literalMutationString51__29);
        boolean o_testDirectory_literalMutationString51__31 = listener.getCreatedDirectories().contains(testDirB);
        Assertions.assertTrue(o_testDirectory_literalMutationString51__31);
        boolean o_testDirectory_literalMutationString51__33 = listener.getCreatedDirectories().contains(testDirC);
        Assertions.assertTrue(o_testDirectory_literalMutationString51__33);
        boolean o_testDirectory_literalMutationString51__35 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString51__35);
        boolean o_testDirectory_literalMutationString51__37 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory_literalMutationString51__37);
        boolean o_testDirectory_literalMutationString51__39 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory_literalMutationString51__39);
        boolean o_testDirectory_literalMutationString51__41 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString51__41);
        boolean o_testDirectory_literalMutationString51__43 = listener.getCreatedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString51__43);
        checkAndNotify();
        testDirAFile4 = touch(testDirAFile4);
        FileUtils.deleteDirectory(testDirB);
        checkAndNotify();
        boolean o_testDirectory_literalMutationString51__50 = listener.getDeletedDirectories().contains(testDirB);
        Assertions.assertTrue(o_testDirectory_literalMutationString51__50);
        boolean o_testDirectory_literalMutationString51__52 = listener.getChangedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString51__52);
        boolean o_testDirectory_literalMutationString51__54 = listener.getDeletedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString51__54);
        FileUtils.deleteDirectory(testDir);
        checkAndNotify();
        boolean o_testDirectory_literalMutationString51__58 = listener.getDeletedDirectories().contains(testDirA);
        Assertions.assertTrue(o_testDirectory_literalMutationString51__58);
        boolean o_testDirectory_literalMutationString51__60 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString51__60);
        boolean o_testDirectory_literalMutationString51__62 = listener.getDeletedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory_literalMutationString51__62);
        boolean o_testDirectory_literalMutationString51__64 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory_literalMutationString51__64);
        boolean o_testDirectory_literalMutationString51__66 = listener.getDeletedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString51__66);
        boolean o_testDirectory_literalMutationString51__68 = testDir.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString51__68);
        checkAndNotify();
        checkAndNotify();
        Assertions.assertTrue(o_testDirectory_literalMutationString51__9);
        Assertions.assertTrue(o_testDirectory_literalMutationString51__10);
        Assertions.assertTrue(o_testDirectory_literalMutationString51__11);
        Assertions.assertTrue(o_testDirectory_literalMutationString51__29);
        Assertions.assertTrue(o_testDirectory_literalMutationString51__31);
        Assertions.assertTrue(o_testDirectory_literalMutationString51__33);
        Assertions.assertTrue(o_testDirectory_literalMutationString51__35);
        Assertions.assertFalse(o_testDirectory_literalMutationString51__37);
        Assertions.assertTrue(o_testDirectory_literalMutationString51__39);
        Assertions.assertTrue(o_testDirectory_literalMutationString51__41);
        Assertions.assertTrue(o_testDirectory_literalMutationString51__43);
        Assertions.assertTrue(o_testDirectory_literalMutationString51__50);
        Assertions.assertTrue(o_testDirectory_literalMutationString51__52);
        Assertions.assertTrue(o_testDirectory_literalMutationString51__54);
        Assertions.assertTrue(o_testDirectory_literalMutationString51__58);
        Assertions.assertTrue(o_testDirectory_literalMutationString51__60);
        Assertions.assertFalse(o_testDirectory_literalMutationString51__62);
        Assertions.assertTrue(o_testDirectory_literalMutationString51__64);
        Assertions.assertTrue(o_testDirectory_literalMutationString51__66);
        Assertions.assertTrue(o_testDirectory_literalMutationString51__68);
    }

    @EnergyTest
    public void testDirectory_literalMutationString52() throws Exception {
        checkAndNotify();
        final File testDirA = new File(testDir, "test-dir-A");
        final File testDirB = new File(testDir, "");
        final File testDirC = new File(testDir, "test-dir-C");
        boolean o_testDirectory_literalMutationString52__9 = testDirA.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString52__9);
        boolean o_testDirectory_literalMutationString52__10 = testDirB.mkdir();
        Assertions.assertFalse(o_testDirectory_literalMutationString52__10);
        boolean o_testDirectory_literalMutationString52__11 = testDirC.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString52__11);
        final File testDirAFile1 = touch(new File(testDirA, "A-file1.java"));
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.txt"));
        final File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        final File testDirBFile1 = touch(new File(testDirB, "B-file1.java"));
        checkAndNotify();
        boolean o_testDirectory_literalMutationString52__29 = listener.getCreatedDirectories().contains(testDirA);
        Assertions.assertTrue(o_testDirectory_literalMutationString52__29);
        boolean o_testDirectory_literalMutationString52__31 = listener.getCreatedDirectories().contains(testDirB);
        Assertions.assertFalse(o_testDirectory_literalMutationString52__31);
        boolean o_testDirectory_literalMutationString52__33 = listener.getCreatedDirectories().contains(testDirC);
        Assertions.assertTrue(o_testDirectory_literalMutationString52__33);
        boolean o_testDirectory_literalMutationString52__35 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString52__35);
        boolean o_testDirectory_literalMutationString52__37 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory_literalMutationString52__37);
        boolean o_testDirectory_literalMutationString52__39 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory_literalMutationString52__39);
        boolean o_testDirectory_literalMutationString52__41 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString52__41);
        boolean o_testDirectory_literalMutationString52__43 = listener.getCreatedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString52__43);
        checkAndNotify();
        testDirAFile4 = touch(testDirAFile4);
        FileUtils.deleteDirectory(testDirB);
        checkAndNotify();
        boolean o_testDirectory_literalMutationString52__50 = listener.getDeletedDirectories().contains(testDirB);
        Assertions.assertFalse(o_testDirectory_literalMutationString52__50);
        boolean o_testDirectory_literalMutationString52__52 = listener.getChangedFiles().contains(testDirAFile4);
        Assertions.assertFalse(o_testDirectory_literalMutationString52__52);
        boolean o_testDirectory_literalMutationString52__54 = listener.getDeletedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString52__54);
        FileUtils.deleteDirectory(testDir);
        checkAndNotify();
        boolean o_testDirectory_literalMutationString52__58 = listener.getDeletedDirectories().contains(testDirA);
        Assertions.assertFalse(o_testDirectory_literalMutationString52__58);
        boolean o_testDirectory_literalMutationString52__60 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testDirectory_literalMutationString52__60);
        boolean o_testDirectory_literalMutationString52__62 = listener.getDeletedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory_literalMutationString52__62);
        boolean o_testDirectory_literalMutationString52__64 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertFalse(o_testDirectory_literalMutationString52__64);
        boolean o_testDirectory_literalMutationString52__66 = listener.getDeletedFiles().contains(testDirAFile4);
        Assertions.assertFalse(o_testDirectory_literalMutationString52__66);
        boolean o_testDirectory_literalMutationString52__68 = testDir.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString52__68);
        checkAndNotify();
        checkAndNotify();
        Assertions.assertTrue(o_testDirectory_literalMutationString52__9);
        Assertions.assertFalse(o_testDirectory_literalMutationString52__10);
        Assertions.assertTrue(o_testDirectory_literalMutationString52__11);
        Assertions.assertTrue(o_testDirectory_literalMutationString52__29);
        Assertions.assertFalse(o_testDirectory_literalMutationString52__31);
        Assertions.assertTrue(o_testDirectory_literalMutationString52__33);
        Assertions.assertTrue(o_testDirectory_literalMutationString52__35);
        Assertions.assertFalse(o_testDirectory_literalMutationString52__37);
        Assertions.assertTrue(o_testDirectory_literalMutationString52__39);
        Assertions.assertTrue(o_testDirectory_literalMutationString52__41);
        Assertions.assertTrue(o_testDirectory_literalMutationString52__43);
        Assertions.assertFalse(o_testDirectory_literalMutationString52__50);
        Assertions.assertFalse(o_testDirectory_literalMutationString52__52);
        Assertions.assertTrue(o_testDirectory_literalMutationString52__54);
        Assertions.assertFalse(o_testDirectory_literalMutationString52__58);
        Assertions.assertFalse(o_testDirectory_literalMutationString52__60);
        Assertions.assertFalse(o_testDirectory_literalMutationString52__62);
        Assertions.assertFalse(o_testDirectory_literalMutationString52__64);
        Assertions.assertFalse(o_testDirectory_literalMutationString52__66);
        Assertions.assertTrue(o_testDirectory_literalMutationString52__68);
    }

    @EnergyTest
    public void testDirectory_literalMutationString53() throws Exception {
        checkAndNotify();
        final File testDirA = new File(testDir, "test-dir-A");
        final File testDirB = new File(testDir, "Delete");
        final File testDirC = new File(testDir, "test-dir-C");
        boolean o_testDirectory_literalMutationString53__9 = testDirA.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString53__9);
        boolean o_testDirectory_literalMutationString53__10 = testDirB.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString53__10);
        boolean o_testDirectory_literalMutationString53__11 = testDirC.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString53__11);
        final File testDirAFile1 = touch(new File(testDirA, "A-file1.java"));
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.txt"));
        final File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        final File testDirBFile1 = touch(new File(testDirB, "B-file1.java"));
        checkAndNotify();
        boolean o_testDirectory_literalMutationString53__29 = listener.getCreatedDirectories().contains(testDirA);
        Assertions.assertTrue(o_testDirectory_literalMutationString53__29);
        boolean o_testDirectory_literalMutationString53__31 = listener.getCreatedDirectories().contains(testDirB);
        Assertions.assertTrue(o_testDirectory_literalMutationString53__31);
        boolean o_testDirectory_literalMutationString53__33 = listener.getCreatedDirectories().contains(testDirC);
        Assertions.assertTrue(o_testDirectory_literalMutationString53__33);
        boolean o_testDirectory_literalMutationString53__35 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString53__35);
        boolean o_testDirectory_literalMutationString53__37 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory_literalMutationString53__37);
        boolean o_testDirectory_literalMutationString53__39 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory_literalMutationString53__39);
        boolean o_testDirectory_literalMutationString53__41 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString53__41);
        boolean o_testDirectory_literalMutationString53__43 = listener.getCreatedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString53__43);
        checkAndNotify();
        testDirAFile4 = touch(testDirAFile4);
        FileUtils.deleteDirectory(testDirB);
        checkAndNotify();
        boolean o_testDirectory_literalMutationString53__50 = listener.getDeletedDirectories().contains(testDirB);
        Assertions.assertTrue(o_testDirectory_literalMutationString53__50);
        boolean o_testDirectory_literalMutationString53__52 = listener.getChangedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString53__52);
        boolean o_testDirectory_literalMutationString53__54 = listener.getDeletedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString53__54);
        FileUtils.deleteDirectory(testDir);
        checkAndNotify();
        boolean o_testDirectory_literalMutationString53__58 = listener.getDeletedDirectories().contains(testDirA);
        Assertions.assertTrue(o_testDirectory_literalMutationString53__58);
        boolean o_testDirectory_literalMutationString53__60 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString53__60);
        boolean o_testDirectory_literalMutationString53__62 = listener.getDeletedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory_literalMutationString53__62);
        boolean o_testDirectory_literalMutationString53__64 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory_literalMutationString53__64);
        boolean o_testDirectory_literalMutationString53__66 = listener.getDeletedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString53__66);
        boolean o_testDirectory_literalMutationString53__68 = testDir.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString53__68);
        checkAndNotify();
        checkAndNotify();
        Assertions.assertTrue(o_testDirectory_literalMutationString53__9);
        Assertions.assertTrue(o_testDirectory_literalMutationString53__10);
        Assertions.assertTrue(o_testDirectory_literalMutationString53__11);
        Assertions.assertTrue(o_testDirectory_literalMutationString53__29);
        Assertions.assertTrue(o_testDirectory_literalMutationString53__31);
        Assertions.assertTrue(o_testDirectory_literalMutationString53__33);
        Assertions.assertTrue(o_testDirectory_literalMutationString53__35);
        Assertions.assertFalse(o_testDirectory_literalMutationString53__37);
        Assertions.assertTrue(o_testDirectory_literalMutationString53__39);
        Assertions.assertTrue(o_testDirectory_literalMutationString53__41);
        Assertions.assertTrue(o_testDirectory_literalMutationString53__43);
        Assertions.assertTrue(o_testDirectory_literalMutationString53__50);
        Assertions.assertTrue(o_testDirectory_literalMutationString53__52);
        Assertions.assertTrue(o_testDirectory_literalMutationString53__54);
        Assertions.assertTrue(o_testDirectory_literalMutationString53__58);
        Assertions.assertTrue(o_testDirectory_literalMutationString53__60);
        Assertions.assertFalse(o_testDirectory_literalMutationString53__62);
        Assertions.assertTrue(o_testDirectory_literalMutationString53__64);
        Assertions.assertTrue(o_testDirectory_literalMutationString53__66);
        Assertions.assertTrue(o_testDirectory_literalMutationString53__68);
    }

    @EnergyTest
    public void testDirectory_literalMutationString54() throws Exception {
        checkAndNotify();
        final File testDirA = new File(testDir, "test-dir-A");
        final File testDirB = new File(testDir, "test-d[ir-B");
        final File testDirC = new File(testDir, "test-dir-C");
        boolean o_testDirectory_literalMutationString54__9 = testDirA.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString54__9);
        boolean o_testDirectory_literalMutationString54__10 = testDirB.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString54__10);
        boolean o_testDirectory_literalMutationString54__11 = testDirC.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString54__11);
        final File testDirAFile1 = touch(new File(testDirA, "A-file1.java"));
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.txt"));
        final File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        final File testDirBFile1 = touch(new File(testDirB, "B-file1.java"));
        checkAndNotify();
        boolean o_testDirectory_literalMutationString54__29 = listener.getCreatedDirectories().contains(testDirA);
        Assertions.assertTrue(o_testDirectory_literalMutationString54__29);
        boolean o_testDirectory_literalMutationString54__31 = listener.getCreatedDirectories().contains(testDirB);
        Assertions.assertTrue(o_testDirectory_literalMutationString54__31);
        boolean o_testDirectory_literalMutationString54__33 = listener.getCreatedDirectories().contains(testDirC);
        Assertions.assertTrue(o_testDirectory_literalMutationString54__33);
        boolean o_testDirectory_literalMutationString54__35 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString54__35);
        boolean o_testDirectory_literalMutationString54__37 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory_literalMutationString54__37);
        boolean o_testDirectory_literalMutationString54__39 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory_literalMutationString54__39);
        boolean o_testDirectory_literalMutationString54__41 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString54__41);
        boolean o_testDirectory_literalMutationString54__43 = listener.getCreatedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString54__43);
        checkAndNotify();
        testDirAFile4 = touch(testDirAFile4);
        FileUtils.deleteDirectory(testDirB);
        checkAndNotify();
        boolean o_testDirectory_literalMutationString54__50 = listener.getDeletedDirectories().contains(testDirB);
        Assertions.assertTrue(o_testDirectory_literalMutationString54__50);
        boolean o_testDirectory_literalMutationString54__52 = listener.getChangedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString54__52);
        boolean o_testDirectory_literalMutationString54__54 = listener.getDeletedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString54__54);
        FileUtils.deleteDirectory(testDir);
        checkAndNotify();
        boolean o_testDirectory_literalMutationString54__58 = listener.getDeletedDirectories().contains(testDirA);
        Assertions.assertTrue(o_testDirectory_literalMutationString54__58);
        boolean o_testDirectory_literalMutationString54__60 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString54__60);
        boolean o_testDirectory_literalMutationString54__62 = listener.getDeletedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory_literalMutationString54__62);
        boolean o_testDirectory_literalMutationString54__64 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory_literalMutationString54__64);
        boolean o_testDirectory_literalMutationString54__66 = listener.getDeletedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString54__66);
        boolean o_testDirectory_literalMutationString54__68 = testDir.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString54__68);
        checkAndNotify();
        checkAndNotify();
        Assertions.assertTrue(o_testDirectory_literalMutationString54__9);
        Assertions.assertTrue(o_testDirectory_literalMutationString54__10);
        Assertions.assertTrue(o_testDirectory_literalMutationString54__11);
        Assertions.assertTrue(o_testDirectory_literalMutationString54__29);
        Assertions.assertTrue(o_testDirectory_literalMutationString54__31);
        Assertions.assertTrue(o_testDirectory_literalMutationString54__33);
        Assertions.assertTrue(o_testDirectory_literalMutationString54__35);
        Assertions.assertFalse(o_testDirectory_literalMutationString54__37);
        Assertions.assertTrue(o_testDirectory_literalMutationString54__39);
        Assertions.assertTrue(o_testDirectory_literalMutationString54__41);
        Assertions.assertTrue(o_testDirectory_literalMutationString54__43);
        Assertions.assertTrue(o_testDirectory_literalMutationString54__50);
        Assertions.assertTrue(o_testDirectory_literalMutationString54__52);
        Assertions.assertTrue(o_testDirectory_literalMutationString54__54);
        Assertions.assertTrue(o_testDirectory_literalMutationString54__58);
        Assertions.assertTrue(o_testDirectory_literalMutationString54__60);
        Assertions.assertFalse(o_testDirectory_literalMutationString54__62);
        Assertions.assertTrue(o_testDirectory_literalMutationString54__64);
        Assertions.assertTrue(o_testDirectory_literalMutationString54__66);
        Assertions.assertTrue(o_testDirectory_literalMutationString54__68);
    }

    @EnergyTest
    public void testDirectory_literalMutationString55() throws Exception {
        checkAndNotify();
        final File testDirA = new File(testDir, "test-dir-A");
        final File testDirB = new File(testDir, "tst-dir-B");
        final File testDirC = new File(testDir, "test-dir-C");
        boolean o_testDirectory_literalMutationString55__9 = testDirA.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString55__9);
        boolean o_testDirectory_literalMutationString55__10 = testDirB.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString55__10);
        boolean o_testDirectory_literalMutationString55__11 = testDirC.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString55__11);
        final File testDirAFile1 = touch(new File(testDirA, "A-file1.java"));
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.txt"));
        final File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        final File testDirBFile1 = touch(new File(testDirB, "B-file1.java"));
        checkAndNotify();
        boolean o_testDirectory_literalMutationString55__29 = listener.getCreatedDirectories().contains(testDirA);
        Assertions.assertTrue(o_testDirectory_literalMutationString55__29);
        boolean o_testDirectory_literalMutationString55__31 = listener.getCreatedDirectories().contains(testDirB);
        Assertions.assertTrue(o_testDirectory_literalMutationString55__31);
        boolean o_testDirectory_literalMutationString55__33 = listener.getCreatedDirectories().contains(testDirC);
        Assertions.assertTrue(o_testDirectory_literalMutationString55__33);
        boolean o_testDirectory_literalMutationString55__35 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString55__35);
        boolean o_testDirectory_literalMutationString55__37 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory_literalMutationString55__37);
        boolean o_testDirectory_literalMutationString55__39 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory_literalMutationString55__39);
        boolean o_testDirectory_literalMutationString55__41 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString55__41);
        boolean o_testDirectory_literalMutationString55__43 = listener.getCreatedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString55__43);
        checkAndNotify();
        testDirAFile4 = touch(testDirAFile4);
        FileUtils.deleteDirectory(testDirB);
        checkAndNotify();
        boolean o_testDirectory_literalMutationString55__50 = listener.getDeletedDirectories().contains(testDirB);
        Assertions.assertTrue(o_testDirectory_literalMutationString55__50);
        boolean o_testDirectory_literalMutationString55__52 = listener.getChangedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString55__52);
        boolean o_testDirectory_literalMutationString55__54 = listener.getDeletedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString55__54);
        FileUtils.deleteDirectory(testDir);
        checkAndNotify();
        boolean o_testDirectory_literalMutationString55__58 = listener.getDeletedDirectories().contains(testDirA);
        Assertions.assertTrue(o_testDirectory_literalMutationString55__58);
        boolean o_testDirectory_literalMutationString55__60 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString55__60);
        boolean o_testDirectory_literalMutationString55__62 = listener.getDeletedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory_literalMutationString55__62);
        boolean o_testDirectory_literalMutationString55__64 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory_literalMutationString55__64);
        boolean o_testDirectory_literalMutationString55__66 = listener.getDeletedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString55__66);
        boolean o_testDirectory_literalMutationString55__68 = testDir.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString55__68);
        checkAndNotify();
        checkAndNotify();
        Assertions.assertTrue(o_testDirectory_literalMutationString55__9);
        Assertions.assertTrue(o_testDirectory_literalMutationString55__10);
        Assertions.assertTrue(o_testDirectory_literalMutationString55__11);
        Assertions.assertTrue(o_testDirectory_literalMutationString55__29);
        Assertions.assertTrue(o_testDirectory_literalMutationString55__31);
        Assertions.assertTrue(o_testDirectory_literalMutationString55__33);
        Assertions.assertTrue(o_testDirectory_literalMutationString55__35);
        Assertions.assertFalse(o_testDirectory_literalMutationString55__37);
        Assertions.assertTrue(o_testDirectory_literalMutationString55__39);
        Assertions.assertTrue(o_testDirectory_literalMutationString55__41);
        Assertions.assertTrue(o_testDirectory_literalMutationString55__43);
        Assertions.assertTrue(o_testDirectory_literalMutationString55__50);
        Assertions.assertTrue(o_testDirectory_literalMutationString55__52);
        Assertions.assertTrue(o_testDirectory_literalMutationString55__54);
        Assertions.assertTrue(o_testDirectory_literalMutationString55__58);
        Assertions.assertTrue(o_testDirectory_literalMutationString55__60);
        Assertions.assertFalse(o_testDirectory_literalMutationString55__62);
        Assertions.assertTrue(o_testDirectory_literalMutationString55__64);
        Assertions.assertTrue(o_testDirectory_literalMutationString55__66);
        Assertions.assertTrue(o_testDirectory_literalMutationString55__68);
    }

    @EnergyTest
    public void testDirectory_literalMutationString56() throws Exception {
        checkAndNotify();
        final File testDirA = new File(testDir, "test-dir-A");
        final File testDirB = new File(testDir, "t st-dir-B");
        final File testDirC = new File(testDir, "test-dir-C");
        boolean o_testDirectory_literalMutationString56__9 = testDirA.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString56__9);
        boolean o_testDirectory_literalMutationString56__10 = testDirB.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString56__10);
        boolean o_testDirectory_literalMutationString56__11 = testDirC.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString56__11);
        final File testDirAFile1 = touch(new File(testDirA, "A-file1.java"));
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.txt"));
        final File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        final File testDirBFile1 = touch(new File(testDirB, "B-file1.java"));
        checkAndNotify();
        boolean o_testDirectory_literalMutationString56__29 = listener.getCreatedDirectories().contains(testDirA);
        Assertions.assertTrue(o_testDirectory_literalMutationString56__29);
        boolean o_testDirectory_literalMutationString56__31 = listener.getCreatedDirectories().contains(testDirB);
        Assertions.assertTrue(o_testDirectory_literalMutationString56__31);
        boolean o_testDirectory_literalMutationString56__33 = listener.getCreatedDirectories().contains(testDirC);
        Assertions.assertTrue(o_testDirectory_literalMutationString56__33);
        boolean o_testDirectory_literalMutationString56__35 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString56__35);
        boolean o_testDirectory_literalMutationString56__37 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory_literalMutationString56__37);
        boolean o_testDirectory_literalMutationString56__39 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory_literalMutationString56__39);
        boolean o_testDirectory_literalMutationString56__41 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString56__41);
        boolean o_testDirectory_literalMutationString56__43 = listener.getCreatedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString56__43);
        checkAndNotify();
        testDirAFile4 = touch(testDirAFile4);
        FileUtils.deleteDirectory(testDirB);
        checkAndNotify();
        boolean o_testDirectory_literalMutationString56__50 = listener.getDeletedDirectories().contains(testDirB);
        Assertions.assertTrue(o_testDirectory_literalMutationString56__50);
        boolean o_testDirectory_literalMutationString56__52 = listener.getChangedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString56__52);
        boolean o_testDirectory_literalMutationString56__54 = listener.getDeletedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString56__54);
        FileUtils.deleteDirectory(testDir);
        checkAndNotify();
        boolean o_testDirectory_literalMutationString56__58 = listener.getDeletedDirectories().contains(testDirA);
        Assertions.assertTrue(o_testDirectory_literalMutationString56__58);
        boolean o_testDirectory_literalMutationString56__60 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString56__60);
        boolean o_testDirectory_literalMutationString56__62 = listener.getDeletedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory_literalMutationString56__62);
        boolean o_testDirectory_literalMutationString56__64 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory_literalMutationString56__64);
        boolean o_testDirectory_literalMutationString56__66 = listener.getDeletedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString56__66);
        boolean o_testDirectory_literalMutationString56__68 = testDir.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString56__68);
        checkAndNotify();
        checkAndNotify();
        Assertions.assertTrue(o_testDirectory_literalMutationString56__9);
        Assertions.assertTrue(o_testDirectory_literalMutationString56__10);
        Assertions.assertTrue(o_testDirectory_literalMutationString56__11);
        Assertions.assertTrue(o_testDirectory_literalMutationString56__29);
        Assertions.assertTrue(o_testDirectory_literalMutationString56__31);
        Assertions.assertTrue(o_testDirectory_literalMutationString56__33);
        Assertions.assertTrue(o_testDirectory_literalMutationString56__35);
        Assertions.assertFalse(o_testDirectory_literalMutationString56__37);
        Assertions.assertTrue(o_testDirectory_literalMutationString56__39);
        Assertions.assertTrue(o_testDirectory_literalMutationString56__41);
        Assertions.assertTrue(o_testDirectory_literalMutationString56__43);
        Assertions.assertTrue(o_testDirectory_literalMutationString56__50);
        Assertions.assertTrue(o_testDirectory_literalMutationString56__52);
        Assertions.assertTrue(o_testDirectory_literalMutationString56__54);
        Assertions.assertTrue(o_testDirectory_literalMutationString56__58);
        Assertions.assertTrue(o_testDirectory_literalMutationString56__60);
        Assertions.assertFalse(o_testDirectory_literalMutationString56__62);
        Assertions.assertTrue(o_testDirectory_literalMutationString56__64);
        Assertions.assertTrue(o_testDirectory_literalMutationString56__66);
        Assertions.assertTrue(o_testDirectory_literalMutationString56__68);
    }

    @EnergyTest
    public void testDirectory_literalMutationString57() throws Exception {
        checkAndNotify();
        final File testDirA = new File(testDir, "test-dir-A");
        final File testDirB = new File(testDir, "pbL[{$QV5:");
        final File testDirC = new File(testDir, "test-dir-C");
        boolean o_testDirectory_literalMutationString57__9 = testDirA.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString57__9);
        boolean o_testDirectory_literalMutationString57__10 = testDirB.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString57__10);
        boolean o_testDirectory_literalMutationString57__11 = testDirC.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString57__11);
        final File testDirAFile1 = touch(new File(testDirA, "A-file1.java"));
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.txt"));
        final File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        final File testDirBFile1 = touch(new File(testDirB, "B-file1.java"));
        checkAndNotify();
        boolean o_testDirectory_literalMutationString57__29 = listener.getCreatedDirectories().contains(testDirA);
        Assertions.assertTrue(o_testDirectory_literalMutationString57__29);
        boolean o_testDirectory_literalMutationString57__31 = listener.getCreatedDirectories().contains(testDirB);
        Assertions.assertTrue(o_testDirectory_literalMutationString57__31);
        boolean o_testDirectory_literalMutationString57__33 = listener.getCreatedDirectories().contains(testDirC);
        Assertions.assertTrue(o_testDirectory_literalMutationString57__33);
        boolean o_testDirectory_literalMutationString57__35 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString57__35);
        boolean o_testDirectory_literalMutationString57__37 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory_literalMutationString57__37);
        boolean o_testDirectory_literalMutationString57__39 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory_literalMutationString57__39);
        boolean o_testDirectory_literalMutationString57__41 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString57__41);
        boolean o_testDirectory_literalMutationString57__43 = listener.getCreatedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString57__43);
        checkAndNotify();
        testDirAFile4 = touch(testDirAFile4);
        FileUtils.deleteDirectory(testDirB);
        checkAndNotify();
        boolean o_testDirectory_literalMutationString57__50 = listener.getDeletedDirectories().contains(testDirB);
        Assertions.assertTrue(o_testDirectory_literalMutationString57__50);
        boolean o_testDirectory_literalMutationString57__52 = listener.getChangedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString57__52);
        boolean o_testDirectory_literalMutationString57__54 = listener.getDeletedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString57__54);
        FileUtils.deleteDirectory(testDir);
        checkAndNotify();
        boolean o_testDirectory_literalMutationString57__58 = listener.getDeletedDirectories().contains(testDirA);
        Assertions.assertTrue(o_testDirectory_literalMutationString57__58);
        boolean o_testDirectory_literalMutationString57__60 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString57__60);
        boolean o_testDirectory_literalMutationString57__62 = listener.getDeletedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory_literalMutationString57__62);
        boolean o_testDirectory_literalMutationString57__64 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory_literalMutationString57__64);
        boolean o_testDirectory_literalMutationString57__66 = listener.getDeletedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString57__66);
        boolean o_testDirectory_literalMutationString57__68 = testDir.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString57__68);
        checkAndNotify();
        checkAndNotify();
        Assertions.assertTrue(o_testDirectory_literalMutationString57__9);
        Assertions.assertTrue(o_testDirectory_literalMutationString57__10);
        Assertions.assertTrue(o_testDirectory_literalMutationString57__11);
        Assertions.assertTrue(o_testDirectory_literalMutationString57__29);
        Assertions.assertTrue(o_testDirectory_literalMutationString57__31);
        Assertions.assertTrue(o_testDirectory_literalMutationString57__33);
        Assertions.assertTrue(o_testDirectory_literalMutationString57__35);
        Assertions.assertFalse(o_testDirectory_literalMutationString57__37);
        Assertions.assertTrue(o_testDirectory_literalMutationString57__39);
        Assertions.assertTrue(o_testDirectory_literalMutationString57__41);
        Assertions.assertTrue(o_testDirectory_literalMutationString57__43);
        Assertions.assertTrue(o_testDirectory_literalMutationString57__50);
        Assertions.assertTrue(o_testDirectory_literalMutationString57__52);
        Assertions.assertTrue(o_testDirectory_literalMutationString57__54);
        Assertions.assertTrue(o_testDirectory_literalMutationString57__58);
        Assertions.assertTrue(o_testDirectory_literalMutationString57__60);
        Assertions.assertFalse(o_testDirectory_literalMutationString57__62);
        Assertions.assertTrue(o_testDirectory_literalMutationString57__64);
        Assertions.assertTrue(o_testDirectory_literalMutationString57__66);
        Assertions.assertTrue(o_testDirectory_literalMutationString57__68);
    }

    @EnergyTest
    public void testDirectory_literalMutationString58() throws Exception {
        checkAndNotify();
        final File testDirA = new File(testDir, "test-dir-A");
        final File testDirB = new File(testDir, "test-dir-B");
        final File testDirC = new File(testDir, "");
        boolean o_testDirectory_literalMutationString58__9 = testDirA.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString58__9);
        boolean o_testDirectory_literalMutationString58__10 = testDirB.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString58__10);
        boolean o_testDirectory_literalMutationString58__11 = testDirC.mkdir();
        Assertions.assertFalse(o_testDirectory_literalMutationString58__11);
        final File testDirAFile1 = touch(new File(testDirA, "A-file1.java"));
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.txt"));
        final File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        final File testDirBFile1 = touch(new File(testDirB, "B-file1.java"));
        checkAndNotify();
        boolean o_testDirectory_literalMutationString58__29 = listener.getCreatedDirectories().contains(testDirA);
        Assertions.assertTrue(o_testDirectory_literalMutationString58__29);
        boolean o_testDirectory_literalMutationString58__31 = listener.getCreatedDirectories().contains(testDirB);
        Assertions.assertTrue(o_testDirectory_literalMutationString58__31);
        boolean o_testDirectory_literalMutationString58__33 = listener.getCreatedDirectories().contains(testDirC);
        Assertions.assertFalse(o_testDirectory_literalMutationString58__33);
        boolean o_testDirectory_literalMutationString58__35 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString58__35);
        boolean o_testDirectory_literalMutationString58__37 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory_literalMutationString58__37);
        boolean o_testDirectory_literalMutationString58__39 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory_literalMutationString58__39);
        boolean o_testDirectory_literalMutationString58__41 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString58__41);
        boolean o_testDirectory_literalMutationString58__43 = listener.getCreatedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString58__43);
        checkAndNotify();
        testDirAFile4 = touch(testDirAFile4);
        FileUtils.deleteDirectory(testDirB);
        checkAndNotify();
        boolean o_testDirectory_literalMutationString58__50 = listener.getDeletedDirectories().contains(testDirB);
        Assertions.assertTrue(o_testDirectory_literalMutationString58__50);
        boolean o_testDirectory_literalMutationString58__52 = listener.getChangedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString58__52);
        boolean o_testDirectory_literalMutationString58__54 = listener.getDeletedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString58__54);
        FileUtils.deleteDirectory(testDir);
        checkAndNotify();
        boolean o_testDirectory_literalMutationString58__58 = listener.getDeletedDirectories().contains(testDirA);
        Assertions.assertTrue(o_testDirectory_literalMutationString58__58);
        boolean o_testDirectory_literalMutationString58__60 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString58__60);
        boolean o_testDirectory_literalMutationString58__62 = listener.getDeletedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory_literalMutationString58__62);
        boolean o_testDirectory_literalMutationString58__64 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory_literalMutationString58__64);
        boolean o_testDirectory_literalMutationString58__66 = listener.getDeletedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString58__66);
        boolean o_testDirectory_literalMutationString58__68 = testDir.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString58__68);
        checkAndNotify();
        checkAndNotify();
        Assertions.assertTrue(o_testDirectory_literalMutationString58__9);
        Assertions.assertTrue(o_testDirectory_literalMutationString58__10);
        Assertions.assertFalse(o_testDirectory_literalMutationString58__11);
        Assertions.assertTrue(o_testDirectory_literalMutationString58__29);
        Assertions.assertTrue(o_testDirectory_literalMutationString58__31);
        Assertions.assertFalse(o_testDirectory_literalMutationString58__33);
        Assertions.assertTrue(o_testDirectory_literalMutationString58__35);
        Assertions.assertFalse(o_testDirectory_literalMutationString58__37);
        Assertions.assertTrue(o_testDirectory_literalMutationString58__39);
        Assertions.assertTrue(o_testDirectory_literalMutationString58__41);
        Assertions.assertTrue(o_testDirectory_literalMutationString58__43);
        Assertions.assertTrue(o_testDirectory_literalMutationString58__50);
        Assertions.assertTrue(o_testDirectory_literalMutationString58__52);
        Assertions.assertTrue(o_testDirectory_literalMutationString58__54);
        Assertions.assertTrue(o_testDirectory_literalMutationString58__58);
        Assertions.assertTrue(o_testDirectory_literalMutationString58__60);
        Assertions.assertFalse(o_testDirectory_literalMutationString58__62);
        Assertions.assertTrue(o_testDirectory_literalMutationString58__64);
        Assertions.assertTrue(o_testDirectory_literalMutationString58__66);
        Assertions.assertTrue(o_testDirectory_literalMutationString58__68);
    }

    @EnergyTest
    public void testDirectory_literalMutationString59() throws Exception {
        checkAndNotify();
        final File testDirA = new File(testDir, "test-dir-A");
        final File testDirB = new File(testDir, "test-dir-B");
        final File testDirC = new File(testDir, "Delete");
        boolean o_testDirectory_literalMutationString59__9 = testDirA.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString59__9);
        boolean o_testDirectory_literalMutationString59__10 = testDirB.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString59__10);
        boolean o_testDirectory_literalMutationString59__11 = testDirC.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString59__11);
        final File testDirAFile1 = touch(new File(testDirA, "A-file1.java"));
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.txt"));
        final File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        final File testDirBFile1 = touch(new File(testDirB, "B-file1.java"));
        checkAndNotify();
        boolean o_testDirectory_literalMutationString59__29 = listener.getCreatedDirectories().contains(testDirA);
        Assertions.assertTrue(o_testDirectory_literalMutationString59__29);
        boolean o_testDirectory_literalMutationString59__31 = listener.getCreatedDirectories().contains(testDirB);
        Assertions.assertTrue(o_testDirectory_literalMutationString59__31);
        boolean o_testDirectory_literalMutationString59__33 = listener.getCreatedDirectories().contains(testDirC);
        Assertions.assertTrue(o_testDirectory_literalMutationString59__33);
        boolean o_testDirectory_literalMutationString59__35 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString59__35);
        boolean o_testDirectory_literalMutationString59__37 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory_literalMutationString59__37);
        boolean o_testDirectory_literalMutationString59__39 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory_literalMutationString59__39);
        boolean o_testDirectory_literalMutationString59__41 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString59__41);
        boolean o_testDirectory_literalMutationString59__43 = listener.getCreatedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString59__43);
        checkAndNotify();
        testDirAFile4 = touch(testDirAFile4);
        FileUtils.deleteDirectory(testDirB);
        checkAndNotify();
        boolean o_testDirectory_literalMutationString59__50 = listener.getDeletedDirectories().contains(testDirB);
        Assertions.assertTrue(o_testDirectory_literalMutationString59__50);
        boolean o_testDirectory_literalMutationString59__52 = listener.getChangedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString59__52);
        boolean o_testDirectory_literalMutationString59__54 = listener.getDeletedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString59__54);
        FileUtils.deleteDirectory(testDir);
        checkAndNotify();
        boolean o_testDirectory_literalMutationString59__58 = listener.getDeletedDirectories().contains(testDirA);
        Assertions.assertTrue(o_testDirectory_literalMutationString59__58);
        boolean o_testDirectory_literalMutationString59__60 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString59__60);
        boolean o_testDirectory_literalMutationString59__62 = listener.getDeletedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory_literalMutationString59__62);
        boolean o_testDirectory_literalMutationString59__64 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory_literalMutationString59__64);
        boolean o_testDirectory_literalMutationString59__66 = listener.getDeletedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString59__66);
        boolean o_testDirectory_literalMutationString59__68 = testDir.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString59__68);
        checkAndNotify();
        checkAndNotify();
        Assertions.assertTrue(o_testDirectory_literalMutationString59__9);
        Assertions.assertTrue(o_testDirectory_literalMutationString59__10);
        Assertions.assertTrue(o_testDirectory_literalMutationString59__11);
        Assertions.assertTrue(o_testDirectory_literalMutationString59__29);
        Assertions.assertTrue(o_testDirectory_literalMutationString59__31);
        Assertions.assertTrue(o_testDirectory_literalMutationString59__33);
        Assertions.assertTrue(o_testDirectory_literalMutationString59__35);
        Assertions.assertFalse(o_testDirectory_literalMutationString59__37);
        Assertions.assertTrue(o_testDirectory_literalMutationString59__39);
        Assertions.assertTrue(o_testDirectory_literalMutationString59__41);
        Assertions.assertTrue(o_testDirectory_literalMutationString59__43);
        Assertions.assertTrue(o_testDirectory_literalMutationString59__50);
        Assertions.assertTrue(o_testDirectory_literalMutationString59__52);
        Assertions.assertTrue(o_testDirectory_literalMutationString59__54);
        Assertions.assertTrue(o_testDirectory_literalMutationString59__58);
        Assertions.assertTrue(o_testDirectory_literalMutationString59__60);
        Assertions.assertFalse(o_testDirectory_literalMutationString59__62);
        Assertions.assertTrue(o_testDirectory_literalMutationString59__64);
        Assertions.assertTrue(o_testDirectory_literalMutationString59__66);
        Assertions.assertTrue(o_testDirectory_literalMutationString59__68);
    }

    @EnergyTest
    public void testDirectory_literalMutationString60() throws Exception {
        checkAndNotify();
        final File testDirA = new File(testDir, "test-dir-A");
        final File testDirB = new File(testDir, "test-dir-B");
        final File testDirC = new File(testDir, "test-dzr-C");
        boolean o_testDirectory_literalMutationString60__9 = testDirA.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString60__9);
        boolean o_testDirectory_literalMutationString60__10 = testDirB.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString60__10);
        boolean o_testDirectory_literalMutationString60__11 = testDirC.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString60__11);
        final File testDirAFile1 = touch(new File(testDirA, "A-file1.java"));
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.txt"));
        final File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        final File testDirBFile1 = touch(new File(testDirB, "B-file1.java"));
        checkAndNotify();
        boolean o_testDirectory_literalMutationString60__29 = listener.getCreatedDirectories().contains(testDirA);
        Assertions.assertTrue(o_testDirectory_literalMutationString60__29);
        boolean o_testDirectory_literalMutationString60__31 = listener.getCreatedDirectories().contains(testDirB);
        Assertions.assertTrue(o_testDirectory_literalMutationString60__31);
        boolean o_testDirectory_literalMutationString60__33 = listener.getCreatedDirectories().contains(testDirC);
        Assertions.assertTrue(o_testDirectory_literalMutationString60__33);
        boolean o_testDirectory_literalMutationString60__35 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString60__35);
        boolean o_testDirectory_literalMutationString60__37 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory_literalMutationString60__37);
        boolean o_testDirectory_literalMutationString60__39 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory_literalMutationString60__39);
        boolean o_testDirectory_literalMutationString60__41 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString60__41);
        boolean o_testDirectory_literalMutationString60__43 = listener.getCreatedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString60__43);
        checkAndNotify();
        testDirAFile4 = touch(testDirAFile4);
        FileUtils.deleteDirectory(testDirB);
        checkAndNotify();
        boolean o_testDirectory_literalMutationString60__50 = listener.getDeletedDirectories().contains(testDirB);
        Assertions.assertTrue(o_testDirectory_literalMutationString60__50);
        boolean o_testDirectory_literalMutationString60__52 = listener.getChangedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString60__52);
        boolean o_testDirectory_literalMutationString60__54 = listener.getDeletedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString60__54);
        FileUtils.deleteDirectory(testDir);
        checkAndNotify();
        boolean o_testDirectory_literalMutationString60__58 = listener.getDeletedDirectories().contains(testDirA);
        Assertions.assertTrue(o_testDirectory_literalMutationString60__58);
        boolean o_testDirectory_literalMutationString60__60 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString60__60);
        boolean o_testDirectory_literalMutationString60__62 = listener.getDeletedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory_literalMutationString60__62);
        boolean o_testDirectory_literalMutationString60__64 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory_literalMutationString60__64);
        boolean o_testDirectory_literalMutationString60__66 = listener.getDeletedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString60__66);
        boolean o_testDirectory_literalMutationString60__68 = testDir.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString60__68);
        checkAndNotify();
        checkAndNotify();
        Assertions.assertTrue(o_testDirectory_literalMutationString60__9);
        Assertions.assertTrue(o_testDirectory_literalMutationString60__10);
        Assertions.assertTrue(o_testDirectory_literalMutationString60__11);
        Assertions.assertTrue(o_testDirectory_literalMutationString60__29);
        Assertions.assertTrue(o_testDirectory_literalMutationString60__31);
        Assertions.assertTrue(o_testDirectory_literalMutationString60__33);
        Assertions.assertTrue(o_testDirectory_literalMutationString60__35);
        Assertions.assertFalse(o_testDirectory_literalMutationString60__37);
        Assertions.assertTrue(o_testDirectory_literalMutationString60__39);
        Assertions.assertTrue(o_testDirectory_literalMutationString60__41);
        Assertions.assertTrue(o_testDirectory_literalMutationString60__43);
        Assertions.assertTrue(o_testDirectory_literalMutationString60__50);
        Assertions.assertTrue(o_testDirectory_literalMutationString60__52);
        Assertions.assertTrue(o_testDirectory_literalMutationString60__54);
        Assertions.assertTrue(o_testDirectory_literalMutationString60__58);
        Assertions.assertTrue(o_testDirectory_literalMutationString60__60);
        Assertions.assertFalse(o_testDirectory_literalMutationString60__62);
        Assertions.assertTrue(o_testDirectory_literalMutationString60__64);
        Assertions.assertTrue(o_testDirectory_literalMutationString60__66);
        Assertions.assertTrue(o_testDirectory_literalMutationString60__68);
    }

    @EnergyTest
    public void testDirectory_literalMutationString61() throws Exception {
        checkAndNotify();
        final File testDirA = new File(testDir, "test-dir-A");
        final File testDirB = new File(testDir, "test-dir-B");
        final File testDirC = new File(testDir, "+mr6#-VtX(");
        boolean o_testDirectory_literalMutationString61__9 = testDirA.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString61__9);
        boolean o_testDirectory_literalMutationString61__10 = testDirB.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString61__10);
        boolean o_testDirectory_literalMutationString61__11 = testDirC.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString61__11);
        final File testDirAFile1 = touch(new File(testDirA, "A-file1.java"));
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.txt"));
        final File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        final File testDirBFile1 = touch(new File(testDirB, "B-file1.java"));
        checkAndNotify();
        boolean o_testDirectory_literalMutationString61__29 = listener.getCreatedDirectories().contains(testDirA);
        Assertions.assertTrue(o_testDirectory_literalMutationString61__29);
        boolean o_testDirectory_literalMutationString61__31 = listener.getCreatedDirectories().contains(testDirB);
        Assertions.assertTrue(o_testDirectory_literalMutationString61__31);
        boolean o_testDirectory_literalMutationString61__33 = listener.getCreatedDirectories().contains(testDirC);
        Assertions.assertTrue(o_testDirectory_literalMutationString61__33);
        boolean o_testDirectory_literalMutationString61__35 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString61__35);
        boolean o_testDirectory_literalMutationString61__37 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory_literalMutationString61__37);
        boolean o_testDirectory_literalMutationString61__39 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory_literalMutationString61__39);
        boolean o_testDirectory_literalMutationString61__41 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString61__41);
        boolean o_testDirectory_literalMutationString61__43 = listener.getCreatedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString61__43);
        checkAndNotify();
        testDirAFile4 = touch(testDirAFile4);
        FileUtils.deleteDirectory(testDirB);
        checkAndNotify();
        boolean o_testDirectory_literalMutationString61__50 = listener.getDeletedDirectories().contains(testDirB);
        Assertions.assertTrue(o_testDirectory_literalMutationString61__50);
        boolean o_testDirectory_literalMutationString61__52 = listener.getChangedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString61__52);
        boolean o_testDirectory_literalMutationString61__54 = listener.getDeletedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString61__54);
        FileUtils.deleteDirectory(testDir);
        checkAndNotify();
        boolean o_testDirectory_literalMutationString61__58 = listener.getDeletedDirectories().contains(testDirA);
        Assertions.assertTrue(o_testDirectory_literalMutationString61__58);
        boolean o_testDirectory_literalMutationString61__60 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString61__60);
        boolean o_testDirectory_literalMutationString61__62 = listener.getDeletedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory_literalMutationString61__62);
        boolean o_testDirectory_literalMutationString61__64 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory_literalMutationString61__64);
        boolean o_testDirectory_literalMutationString61__66 = listener.getDeletedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString61__66);
        boolean o_testDirectory_literalMutationString61__68 = testDir.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString61__68);
        checkAndNotify();
        checkAndNotify();
        Assertions.assertTrue(o_testDirectory_literalMutationString61__9);
        Assertions.assertTrue(o_testDirectory_literalMutationString61__10);
        Assertions.assertTrue(o_testDirectory_literalMutationString61__11);
        Assertions.assertTrue(o_testDirectory_literalMutationString61__29);
        Assertions.assertTrue(o_testDirectory_literalMutationString61__31);
        Assertions.assertTrue(o_testDirectory_literalMutationString61__33);
        Assertions.assertTrue(o_testDirectory_literalMutationString61__35);
        Assertions.assertFalse(o_testDirectory_literalMutationString61__37);
        Assertions.assertTrue(o_testDirectory_literalMutationString61__39);
        Assertions.assertTrue(o_testDirectory_literalMutationString61__41);
        Assertions.assertTrue(o_testDirectory_literalMutationString61__43);
        Assertions.assertTrue(o_testDirectory_literalMutationString61__50);
        Assertions.assertTrue(o_testDirectory_literalMutationString61__52);
        Assertions.assertTrue(o_testDirectory_literalMutationString61__54);
        Assertions.assertTrue(o_testDirectory_literalMutationString61__58);
        Assertions.assertTrue(o_testDirectory_literalMutationString61__60);
        Assertions.assertFalse(o_testDirectory_literalMutationString61__62);
        Assertions.assertTrue(o_testDirectory_literalMutationString61__64);
        Assertions.assertTrue(o_testDirectory_literalMutationString61__66);
        Assertions.assertTrue(o_testDirectory_literalMutationString61__68);
    }

    @EnergyTest
    public void testDirectory_literalMutationString62() throws Exception {
        checkAndNotify();
        final File testDirA = new File(testDir, "test-dir-A");
        final File testDirB = new File(testDir, "test-dir-B");
        final File testDirC = new File(testDir, "tes[t-dir-C");
        boolean o_testDirectory_literalMutationString62__9 = testDirA.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString62__9);
        boolean o_testDirectory_literalMutationString62__10 = testDirB.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString62__10);
        boolean o_testDirectory_literalMutationString62__11 = testDirC.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString62__11);
        final File testDirAFile1 = touch(new File(testDirA, "A-file1.java"));
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.txt"));
        final File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        final File testDirBFile1 = touch(new File(testDirB, "B-file1.java"));
        checkAndNotify();
        boolean o_testDirectory_literalMutationString62__29 = listener.getCreatedDirectories().contains(testDirA);
        Assertions.assertTrue(o_testDirectory_literalMutationString62__29);
        boolean o_testDirectory_literalMutationString62__31 = listener.getCreatedDirectories().contains(testDirB);
        Assertions.assertTrue(o_testDirectory_literalMutationString62__31);
        boolean o_testDirectory_literalMutationString62__33 = listener.getCreatedDirectories().contains(testDirC);
        Assertions.assertTrue(o_testDirectory_literalMutationString62__33);
        boolean o_testDirectory_literalMutationString62__35 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString62__35);
        boolean o_testDirectory_literalMutationString62__37 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory_literalMutationString62__37);
        boolean o_testDirectory_literalMutationString62__39 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory_literalMutationString62__39);
        boolean o_testDirectory_literalMutationString62__41 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString62__41);
        boolean o_testDirectory_literalMutationString62__43 = listener.getCreatedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString62__43);
        checkAndNotify();
        testDirAFile4 = touch(testDirAFile4);
        FileUtils.deleteDirectory(testDirB);
        checkAndNotify();
        boolean o_testDirectory_literalMutationString62__50 = listener.getDeletedDirectories().contains(testDirB);
        Assertions.assertTrue(o_testDirectory_literalMutationString62__50);
        boolean o_testDirectory_literalMutationString62__52 = listener.getChangedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString62__52);
        boolean o_testDirectory_literalMutationString62__54 = listener.getDeletedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString62__54);
        FileUtils.deleteDirectory(testDir);
        checkAndNotify();
        boolean o_testDirectory_literalMutationString62__58 = listener.getDeletedDirectories().contains(testDirA);
        Assertions.assertTrue(o_testDirectory_literalMutationString62__58);
        boolean o_testDirectory_literalMutationString62__60 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString62__60);
        boolean o_testDirectory_literalMutationString62__62 = listener.getDeletedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory_literalMutationString62__62);
        boolean o_testDirectory_literalMutationString62__64 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory_literalMutationString62__64);
        boolean o_testDirectory_literalMutationString62__66 = listener.getDeletedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString62__66);
        boolean o_testDirectory_literalMutationString62__68 = testDir.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString62__68);
        checkAndNotify();
        checkAndNotify();
        Assertions.assertTrue(o_testDirectory_literalMutationString62__9);
        Assertions.assertTrue(o_testDirectory_literalMutationString62__10);
        Assertions.assertTrue(o_testDirectory_literalMutationString62__11);
        Assertions.assertTrue(o_testDirectory_literalMutationString62__29);
        Assertions.assertTrue(o_testDirectory_literalMutationString62__31);
        Assertions.assertTrue(o_testDirectory_literalMutationString62__33);
        Assertions.assertTrue(o_testDirectory_literalMutationString62__35);
        Assertions.assertFalse(o_testDirectory_literalMutationString62__37);
        Assertions.assertTrue(o_testDirectory_literalMutationString62__39);
        Assertions.assertTrue(o_testDirectory_literalMutationString62__41);
        Assertions.assertTrue(o_testDirectory_literalMutationString62__43);
        Assertions.assertTrue(o_testDirectory_literalMutationString62__50);
        Assertions.assertTrue(o_testDirectory_literalMutationString62__52);
        Assertions.assertTrue(o_testDirectory_literalMutationString62__54);
        Assertions.assertTrue(o_testDirectory_literalMutationString62__58);
        Assertions.assertTrue(o_testDirectory_literalMutationString62__60);
        Assertions.assertFalse(o_testDirectory_literalMutationString62__62);
        Assertions.assertTrue(o_testDirectory_literalMutationString62__64);
        Assertions.assertTrue(o_testDirectory_literalMutationString62__66);
        Assertions.assertTrue(o_testDirectory_literalMutationString62__68);
    }

    @EnergyTest
    public void testDirectory_literalMutationString63() throws Exception {
        checkAndNotify();
        final File testDirA = new File(testDir, "test-dir-A");
        final File testDirB = new File(testDir, "test-dir-B");
        final File testDirC = new File(testDir, "testdir-C");
        boolean o_testDirectory_literalMutationString63__9 = testDirA.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString63__9);
        boolean o_testDirectory_literalMutationString63__10 = testDirB.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString63__10);
        boolean o_testDirectory_literalMutationString63__11 = testDirC.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString63__11);
        final File testDirAFile1 = touch(new File(testDirA, "A-file1.java"));
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.txt"));
        final File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        final File testDirBFile1 = touch(new File(testDirB, "B-file1.java"));
        checkAndNotify();
        boolean o_testDirectory_literalMutationString63__29 = listener.getCreatedDirectories().contains(testDirA);
        Assertions.assertTrue(o_testDirectory_literalMutationString63__29);
        boolean o_testDirectory_literalMutationString63__31 = listener.getCreatedDirectories().contains(testDirB);
        Assertions.assertTrue(o_testDirectory_literalMutationString63__31);
        boolean o_testDirectory_literalMutationString63__33 = listener.getCreatedDirectories().contains(testDirC);
        Assertions.assertTrue(o_testDirectory_literalMutationString63__33);
        boolean o_testDirectory_literalMutationString63__35 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString63__35);
        boolean o_testDirectory_literalMutationString63__37 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory_literalMutationString63__37);
        boolean o_testDirectory_literalMutationString63__39 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory_literalMutationString63__39);
        boolean o_testDirectory_literalMutationString63__41 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString63__41);
        boolean o_testDirectory_literalMutationString63__43 = listener.getCreatedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString63__43);
        checkAndNotify();
        testDirAFile4 = touch(testDirAFile4);
        FileUtils.deleteDirectory(testDirB);
        checkAndNotify();
        boolean o_testDirectory_literalMutationString63__50 = listener.getDeletedDirectories().contains(testDirB);
        Assertions.assertTrue(o_testDirectory_literalMutationString63__50);
        boolean o_testDirectory_literalMutationString63__52 = listener.getChangedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString63__52);
        boolean o_testDirectory_literalMutationString63__54 = listener.getDeletedFiles().contains(testDirBFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString63__54);
        FileUtils.deleteDirectory(testDir);
        checkAndNotify();
        boolean o_testDirectory_literalMutationString63__58 = listener.getDeletedDirectories().contains(testDirA);
        Assertions.assertTrue(o_testDirectory_literalMutationString63__58);
        boolean o_testDirectory_literalMutationString63__60 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testDirectory_literalMutationString63__60);
        boolean o_testDirectory_literalMutationString63__62 = listener.getDeletedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testDirectory_literalMutationString63__62);
        boolean o_testDirectory_literalMutationString63__64 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testDirectory_literalMutationString63__64);
        boolean o_testDirectory_literalMutationString63__66 = listener.getDeletedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testDirectory_literalMutationString63__66);
        boolean o_testDirectory_literalMutationString63__68 = testDir.mkdir();
        Assertions.assertTrue(o_testDirectory_literalMutationString63__68);
        checkAndNotify();
        checkAndNotify();
        Assertions.assertTrue(o_testDirectory_literalMutationString63__9);
        Assertions.assertTrue(o_testDirectory_literalMutationString63__10);
        Assertions.assertTrue(o_testDirectory_literalMutationString63__11);
        Assertions.assertTrue(o_testDirectory_literalMutationString63__29);
        Assertions.assertTrue(o_testDirectory_literalMutationString63__31);
        Assertions.assertTrue(o_testDirectory_literalMutationString63__33);
        Assertions.assertTrue(o_testDirectory_literalMutationString63__35);
        Assertions.assertFalse(o_testDirectory_literalMutationString63__37);
        Assertions.assertTrue(o_testDirectory_literalMutationString63__39);
        Assertions.assertTrue(o_testDirectory_literalMutationString63__41);
        Assertions.assertTrue(o_testDirectory_literalMutationString63__43);
        Assertions.assertTrue(o_testDirectory_literalMutationString63__50);
        Assertions.assertTrue(o_testDirectory_literalMutationString63__52);
        Assertions.assertTrue(o_testDirectory_literalMutationString63__54);
        Assertions.assertTrue(o_testDirectory_literalMutationString63__58);
        Assertions.assertTrue(o_testDirectory_literalMutationString63__60);
        Assertions.assertFalse(o_testDirectory_literalMutationString63__62);
        Assertions.assertTrue(o_testDirectory_literalMutationString63__64);
        Assertions.assertTrue(o_testDirectory_literalMutationString63__66);
        Assertions.assertTrue(o_testDirectory_literalMutationString63__68);
    }

    @EnergyTest
    public void testFileCreate() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "test-dir-A");
        boolean o_testFileCreate__4 = testDirA.mkdir();
        Assertions.assertTrue(o_testFileCreate__4);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        File testDirAFile1 = new File(testDirA, "A-file1.java");
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        File testDirAFile3 = new File(testDirA, "A-file3.java");
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        File testDirAFile5 = new File(testDirA, "A-file5.java");
        checkAndNotify();
        boolean o_testFileCreate__22 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testFileCreate__22);
        boolean o_testFileCreate__24 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileCreate__24);
        boolean o_testFileCreate__26 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertFalse(o_testFileCreate__26);
        boolean o_testFileCreate__28 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileCreate__28);
        boolean o_testFileCreate__30 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertFalse(o_testFileCreate__30);
        boolean o_testFileCreate__32 = testDirAFile1.exists();
        Assertions.assertFalse(o_testFileCreate__32);
        boolean o_testFileCreate__33 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileCreate__33);
        boolean o_testFileCreate__34 = testDirAFile3.exists();
        Assertions.assertFalse(o_testFileCreate__34);
        boolean o_testFileCreate__35 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileCreate__35);
        boolean o_testFileCreate__36 = testDirAFile5.exists();
        Assertions.assertFalse(o_testFileCreate__36);
        checkAndNotify();
        testDirAFile1 = touch(testDirAFile1);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate__44 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileCreate__44);
        boolean o_testFileCreate__45 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileCreate__45);
        testDirAFile3 = touch(testDirAFile3);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate__53 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileCreate__53);
        boolean o_testFileCreate__54 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileCreate__54);
        testDirAFile5 = touch(testDirAFile5);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate__62 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileCreate__62);
        boolean o_testFileCreate__63 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileCreate__63);
        Assertions.assertTrue(o_testFileCreate__4);
        Assertions.assertFalse(o_testFileCreate__22);
        Assertions.assertTrue(o_testFileCreate__24);
        Assertions.assertFalse(o_testFileCreate__26);
        Assertions.assertTrue(o_testFileCreate__28);
        Assertions.assertFalse(o_testFileCreate__30);
        Assertions.assertFalse(o_testFileCreate__32);
        Assertions.assertTrue(o_testFileCreate__33);
        Assertions.assertFalse(o_testFileCreate__34);
        Assertions.assertTrue(o_testFileCreate__35);
        Assertions.assertFalse(o_testFileCreate__36);
        Assertions.assertTrue(o_testFileCreate__44);
        Assertions.assertTrue(o_testFileCreate__45);
        Assertions.assertTrue(o_testFileCreate__53);
        Assertions.assertTrue(o_testFileCreate__54);
        Assertions.assertTrue(o_testFileCreate__62);
    }

    @EnergyTest
    public void testFileCreate_literalMutationString118() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "");
        boolean o_testFileCreate_literalMutationString118__5 = testDirA.mkdir();
        Assertions.assertFalse(o_testFileCreate_literalMutationString118__5);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        File testDirAFile1 = new File(testDirA, "A-file1.java");
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        File testDirAFile3 = new File(testDirA, "A-file3.java");
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        File testDirAFile5 = new File(testDirA, "A-file5.java");
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString118__23 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testFileCreate_literalMutationString118__23);
        boolean o_testFileCreate_literalMutationString118__25 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileCreate_literalMutationString118__25);
        boolean o_testFileCreate_literalMutationString118__27 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertFalse(o_testFileCreate_literalMutationString118__27);
        boolean o_testFileCreate_literalMutationString118__29 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileCreate_literalMutationString118__29);
        boolean o_testFileCreate_literalMutationString118__31 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertFalse(o_testFileCreate_literalMutationString118__31);
        boolean o_testFileCreate_literalMutationString118__33 = testDirAFile1.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString118__33);
        boolean o_testFileCreate_literalMutationString118__34 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString118__34);
        boolean o_testFileCreate_literalMutationString118__35 = testDirAFile3.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString118__35);
        boolean o_testFileCreate_literalMutationString118__36 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString118__36);
        boolean o_testFileCreate_literalMutationString118__37 = testDirAFile5.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString118__37);
        checkAndNotify();
        testDirAFile1 = touch(testDirAFile1);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString118__45 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString118__45);
        boolean o_testFileCreate_literalMutationString118__46 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileCreate_literalMutationString118__46);
        testDirAFile3 = touch(testDirAFile3);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString118__54 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString118__54);
        boolean o_testFileCreate_literalMutationString118__55 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileCreate_literalMutationString118__55);
        testDirAFile5 = touch(testDirAFile5);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString118__63 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString118__63);
        boolean o_testFileCreate_literalMutationString118__64 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileCreate_literalMutationString118__64);
        Assertions.assertFalse(o_testFileCreate_literalMutationString118__5);
        Assertions.assertFalse(o_testFileCreate_literalMutationString118__23);
        Assertions.assertTrue(o_testFileCreate_literalMutationString118__25);
        Assertions.assertFalse(o_testFileCreate_literalMutationString118__27);
        Assertions.assertTrue(o_testFileCreate_literalMutationString118__29);
        Assertions.assertFalse(o_testFileCreate_literalMutationString118__31);
        Assertions.assertFalse(o_testFileCreate_literalMutationString118__33);
        Assertions.assertTrue(o_testFileCreate_literalMutationString118__34);
        Assertions.assertFalse(o_testFileCreate_literalMutationString118__35);
        Assertions.assertTrue(o_testFileCreate_literalMutationString118__36);
        Assertions.assertFalse(o_testFileCreate_literalMutationString118__37);
        Assertions.assertTrue(o_testFileCreate_literalMutationString118__45);
        Assertions.assertTrue(o_testFileCreate_literalMutationString118__46);
        Assertions.assertTrue(o_testFileCreate_literalMutationString118__54);
        Assertions.assertTrue(o_testFileCreate_literalMutationString118__55);
        Assertions.assertTrue(o_testFileCreate_literalMutationString118__63);
    }

    @EnergyTest
    public void testFileCreate_literalMutationString119() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "Delete");
        boolean o_testFileCreate_literalMutationString119__5 = testDirA.mkdir();
        Assertions.assertTrue(o_testFileCreate_literalMutationString119__5);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        File testDirAFile1 = new File(testDirA, "A-file1.java");
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        File testDirAFile3 = new File(testDirA, "A-file3.java");
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        File testDirAFile5 = new File(testDirA, "A-file5.java");
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString119__23 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testFileCreate_literalMutationString119__23);
        boolean o_testFileCreate_literalMutationString119__25 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileCreate_literalMutationString119__25);
        boolean o_testFileCreate_literalMutationString119__27 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertFalse(o_testFileCreate_literalMutationString119__27);
        boolean o_testFileCreate_literalMutationString119__29 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileCreate_literalMutationString119__29);
        boolean o_testFileCreate_literalMutationString119__31 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertFalse(o_testFileCreate_literalMutationString119__31);
        boolean o_testFileCreate_literalMutationString119__33 = testDirAFile1.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString119__33);
        boolean o_testFileCreate_literalMutationString119__34 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString119__34);
        boolean o_testFileCreate_literalMutationString119__35 = testDirAFile3.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString119__35);
        boolean o_testFileCreate_literalMutationString119__36 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString119__36);
        boolean o_testFileCreate_literalMutationString119__37 = testDirAFile5.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString119__37);
        checkAndNotify();
        testDirAFile1 = touch(testDirAFile1);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString119__45 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString119__45);
        boolean o_testFileCreate_literalMutationString119__46 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileCreate_literalMutationString119__46);
        testDirAFile3 = touch(testDirAFile3);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString119__54 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString119__54);
        boolean o_testFileCreate_literalMutationString119__55 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileCreate_literalMutationString119__55);
        testDirAFile5 = touch(testDirAFile5);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString119__63 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString119__63);
        boolean o_testFileCreate_literalMutationString119__64 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileCreate_literalMutationString119__64);
        Assertions.assertTrue(o_testFileCreate_literalMutationString119__5);
        Assertions.assertFalse(o_testFileCreate_literalMutationString119__23);
        Assertions.assertTrue(o_testFileCreate_literalMutationString119__25);
        Assertions.assertFalse(o_testFileCreate_literalMutationString119__27);
        Assertions.assertTrue(o_testFileCreate_literalMutationString119__29);
        Assertions.assertFalse(o_testFileCreate_literalMutationString119__31);
        Assertions.assertFalse(o_testFileCreate_literalMutationString119__33);
        Assertions.assertTrue(o_testFileCreate_literalMutationString119__34);
        Assertions.assertFalse(o_testFileCreate_literalMutationString119__35);
        Assertions.assertTrue(o_testFileCreate_literalMutationString119__36);
        Assertions.assertFalse(o_testFileCreate_literalMutationString119__37);
        Assertions.assertTrue(o_testFileCreate_literalMutationString119__45);
        Assertions.assertTrue(o_testFileCreate_literalMutationString119__46);
        Assertions.assertTrue(o_testFileCreate_literalMutationString119__54);
        Assertions.assertTrue(o_testFileCreate_literalMutationString119__55);
        Assertions.assertTrue(o_testFileCreate_literalMutationString119__63);
    }

    @EnergyTest
    public void testFileCreate_literalMutationString120() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "test-di-A");
        boolean o_testFileCreate_literalMutationString120__5 = testDirA.mkdir();
        Assertions.assertTrue(o_testFileCreate_literalMutationString120__5);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        File testDirAFile1 = new File(testDirA, "A-file1.java");
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        File testDirAFile3 = new File(testDirA, "A-file3.java");
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        File testDirAFile5 = new File(testDirA, "A-file5.java");
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString120__23 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testFileCreate_literalMutationString120__23);
        boolean o_testFileCreate_literalMutationString120__25 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileCreate_literalMutationString120__25);
        boolean o_testFileCreate_literalMutationString120__27 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertFalse(o_testFileCreate_literalMutationString120__27);
        boolean o_testFileCreate_literalMutationString120__29 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileCreate_literalMutationString120__29);
        boolean o_testFileCreate_literalMutationString120__31 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertFalse(o_testFileCreate_literalMutationString120__31);
        boolean o_testFileCreate_literalMutationString120__33 = testDirAFile1.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString120__33);
        boolean o_testFileCreate_literalMutationString120__34 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString120__34);
        boolean o_testFileCreate_literalMutationString120__35 = testDirAFile3.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString120__35);
        boolean o_testFileCreate_literalMutationString120__36 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString120__36);
        boolean o_testFileCreate_literalMutationString120__37 = testDirAFile5.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString120__37);
        checkAndNotify();
        testDirAFile1 = touch(testDirAFile1);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString120__45 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString120__45);
        boolean o_testFileCreate_literalMutationString120__46 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileCreate_literalMutationString120__46);
        testDirAFile3 = touch(testDirAFile3);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString120__54 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString120__54);
        boolean o_testFileCreate_literalMutationString120__55 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileCreate_literalMutationString120__55);
        testDirAFile5 = touch(testDirAFile5);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString120__63 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString120__63);
        boolean o_testFileCreate_literalMutationString120__64 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileCreate_literalMutationString120__64);
        Assertions.assertTrue(o_testFileCreate_literalMutationString120__5);
        Assertions.assertFalse(o_testFileCreate_literalMutationString120__23);
        Assertions.assertTrue(o_testFileCreate_literalMutationString120__25);
        Assertions.assertFalse(o_testFileCreate_literalMutationString120__27);
        Assertions.assertTrue(o_testFileCreate_literalMutationString120__29);
        Assertions.assertFalse(o_testFileCreate_literalMutationString120__31);
        Assertions.assertFalse(o_testFileCreate_literalMutationString120__33);
        Assertions.assertTrue(o_testFileCreate_literalMutationString120__34);
        Assertions.assertFalse(o_testFileCreate_literalMutationString120__35);
        Assertions.assertTrue(o_testFileCreate_literalMutationString120__36);
        Assertions.assertFalse(o_testFileCreate_literalMutationString120__37);
        Assertions.assertTrue(o_testFileCreate_literalMutationString120__45);
        Assertions.assertTrue(o_testFileCreate_literalMutationString120__46);
        Assertions.assertTrue(o_testFileCreate_literalMutationString120__54);
        Assertions.assertTrue(o_testFileCreate_literalMutationString120__55);
        Assertions.assertTrue(o_testFileCreate_literalMutationString120__63);
    }

    @EnergyTest
    public void testFileCreate_literalMutationString121() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "te!t-dir-A");
        boolean o_testFileCreate_literalMutationString121__5 = testDirA.mkdir();
        Assertions.assertTrue(o_testFileCreate_literalMutationString121__5);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        File testDirAFile1 = new File(testDirA, "A-file1.java");
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        File testDirAFile3 = new File(testDirA, "A-file3.java");
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        File testDirAFile5 = new File(testDirA, "A-file5.java");
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString121__23 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testFileCreate_literalMutationString121__23);
        boolean o_testFileCreate_literalMutationString121__25 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileCreate_literalMutationString121__25);
        boolean o_testFileCreate_literalMutationString121__27 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertFalse(o_testFileCreate_literalMutationString121__27);
        boolean o_testFileCreate_literalMutationString121__29 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileCreate_literalMutationString121__29);
        boolean o_testFileCreate_literalMutationString121__31 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertFalse(o_testFileCreate_literalMutationString121__31);
        boolean o_testFileCreate_literalMutationString121__33 = testDirAFile1.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString121__33);
        boolean o_testFileCreate_literalMutationString121__34 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString121__34);
        boolean o_testFileCreate_literalMutationString121__35 = testDirAFile3.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString121__35);
        boolean o_testFileCreate_literalMutationString121__36 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString121__36);
        boolean o_testFileCreate_literalMutationString121__37 = testDirAFile5.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString121__37);
        checkAndNotify();
        testDirAFile1 = touch(testDirAFile1);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString121__45 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString121__45);
        boolean o_testFileCreate_literalMutationString121__46 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileCreate_literalMutationString121__46);
        testDirAFile3 = touch(testDirAFile3);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString121__54 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString121__54);
        boolean o_testFileCreate_literalMutationString121__55 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileCreate_literalMutationString121__55);
        testDirAFile5 = touch(testDirAFile5);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString121__63 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString121__63);
        boolean o_testFileCreate_literalMutationString121__64 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileCreate_literalMutationString121__64);
        Assertions.assertTrue(o_testFileCreate_literalMutationString121__5);
        Assertions.assertFalse(o_testFileCreate_literalMutationString121__23);
        Assertions.assertTrue(o_testFileCreate_literalMutationString121__25);
        Assertions.assertFalse(o_testFileCreate_literalMutationString121__27);
        Assertions.assertTrue(o_testFileCreate_literalMutationString121__29);
        Assertions.assertFalse(o_testFileCreate_literalMutationString121__31);
        Assertions.assertFalse(o_testFileCreate_literalMutationString121__33);
        Assertions.assertTrue(o_testFileCreate_literalMutationString121__34);
        Assertions.assertFalse(o_testFileCreate_literalMutationString121__35);
        Assertions.assertTrue(o_testFileCreate_literalMutationString121__36);
        Assertions.assertFalse(o_testFileCreate_literalMutationString121__37);
        Assertions.assertTrue(o_testFileCreate_literalMutationString121__45);
        Assertions.assertTrue(o_testFileCreate_literalMutationString121__46);
        Assertions.assertTrue(o_testFileCreate_literalMutationString121__54);
        Assertions.assertTrue(o_testFileCreate_literalMutationString121__55);
        Assertions.assertTrue(o_testFileCreate_literalMutationString121__63);
    }

    @EnergyTest
    public void testFileCreate_literalMutationString122() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "l>UgIvC=TU");
        boolean o_testFileCreate_literalMutationString122__5 = testDirA.mkdir();
        Assertions.assertTrue(o_testFileCreate_literalMutationString122__5);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        File testDirAFile1 = new File(testDirA, "A-file1.java");
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        File testDirAFile3 = new File(testDirA, "A-file3.java");
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        File testDirAFile5 = new File(testDirA, "A-file5.java");
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString122__23 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testFileCreate_literalMutationString122__23);
        boolean o_testFileCreate_literalMutationString122__25 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileCreate_literalMutationString122__25);
        boolean o_testFileCreate_literalMutationString122__27 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertFalse(o_testFileCreate_literalMutationString122__27);
        boolean o_testFileCreate_literalMutationString122__29 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileCreate_literalMutationString122__29);
        boolean o_testFileCreate_literalMutationString122__31 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertFalse(o_testFileCreate_literalMutationString122__31);
        boolean o_testFileCreate_literalMutationString122__33 = testDirAFile1.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString122__33);
        boolean o_testFileCreate_literalMutationString122__34 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString122__34);
        boolean o_testFileCreate_literalMutationString122__35 = testDirAFile3.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString122__35);
        boolean o_testFileCreate_literalMutationString122__36 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString122__36);
        boolean o_testFileCreate_literalMutationString122__37 = testDirAFile5.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString122__37);
        checkAndNotify();
        testDirAFile1 = touch(testDirAFile1);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString122__45 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString122__45);
        boolean o_testFileCreate_literalMutationString122__46 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileCreate_literalMutationString122__46);
        testDirAFile3 = touch(testDirAFile3);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString122__54 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString122__54);
        boolean o_testFileCreate_literalMutationString122__55 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileCreate_literalMutationString122__55);
        testDirAFile5 = touch(testDirAFile5);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString122__63 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString122__63);
        boolean o_testFileCreate_literalMutationString122__64 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileCreate_literalMutationString122__64);
        Assertions.assertTrue(o_testFileCreate_literalMutationString122__5);
        Assertions.assertFalse(o_testFileCreate_literalMutationString122__23);
        Assertions.assertTrue(o_testFileCreate_literalMutationString122__25);
        Assertions.assertFalse(o_testFileCreate_literalMutationString122__27);
        Assertions.assertTrue(o_testFileCreate_literalMutationString122__29);
        Assertions.assertFalse(o_testFileCreate_literalMutationString122__31);
        Assertions.assertFalse(o_testFileCreate_literalMutationString122__33);
        Assertions.assertTrue(o_testFileCreate_literalMutationString122__34);
        Assertions.assertFalse(o_testFileCreate_literalMutationString122__35);
        Assertions.assertTrue(o_testFileCreate_literalMutationString122__36);
        Assertions.assertFalse(o_testFileCreate_literalMutationString122__37);
        Assertions.assertTrue(o_testFileCreate_literalMutationString122__45);
        Assertions.assertTrue(o_testFileCreate_literalMutationString122__46);
        Assertions.assertTrue(o_testFileCreate_literalMutationString122__54);
        Assertions.assertTrue(o_testFileCreate_literalMutationString122__55);
        Assertions.assertTrue(o_testFileCreate_literalMutationString122__63);
    }

    @EnergyTest
    public void testFileCreate_literalMutationString123() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "tsest-dir-A");
        boolean o_testFileCreate_literalMutationString123__5 = testDirA.mkdir();
        Assertions.assertTrue(o_testFileCreate_literalMutationString123__5);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        File testDirAFile1 = new File(testDirA, "A-file1.java");
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        File testDirAFile3 = new File(testDirA, "A-file3.java");
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        File testDirAFile5 = new File(testDirA, "A-file5.java");
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString123__23 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testFileCreate_literalMutationString123__23);
        boolean o_testFileCreate_literalMutationString123__25 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileCreate_literalMutationString123__25);
        boolean o_testFileCreate_literalMutationString123__27 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertFalse(o_testFileCreate_literalMutationString123__27);
        boolean o_testFileCreate_literalMutationString123__29 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileCreate_literalMutationString123__29);
        boolean o_testFileCreate_literalMutationString123__31 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertFalse(o_testFileCreate_literalMutationString123__31);
        boolean o_testFileCreate_literalMutationString123__33 = testDirAFile1.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString123__33);
        boolean o_testFileCreate_literalMutationString123__34 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString123__34);
        boolean o_testFileCreate_literalMutationString123__35 = testDirAFile3.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString123__35);
        boolean o_testFileCreate_literalMutationString123__36 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString123__36);
        boolean o_testFileCreate_literalMutationString123__37 = testDirAFile5.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString123__37);
        checkAndNotify();
        testDirAFile1 = touch(testDirAFile1);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString123__45 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString123__45);
        boolean o_testFileCreate_literalMutationString123__46 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileCreate_literalMutationString123__46);
        testDirAFile3 = touch(testDirAFile3);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString123__54 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString123__54);
        boolean o_testFileCreate_literalMutationString123__55 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileCreate_literalMutationString123__55);
        testDirAFile5 = touch(testDirAFile5);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString123__63 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString123__63);
        boolean o_testFileCreate_literalMutationString123__64 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileCreate_literalMutationString123__64);
        Assertions.assertTrue(o_testFileCreate_literalMutationString123__5);
        Assertions.assertFalse(o_testFileCreate_literalMutationString123__23);
        Assertions.assertTrue(o_testFileCreate_literalMutationString123__25);
        Assertions.assertFalse(o_testFileCreate_literalMutationString123__27);
        Assertions.assertTrue(o_testFileCreate_literalMutationString123__29);
        Assertions.assertFalse(o_testFileCreate_literalMutationString123__31);
        Assertions.assertFalse(o_testFileCreate_literalMutationString123__33);
        Assertions.assertTrue(o_testFileCreate_literalMutationString123__34);
        Assertions.assertFalse(o_testFileCreate_literalMutationString123__35);
        Assertions.assertTrue(o_testFileCreate_literalMutationString123__36);
        Assertions.assertFalse(o_testFileCreate_literalMutationString123__37);
        Assertions.assertTrue(o_testFileCreate_literalMutationString123__45);
        Assertions.assertTrue(o_testFileCreate_literalMutationString123__46);
        Assertions.assertTrue(o_testFileCreate_literalMutationString123__54);
        Assertions.assertTrue(o_testFileCreate_literalMutationString123__55);
        Assertions.assertTrue(o_testFileCreate_literalMutationString123__63);
    }

    @EnergyTest
    public void testFileCreate_literalMutationString124() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "test-dir-A");
        boolean o_testFileCreate_literalMutationString124__4 = testDirA.mkdir();
        Assertions.assertTrue(o_testFileCreate_literalMutationString124__4);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        File testDirAFile1 = new File(testDirA, "");
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        File testDirAFile3 = new File(testDirA, "A-file3.java");
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        File testDirAFile5 = new File(testDirA, "A-file5.java");
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString124__23 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testFileCreate_literalMutationString124__23);
        boolean o_testFileCreate_literalMutationString124__25 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileCreate_literalMutationString124__25);
        boolean o_testFileCreate_literalMutationString124__27 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertFalse(o_testFileCreate_literalMutationString124__27);
        boolean o_testFileCreate_literalMutationString124__29 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileCreate_literalMutationString124__29);
        boolean o_testFileCreate_literalMutationString124__31 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertFalse(o_testFileCreate_literalMutationString124__31);
        boolean o_testFileCreate_literalMutationString124__33 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString124__33);
        boolean o_testFileCreate_literalMutationString124__34 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString124__34);
        boolean o_testFileCreate_literalMutationString124__35 = testDirAFile3.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString124__35);
        boolean o_testFileCreate_literalMutationString124__36 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString124__36);
        boolean o_testFileCreate_literalMutationString124__37 = testDirAFile5.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString124__37);
        checkAndNotify();
        testDirAFile1 = touch(testDirAFile1);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString124__45 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString124__45);
        boolean o_testFileCreate_literalMutationString124__46 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testFileCreate_literalMutationString124__46);
        testDirAFile3 = touch(testDirAFile3);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString124__54 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString124__54);
        boolean o_testFileCreate_literalMutationString124__55 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileCreate_literalMutationString124__55);
        testDirAFile5 = touch(testDirAFile5);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString124__63 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString124__63);
        boolean o_testFileCreate_literalMutationString124__64 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileCreate_literalMutationString124__64);
        Assertions.assertTrue(o_testFileCreate_literalMutationString124__4);
        Assertions.assertFalse(o_testFileCreate_literalMutationString124__23);
        Assertions.assertTrue(o_testFileCreate_literalMutationString124__25);
        Assertions.assertFalse(o_testFileCreate_literalMutationString124__27);
        Assertions.assertTrue(o_testFileCreate_literalMutationString124__29);
        Assertions.assertFalse(o_testFileCreate_literalMutationString124__31);
        Assertions.assertTrue(o_testFileCreate_literalMutationString124__33);
        Assertions.assertTrue(o_testFileCreate_literalMutationString124__34);
        Assertions.assertFalse(o_testFileCreate_literalMutationString124__35);
        Assertions.assertTrue(o_testFileCreate_literalMutationString124__36);
        Assertions.assertFalse(o_testFileCreate_literalMutationString124__37);
        Assertions.assertTrue(o_testFileCreate_literalMutationString124__45);
        Assertions.assertFalse(o_testFileCreate_literalMutationString124__46);
        Assertions.assertTrue(o_testFileCreate_literalMutationString124__54);
        Assertions.assertTrue(o_testFileCreate_literalMutationString124__55);
        Assertions.assertTrue(o_testFileCreate_literalMutationString124__63);
    }

    @EnergyTest
    public void testFileCreate_literalMutationString125() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "test-dir-A");
        boolean o_testFileCreate_literalMutationString125__4 = testDirA.mkdir();
        Assertions.assertTrue(o_testFileCreate_literalMutationString125__4);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        File testDirAFile1 = new File(testDirA, "Delete");
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        File testDirAFile3 = new File(testDirA, "A-file3.java");
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        File testDirAFile5 = new File(testDirA, "A-file5.java");
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString125__23 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testFileCreate_literalMutationString125__23);
        boolean o_testFileCreate_literalMutationString125__25 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileCreate_literalMutationString125__25);
        boolean o_testFileCreate_literalMutationString125__27 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertFalse(o_testFileCreate_literalMutationString125__27);
        boolean o_testFileCreate_literalMutationString125__29 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileCreate_literalMutationString125__29);
        boolean o_testFileCreate_literalMutationString125__31 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertFalse(o_testFileCreate_literalMutationString125__31);
        boolean o_testFileCreate_literalMutationString125__33 = testDirAFile1.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString125__33);
        boolean o_testFileCreate_literalMutationString125__34 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString125__34);
        boolean o_testFileCreate_literalMutationString125__35 = testDirAFile3.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString125__35);
        boolean o_testFileCreate_literalMutationString125__36 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString125__36);
        boolean o_testFileCreate_literalMutationString125__37 = testDirAFile5.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString125__37);
        checkAndNotify();
        testDirAFile1 = touch(testDirAFile1);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString125__45 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString125__45);
        boolean o_testFileCreate_literalMutationString125__46 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testFileCreate_literalMutationString125__46);
        testDirAFile3 = touch(testDirAFile3);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString125__54 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString125__54);
        boolean o_testFileCreate_literalMutationString125__55 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileCreate_literalMutationString125__55);
        testDirAFile5 = touch(testDirAFile5);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString125__63 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString125__63);
        boolean o_testFileCreate_literalMutationString125__64 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileCreate_literalMutationString125__64);
        Assertions.assertTrue(o_testFileCreate_literalMutationString125__4);
        Assertions.assertFalse(o_testFileCreate_literalMutationString125__23);
        Assertions.assertTrue(o_testFileCreate_literalMutationString125__25);
        Assertions.assertFalse(o_testFileCreate_literalMutationString125__27);
        Assertions.assertTrue(o_testFileCreate_literalMutationString125__29);
        Assertions.assertFalse(o_testFileCreate_literalMutationString125__31);
        Assertions.assertFalse(o_testFileCreate_literalMutationString125__33);
        Assertions.assertTrue(o_testFileCreate_literalMutationString125__34);
        Assertions.assertFalse(o_testFileCreate_literalMutationString125__35);
        Assertions.assertTrue(o_testFileCreate_literalMutationString125__36);
        Assertions.assertFalse(o_testFileCreate_literalMutationString125__37);
        Assertions.assertTrue(o_testFileCreate_literalMutationString125__45);
        Assertions.assertFalse(o_testFileCreate_literalMutationString125__46);
        Assertions.assertTrue(o_testFileCreate_literalMutationString125__54);
        Assertions.assertTrue(o_testFileCreate_literalMutationString125__55);
        Assertions.assertTrue(o_testFileCreate_literalMutationString125__63);
    }

    @EnergyTest
    public void testFileCreate_literalMutationString126() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "test-dir-A");
        boolean o_testFileCreate_literalMutationString126__4 = testDirA.mkdir();
        Assertions.assertTrue(o_testFileCreate_literalMutationString126__4);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        File testDirAFile1 = new File(testDirA, " TM1`_8;0L`A");
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        File testDirAFile3 = new File(testDirA, "A-file3.java");
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        File testDirAFile5 = new File(testDirA, "A-file5.java");
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString126__23 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testFileCreate_literalMutationString126__23);
        boolean o_testFileCreate_literalMutationString126__25 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileCreate_literalMutationString126__25);
        boolean o_testFileCreate_literalMutationString126__27 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertFalse(o_testFileCreate_literalMutationString126__27);
        boolean o_testFileCreate_literalMutationString126__29 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileCreate_literalMutationString126__29);
        boolean o_testFileCreate_literalMutationString126__31 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertFalse(o_testFileCreate_literalMutationString126__31);
        boolean o_testFileCreate_literalMutationString126__33 = testDirAFile1.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString126__33);
        boolean o_testFileCreate_literalMutationString126__34 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString126__34);
        boolean o_testFileCreate_literalMutationString126__35 = testDirAFile3.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString126__35);
        boolean o_testFileCreate_literalMutationString126__36 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString126__36);
        boolean o_testFileCreate_literalMutationString126__37 = testDirAFile5.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString126__37);
        checkAndNotify();
        testDirAFile1 = touch(testDirAFile1);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString126__45 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString126__45);
        boolean o_testFileCreate_literalMutationString126__46 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testFileCreate_literalMutationString126__46);
        testDirAFile3 = touch(testDirAFile3);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString126__54 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString126__54);
        boolean o_testFileCreate_literalMutationString126__55 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileCreate_literalMutationString126__55);
        testDirAFile5 = touch(testDirAFile5);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString126__63 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString126__63);
        boolean o_testFileCreate_literalMutationString126__64 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileCreate_literalMutationString126__64);
        Assertions.assertTrue(o_testFileCreate_literalMutationString126__4);
        Assertions.assertFalse(o_testFileCreate_literalMutationString126__23);
        Assertions.assertTrue(o_testFileCreate_literalMutationString126__25);
        Assertions.assertFalse(o_testFileCreate_literalMutationString126__27);
        Assertions.assertTrue(o_testFileCreate_literalMutationString126__29);
        Assertions.assertFalse(o_testFileCreate_literalMutationString126__31);
        Assertions.assertFalse(o_testFileCreate_literalMutationString126__33);
        Assertions.assertTrue(o_testFileCreate_literalMutationString126__34);
        Assertions.assertFalse(o_testFileCreate_literalMutationString126__35);
        Assertions.assertTrue(o_testFileCreate_literalMutationString126__36);
        Assertions.assertFalse(o_testFileCreate_literalMutationString126__37);
        Assertions.assertTrue(o_testFileCreate_literalMutationString126__45);
        Assertions.assertFalse(o_testFileCreate_literalMutationString126__46);
        Assertions.assertTrue(o_testFileCreate_literalMutationString126__54);
        Assertions.assertTrue(o_testFileCreate_literalMutationString126__55);
        Assertions.assertTrue(o_testFileCreate_literalMutationString126__63);
    }

    @EnergyTest
    public void testFileCreate_literalMutationString127() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "test-dir-A");
        boolean o_testFileCreate_literalMutationString127__4 = testDirA.mkdir();
        Assertions.assertTrue(o_testFileCreate_literalMutationString127__4);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        File testDirAFile1 = new File(testDirA, "z-file1.java");
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        File testDirAFile3 = new File(testDirA, "A-file3.java");
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        File testDirAFile5 = new File(testDirA, "A-file5.java");
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString127__23 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testFileCreate_literalMutationString127__23);
        boolean o_testFileCreate_literalMutationString127__25 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileCreate_literalMutationString127__25);
        boolean o_testFileCreate_literalMutationString127__27 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertFalse(o_testFileCreate_literalMutationString127__27);
        boolean o_testFileCreate_literalMutationString127__29 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileCreate_literalMutationString127__29);
        boolean o_testFileCreate_literalMutationString127__31 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertFalse(o_testFileCreate_literalMutationString127__31);
        boolean o_testFileCreate_literalMutationString127__33 = testDirAFile1.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString127__33);
        boolean o_testFileCreate_literalMutationString127__34 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString127__34);
        boolean o_testFileCreate_literalMutationString127__35 = testDirAFile3.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString127__35);
        boolean o_testFileCreate_literalMutationString127__36 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString127__36);
        boolean o_testFileCreate_literalMutationString127__37 = testDirAFile5.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString127__37);
        checkAndNotify();
        testDirAFile1 = touch(testDirAFile1);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString127__45 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString127__45);
        boolean o_testFileCreate_literalMutationString127__46 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileCreate_literalMutationString127__46);
        testDirAFile3 = touch(testDirAFile3);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString127__54 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString127__54);
        boolean o_testFileCreate_literalMutationString127__55 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileCreate_literalMutationString127__55);
        testDirAFile5 = touch(testDirAFile5);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString127__63 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString127__63);
        boolean o_testFileCreate_literalMutationString127__64 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileCreate_literalMutationString127__64);
        Assertions.assertTrue(o_testFileCreate_literalMutationString127__4);
        Assertions.assertFalse(o_testFileCreate_literalMutationString127__23);
        Assertions.assertTrue(o_testFileCreate_literalMutationString127__25);
        Assertions.assertFalse(o_testFileCreate_literalMutationString127__27);
        Assertions.assertTrue(o_testFileCreate_literalMutationString127__29);
        Assertions.assertFalse(o_testFileCreate_literalMutationString127__31);
        Assertions.assertFalse(o_testFileCreate_literalMutationString127__33);
        Assertions.assertTrue(o_testFileCreate_literalMutationString127__34);
        Assertions.assertFalse(o_testFileCreate_literalMutationString127__35);
        Assertions.assertTrue(o_testFileCreate_literalMutationString127__36);
        Assertions.assertFalse(o_testFileCreate_literalMutationString127__37);
        Assertions.assertTrue(o_testFileCreate_literalMutationString127__45);
        Assertions.assertTrue(o_testFileCreate_literalMutationString127__46);
        Assertions.assertTrue(o_testFileCreate_literalMutationString127__54);
        Assertions.assertTrue(o_testFileCreate_literalMutationString127__55);
        Assertions.assertTrue(o_testFileCreate_literalMutationString127__63);
    }

    @EnergyTest
    public void testFileCreate_literalMutationString128() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "test-dir-A");
        boolean o_testFileCreate_literalMutationString128__4 = testDirA.mkdir();
        Assertions.assertTrue(o_testFileCreate_literalMutationString128__4);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        File testDirAFile1 = new File(testDirA, "A-file1.jaa");
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        File testDirAFile3 = new File(testDirA, "A-file3.java");
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        File testDirAFile5 = new File(testDirA, "A-file5.java");
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString128__23 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testFileCreate_literalMutationString128__23);
        boolean o_testFileCreate_literalMutationString128__25 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileCreate_literalMutationString128__25);
        boolean o_testFileCreate_literalMutationString128__27 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertFalse(o_testFileCreate_literalMutationString128__27);
        boolean o_testFileCreate_literalMutationString128__29 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileCreate_literalMutationString128__29);
        boolean o_testFileCreate_literalMutationString128__31 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertFalse(o_testFileCreate_literalMutationString128__31);
        boolean o_testFileCreate_literalMutationString128__33 = testDirAFile1.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString128__33);
        boolean o_testFileCreate_literalMutationString128__34 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString128__34);
        boolean o_testFileCreate_literalMutationString128__35 = testDirAFile3.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString128__35);
        boolean o_testFileCreate_literalMutationString128__36 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString128__36);
        boolean o_testFileCreate_literalMutationString128__37 = testDirAFile5.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString128__37);
        checkAndNotify();
        testDirAFile1 = touch(testDirAFile1);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString128__45 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString128__45);
        boolean o_testFileCreate_literalMutationString128__46 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testFileCreate_literalMutationString128__46);
        testDirAFile3 = touch(testDirAFile3);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString128__54 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString128__54);
        boolean o_testFileCreate_literalMutationString128__55 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileCreate_literalMutationString128__55);
        testDirAFile5 = touch(testDirAFile5);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString128__63 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString128__63);
        boolean o_testFileCreate_literalMutationString128__64 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileCreate_literalMutationString128__64);
        Assertions.assertTrue(o_testFileCreate_literalMutationString128__4);
        Assertions.assertFalse(o_testFileCreate_literalMutationString128__23);
        Assertions.assertTrue(o_testFileCreate_literalMutationString128__25);
        Assertions.assertFalse(o_testFileCreate_literalMutationString128__27);
        Assertions.assertTrue(o_testFileCreate_literalMutationString128__29);
        Assertions.assertFalse(o_testFileCreate_literalMutationString128__31);
        Assertions.assertFalse(o_testFileCreate_literalMutationString128__33);
        Assertions.assertTrue(o_testFileCreate_literalMutationString128__34);
        Assertions.assertFalse(o_testFileCreate_literalMutationString128__35);
        Assertions.assertTrue(o_testFileCreate_literalMutationString128__36);
        Assertions.assertFalse(o_testFileCreate_literalMutationString128__37);
        Assertions.assertTrue(o_testFileCreate_literalMutationString128__45);
        Assertions.assertFalse(o_testFileCreate_literalMutationString128__46);
        Assertions.assertTrue(o_testFileCreate_literalMutationString128__54);
        Assertions.assertTrue(o_testFileCreate_literalMutationString128__55);
        Assertions.assertTrue(o_testFileCreate_literalMutationString128__63);
    }

    @EnergyTest
    public void testFileCreate_literalMutationString129() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "test-dir-A");
        boolean o_testFileCreate_literalMutationString129__4 = testDirA.mkdir();
        Assertions.assertTrue(o_testFileCreate_literalMutationString129__4);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        File testDirAFile1 = new File(testDirA, "A-file1.Yjava");
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        File testDirAFile3 = new File(testDirA, "A-file3.java");
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        File testDirAFile5 = new File(testDirA, "A-file5.java");
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString129__23 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testFileCreate_literalMutationString129__23);
        boolean o_testFileCreate_literalMutationString129__25 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileCreate_literalMutationString129__25);
        boolean o_testFileCreate_literalMutationString129__27 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertFalse(o_testFileCreate_literalMutationString129__27);
        boolean o_testFileCreate_literalMutationString129__29 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileCreate_literalMutationString129__29);
        boolean o_testFileCreate_literalMutationString129__31 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertFalse(o_testFileCreate_literalMutationString129__31);
        boolean o_testFileCreate_literalMutationString129__33 = testDirAFile1.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString129__33);
        boolean o_testFileCreate_literalMutationString129__34 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString129__34);
        boolean o_testFileCreate_literalMutationString129__35 = testDirAFile3.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString129__35);
        boolean o_testFileCreate_literalMutationString129__36 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString129__36);
        boolean o_testFileCreate_literalMutationString129__37 = testDirAFile5.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString129__37);
        checkAndNotify();
        testDirAFile1 = touch(testDirAFile1);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString129__45 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString129__45);
        boolean o_testFileCreate_literalMutationString129__46 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testFileCreate_literalMutationString129__46);
        testDirAFile3 = touch(testDirAFile3);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString129__54 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString129__54);
        boolean o_testFileCreate_literalMutationString129__55 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileCreate_literalMutationString129__55);
        testDirAFile5 = touch(testDirAFile5);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString129__63 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString129__63);
        boolean o_testFileCreate_literalMutationString129__64 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileCreate_literalMutationString129__64);
        Assertions.assertTrue(o_testFileCreate_literalMutationString129__4);
        Assertions.assertFalse(o_testFileCreate_literalMutationString129__23);
        Assertions.assertTrue(o_testFileCreate_literalMutationString129__25);
        Assertions.assertFalse(o_testFileCreate_literalMutationString129__27);
        Assertions.assertTrue(o_testFileCreate_literalMutationString129__29);
        Assertions.assertFalse(o_testFileCreate_literalMutationString129__31);
        Assertions.assertFalse(o_testFileCreate_literalMutationString129__33);
        Assertions.assertTrue(o_testFileCreate_literalMutationString129__34);
        Assertions.assertFalse(o_testFileCreate_literalMutationString129__35);
        Assertions.assertTrue(o_testFileCreate_literalMutationString129__36);
        Assertions.assertFalse(o_testFileCreate_literalMutationString129__37);
        Assertions.assertTrue(o_testFileCreate_literalMutationString129__45);
        Assertions.assertFalse(o_testFileCreate_literalMutationString129__46);
        Assertions.assertTrue(o_testFileCreate_literalMutationString129__54);
        Assertions.assertTrue(o_testFileCreate_literalMutationString129__55);
        Assertions.assertTrue(o_testFileCreate_literalMutationString129__63);
    }

    @EnergyTest
    public void testFileCreate_literalMutationString130() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "test-dir-A");
        boolean o_testFileCreate_literalMutationString130__4 = testDirA.mkdir();
        Assertions.assertTrue(o_testFileCreate_literalMutationString130__4);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        File testDirAFile1 = new File(testDirA, "A-file1.java");
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        File testDirAFile3 = new File(testDirA, "A-file3.ava");
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        File testDirAFile5 = new File(testDirA, "A-file5.java");
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString130__23 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testFileCreate_literalMutationString130__23);
        boolean o_testFileCreate_literalMutationString130__25 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileCreate_literalMutationString130__25);
        boolean o_testFileCreate_literalMutationString130__27 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertFalse(o_testFileCreate_literalMutationString130__27);
        boolean o_testFileCreate_literalMutationString130__29 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileCreate_literalMutationString130__29);
        boolean o_testFileCreate_literalMutationString130__31 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertFalse(o_testFileCreate_literalMutationString130__31);
        boolean o_testFileCreate_literalMutationString130__33 = testDirAFile1.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString130__33);
        boolean o_testFileCreate_literalMutationString130__34 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString130__34);
        boolean o_testFileCreate_literalMutationString130__35 = testDirAFile3.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString130__35);
        boolean o_testFileCreate_literalMutationString130__36 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString130__36);
        boolean o_testFileCreate_literalMutationString130__37 = testDirAFile5.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString130__37);
        checkAndNotify();
        testDirAFile1 = touch(testDirAFile1);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString130__45 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString130__45);
        boolean o_testFileCreate_literalMutationString130__46 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileCreate_literalMutationString130__46);
        testDirAFile3 = touch(testDirAFile3);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString130__54 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString130__54);
        boolean o_testFileCreate_literalMutationString130__55 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertFalse(o_testFileCreate_literalMutationString130__55);
        testDirAFile5 = touch(testDirAFile5);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString130__63 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString130__63);
        boolean o_testFileCreate_literalMutationString130__64 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileCreate_literalMutationString130__64);
        Assertions.assertTrue(o_testFileCreate_literalMutationString130__4);
        Assertions.assertFalse(o_testFileCreate_literalMutationString130__23);
        Assertions.assertTrue(o_testFileCreate_literalMutationString130__25);
        Assertions.assertFalse(o_testFileCreate_literalMutationString130__27);
        Assertions.assertTrue(o_testFileCreate_literalMutationString130__29);
        Assertions.assertFalse(o_testFileCreate_literalMutationString130__31);
        Assertions.assertFalse(o_testFileCreate_literalMutationString130__33);
        Assertions.assertTrue(o_testFileCreate_literalMutationString130__34);
        Assertions.assertFalse(o_testFileCreate_literalMutationString130__35);
        Assertions.assertTrue(o_testFileCreate_literalMutationString130__36);
        Assertions.assertFalse(o_testFileCreate_literalMutationString130__37);
        Assertions.assertTrue(o_testFileCreate_literalMutationString130__45);
        Assertions.assertTrue(o_testFileCreate_literalMutationString130__46);
        Assertions.assertTrue(o_testFileCreate_literalMutationString130__54);
        Assertions.assertFalse(o_testFileCreate_literalMutationString130__55);
        Assertions.assertTrue(o_testFileCreate_literalMutationString130__63);
    }

    @EnergyTest
    public void testFileCreate_literalMutationString131() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "test-dir-A");
        boolean o_testFileCreate_literalMutationString131__4 = testDirA.mkdir();
        Assertions.assertTrue(o_testFileCreate_literalMutationString131__4);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        File testDirAFile1 = new File(testDirA, "A-file1.java");
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        File testDirAFile3 = new File(testDirA, "");
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        File testDirAFile5 = new File(testDirA, "A-file5.java");
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString131__23 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testFileCreate_literalMutationString131__23);
        boolean o_testFileCreate_literalMutationString131__25 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileCreate_literalMutationString131__25);
        boolean o_testFileCreate_literalMutationString131__27 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertFalse(o_testFileCreate_literalMutationString131__27);
        boolean o_testFileCreate_literalMutationString131__29 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileCreate_literalMutationString131__29);
        boolean o_testFileCreate_literalMutationString131__31 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertFalse(o_testFileCreate_literalMutationString131__31);
        boolean o_testFileCreate_literalMutationString131__33 = testDirAFile1.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString131__33);
        boolean o_testFileCreate_literalMutationString131__34 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString131__34);
        boolean o_testFileCreate_literalMutationString131__35 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString131__35);
        boolean o_testFileCreate_literalMutationString131__36 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString131__36);
        boolean o_testFileCreate_literalMutationString131__37 = testDirAFile5.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString131__37);
        checkAndNotify();
        testDirAFile1 = touch(testDirAFile1);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString131__45 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString131__45);
        boolean o_testFileCreate_literalMutationString131__46 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileCreate_literalMutationString131__46);
        testDirAFile3 = touch(testDirAFile3);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString131__54 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString131__54);
        boolean o_testFileCreate_literalMutationString131__55 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertFalse(o_testFileCreate_literalMutationString131__55);
        testDirAFile5 = touch(testDirAFile5);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString131__63 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString131__63);
        boolean o_testFileCreate_literalMutationString131__64 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileCreate_literalMutationString131__64);
        Assertions.assertTrue(o_testFileCreate_literalMutationString131__4);
        Assertions.assertFalse(o_testFileCreate_literalMutationString131__23);
        Assertions.assertTrue(o_testFileCreate_literalMutationString131__25);
        Assertions.assertFalse(o_testFileCreate_literalMutationString131__27);
        Assertions.assertTrue(o_testFileCreate_literalMutationString131__29);
        Assertions.assertFalse(o_testFileCreate_literalMutationString131__31);
        Assertions.assertFalse(o_testFileCreate_literalMutationString131__33);
        Assertions.assertTrue(o_testFileCreate_literalMutationString131__34);
        Assertions.assertTrue(o_testFileCreate_literalMutationString131__35);
        Assertions.assertTrue(o_testFileCreate_literalMutationString131__36);
        Assertions.assertFalse(o_testFileCreate_literalMutationString131__37);
        Assertions.assertTrue(o_testFileCreate_literalMutationString131__45);
        Assertions.assertTrue(o_testFileCreate_literalMutationString131__46);
        Assertions.assertTrue(o_testFileCreate_literalMutationString131__54);
        Assertions.assertFalse(o_testFileCreate_literalMutationString131__55);
        Assertions.assertTrue(o_testFileCreate_literalMutationString131__63);
    }

    @EnergyTest
    public void testFileCreate_literalMutationString132() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "test-dir-A");
        boolean o_testFileCreate_literalMutationString132__4 = testDirA.mkdir();
        Assertions.assertTrue(o_testFileCreate_literalMutationString132__4);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        File testDirAFile1 = new File(testDirA, "A-file1.java");
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        File testDirAFile3 = new File(testDirA, "Delete");
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        File testDirAFile5 = new File(testDirA, "A-file5.java");
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString132__23 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testFileCreate_literalMutationString132__23);
        boolean o_testFileCreate_literalMutationString132__25 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileCreate_literalMutationString132__25);
        boolean o_testFileCreate_literalMutationString132__27 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertFalse(o_testFileCreate_literalMutationString132__27);
        boolean o_testFileCreate_literalMutationString132__29 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileCreate_literalMutationString132__29);
        boolean o_testFileCreate_literalMutationString132__31 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertFalse(o_testFileCreate_literalMutationString132__31);
        boolean o_testFileCreate_literalMutationString132__33 = testDirAFile1.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString132__33);
        boolean o_testFileCreate_literalMutationString132__34 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString132__34);
        boolean o_testFileCreate_literalMutationString132__35 = testDirAFile3.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString132__35);
        boolean o_testFileCreate_literalMutationString132__36 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString132__36);
        boolean o_testFileCreate_literalMutationString132__37 = testDirAFile5.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString132__37);
        checkAndNotify();
        testDirAFile1 = touch(testDirAFile1);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString132__45 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString132__45);
        boolean o_testFileCreate_literalMutationString132__46 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileCreate_literalMutationString132__46);
        testDirAFile3 = touch(testDirAFile3);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString132__54 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString132__54);
        boolean o_testFileCreate_literalMutationString132__55 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertFalse(o_testFileCreate_literalMutationString132__55);
        testDirAFile5 = touch(testDirAFile5);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString132__63 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString132__63);
        boolean o_testFileCreate_literalMutationString132__64 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileCreate_literalMutationString132__64);
        Assertions.assertTrue(o_testFileCreate_literalMutationString132__4);
        Assertions.assertFalse(o_testFileCreate_literalMutationString132__23);
        Assertions.assertTrue(o_testFileCreate_literalMutationString132__25);
        Assertions.assertFalse(o_testFileCreate_literalMutationString132__27);
        Assertions.assertTrue(o_testFileCreate_literalMutationString132__29);
        Assertions.assertFalse(o_testFileCreate_literalMutationString132__31);
        Assertions.assertFalse(o_testFileCreate_literalMutationString132__33);
        Assertions.assertTrue(o_testFileCreate_literalMutationString132__34);
        Assertions.assertFalse(o_testFileCreate_literalMutationString132__35);
        Assertions.assertTrue(o_testFileCreate_literalMutationString132__36);
        Assertions.assertFalse(o_testFileCreate_literalMutationString132__37);
        Assertions.assertTrue(o_testFileCreate_literalMutationString132__45);
        Assertions.assertTrue(o_testFileCreate_literalMutationString132__46);
        Assertions.assertTrue(o_testFileCreate_literalMutationString132__54);
        Assertions.assertFalse(o_testFileCreate_literalMutationString132__55);
        Assertions.assertTrue(o_testFileCreate_literalMutationString132__63);
    }

    @EnergyTest
    public void testFileCreate_literalMutationString133() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "test-dir-A");
        boolean o_testFileCreate_literalMutationString133__4 = testDirA.mkdir();
        Assertions.assertTrue(o_testFileCreate_literalMutationString133__4);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        File testDirAFile1 = new File(testDirA, "A-file1.java");
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        File testDirAFile3 = new File(testDirA, "oO!OKS@Rl&{h");
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        File testDirAFile5 = new File(testDirA, "A-file5.java");
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString133__23 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testFileCreate_literalMutationString133__23);
        boolean o_testFileCreate_literalMutationString133__25 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileCreate_literalMutationString133__25);
        boolean o_testFileCreate_literalMutationString133__27 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertFalse(o_testFileCreate_literalMutationString133__27);
        boolean o_testFileCreate_literalMutationString133__29 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileCreate_literalMutationString133__29);
        boolean o_testFileCreate_literalMutationString133__31 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertFalse(o_testFileCreate_literalMutationString133__31);
        boolean o_testFileCreate_literalMutationString133__33 = testDirAFile1.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString133__33);
        boolean o_testFileCreate_literalMutationString133__34 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString133__34);
        boolean o_testFileCreate_literalMutationString133__35 = testDirAFile3.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString133__35);
        boolean o_testFileCreate_literalMutationString133__36 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString133__36);
        boolean o_testFileCreate_literalMutationString133__37 = testDirAFile5.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString133__37);
        checkAndNotify();
        testDirAFile1 = touch(testDirAFile1);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString133__45 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString133__45);
        boolean o_testFileCreate_literalMutationString133__46 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileCreate_literalMutationString133__46);
        testDirAFile3 = touch(testDirAFile3);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString133__54 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString133__54);
        boolean o_testFileCreate_literalMutationString133__55 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertFalse(o_testFileCreate_literalMutationString133__55);
        testDirAFile5 = touch(testDirAFile5);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString133__63 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString133__63);
        boolean o_testFileCreate_literalMutationString133__64 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileCreate_literalMutationString133__64);
        Assertions.assertTrue(o_testFileCreate_literalMutationString133__4);
        Assertions.assertFalse(o_testFileCreate_literalMutationString133__23);
        Assertions.assertTrue(o_testFileCreate_literalMutationString133__25);
        Assertions.assertFalse(o_testFileCreate_literalMutationString133__27);
        Assertions.assertTrue(o_testFileCreate_literalMutationString133__29);
        Assertions.assertFalse(o_testFileCreate_literalMutationString133__31);
        Assertions.assertFalse(o_testFileCreate_literalMutationString133__33);
        Assertions.assertTrue(o_testFileCreate_literalMutationString133__34);
        Assertions.assertFalse(o_testFileCreate_literalMutationString133__35);
        Assertions.assertTrue(o_testFileCreate_literalMutationString133__36);
        Assertions.assertFalse(o_testFileCreate_literalMutationString133__37);
        Assertions.assertTrue(o_testFileCreate_literalMutationString133__45);
        Assertions.assertTrue(o_testFileCreate_literalMutationString133__46);
        Assertions.assertTrue(o_testFileCreate_literalMutationString133__54);
        Assertions.assertFalse(o_testFileCreate_literalMutationString133__55);
        Assertions.assertTrue(o_testFileCreate_literalMutationString133__63);
    }

    @EnergyTest
    public void testFileCreate_literalMutationString134() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "test-dir-A");
        boolean o_testFileCreate_literalMutationString134__4 = testDirA.mkdir();
        Assertions.assertTrue(o_testFileCreate_literalMutationString134__4);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        File testDirAFile1 = new File(testDirA, "A-file1.java");
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        File testDirAFile3 = new File(testDirA, "A-file3Sjava");
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        File testDirAFile5 = new File(testDirA, "A-file5.java");
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString134__23 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testFileCreate_literalMutationString134__23);
        boolean o_testFileCreate_literalMutationString134__25 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileCreate_literalMutationString134__25);
        boolean o_testFileCreate_literalMutationString134__27 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertFalse(o_testFileCreate_literalMutationString134__27);
        boolean o_testFileCreate_literalMutationString134__29 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileCreate_literalMutationString134__29);
        boolean o_testFileCreate_literalMutationString134__31 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertFalse(o_testFileCreate_literalMutationString134__31);
        boolean o_testFileCreate_literalMutationString134__33 = testDirAFile1.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString134__33);
        boolean o_testFileCreate_literalMutationString134__34 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString134__34);
        boolean o_testFileCreate_literalMutationString134__35 = testDirAFile3.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString134__35);
        boolean o_testFileCreate_literalMutationString134__36 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString134__36);
        boolean o_testFileCreate_literalMutationString134__37 = testDirAFile5.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString134__37);
        checkAndNotify();
        testDirAFile1 = touch(testDirAFile1);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString134__45 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString134__45);
        boolean o_testFileCreate_literalMutationString134__46 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileCreate_literalMutationString134__46);
        testDirAFile3 = touch(testDirAFile3);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString134__54 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString134__54);
        boolean o_testFileCreate_literalMutationString134__55 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertFalse(o_testFileCreate_literalMutationString134__55);
        testDirAFile5 = touch(testDirAFile5);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString134__63 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString134__63);
        boolean o_testFileCreate_literalMutationString134__64 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileCreate_literalMutationString134__64);
        Assertions.assertTrue(o_testFileCreate_literalMutationString134__4);
        Assertions.assertFalse(o_testFileCreate_literalMutationString134__23);
        Assertions.assertTrue(o_testFileCreate_literalMutationString134__25);
        Assertions.assertFalse(o_testFileCreate_literalMutationString134__27);
        Assertions.assertTrue(o_testFileCreate_literalMutationString134__29);
        Assertions.assertFalse(o_testFileCreate_literalMutationString134__31);
        Assertions.assertFalse(o_testFileCreate_literalMutationString134__33);
        Assertions.assertTrue(o_testFileCreate_literalMutationString134__34);
        Assertions.assertFalse(o_testFileCreate_literalMutationString134__35);
        Assertions.assertTrue(o_testFileCreate_literalMutationString134__36);
        Assertions.assertFalse(o_testFileCreate_literalMutationString134__37);
        Assertions.assertTrue(o_testFileCreate_literalMutationString134__45);
        Assertions.assertTrue(o_testFileCreate_literalMutationString134__46);
        Assertions.assertTrue(o_testFileCreate_literalMutationString134__54);
        Assertions.assertFalse(o_testFileCreate_literalMutationString134__55);
        Assertions.assertTrue(o_testFileCreate_literalMutationString134__63);
    }

    @EnergyTest
    public void testFileCreate_literalMutationString135() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "test-dir-A");
        boolean o_testFileCreate_literalMutationString135__4 = testDirA.mkdir();
        Assertions.assertTrue(o_testFileCreate_literalMutationString135__4);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        File testDirAFile1 = new File(testDirA, "A-file1.java");
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        File testDirAFile3 = new File(testDirA, "A-file/3.java");
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        File testDirAFile5 = new File(testDirA, "A-file5.java");
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString135__23 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testFileCreate_literalMutationString135__23);
        boolean o_testFileCreate_literalMutationString135__25 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileCreate_literalMutationString135__25);
        boolean o_testFileCreate_literalMutationString135__27 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertFalse(o_testFileCreate_literalMutationString135__27);
        boolean o_testFileCreate_literalMutationString135__29 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileCreate_literalMutationString135__29);
        boolean o_testFileCreate_literalMutationString135__31 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertFalse(o_testFileCreate_literalMutationString135__31);
        boolean o_testFileCreate_literalMutationString135__33 = testDirAFile1.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString135__33);
        boolean o_testFileCreate_literalMutationString135__34 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString135__34);
        boolean o_testFileCreate_literalMutationString135__35 = testDirAFile3.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString135__35);
        boolean o_testFileCreate_literalMutationString135__36 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString135__36);
        boolean o_testFileCreate_literalMutationString135__37 = testDirAFile5.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString135__37);
        checkAndNotify();
        testDirAFile1 = touch(testDirAFile1);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString135__45 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString135__45);
        boolean o_testFileCreate_literalMutationString135__46 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileCreate_literalMutationString135__46);
        testDirAFile3 = touch(testDirAFile3);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString135__54 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString135__54);
        boolean o_testFileCreate_literalMutationString135__55 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileCreate_literalMutationString135__55);
        testDirAFile5 = touch(testDirAFile5);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString135__63 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString135__63);
        boolean o_testFileCreate_literalMutationString135__64 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileCreate_literalMutationString135__64);
        Assertions.assertTrue(o_testFileCreate_literalMutationString135__4);
        Assertions.assertFalse(o_testFileCreate_literalMutationString135__23);
        Assertions.assertTrue(o_testFileCreate_literalMutationString135__25);
        Assertions.assertFalse(o_testFileCreate_literalMutationString135__27);
        Assertions.assertTrue(o_testFileCreate_literalMutationString135__29);
        Assertions.assertFalse(o_testFileCreate_literalMutationString135__31);
        Assertions.assertFalse(o_testFileCreate_literalMutationString135__33);
        Assertions.assertTrue(o_testFileCreate_literalMutationString135__34);
        Assertions.assertFalse(o_testFileCreate_literalMutationString135__35);
        Assertions.assertTrue(o_testFileCreate_literalMutationString135__36);
        Assertions.assertFalse(o_testFileCreate_literalMutationString135__37);
        Assertions.assertTrue(o_testFileCreate_literalMutationString135__45);
        Assertions.assertTrue(o_testFileCreate_literalMutationString135__46);
        Assertions.assertTrue(o_testFileCreate_literalMutationString135__54);
        Assertions.assertTrue(o_testFileCreate_literalMutationString135__55);
        Assertions.assertTrue(o_testFileCreate_literalMutationString135__63);
    }

    @EnergyTest
    public void testFileCreate_literalMutationString136() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "test-dir-A");
        boolean o_testFileCreate_literalMutationString136__4 = testDirA.mkdir();
        Assertions.assertTrue(o_testFileCreate_literalMutationString136__4);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        File testDirAFile1 = new File(testDirA, "A-file1.java");
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        File testDirAFile3 = new File(testDirA, "A-file3.java");
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        File testDirAFile5 = new File(testDirA, "");
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString136__23 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testFileCreate_literalMutationString136__23);
        boolean o_testFileCreate_literalMutationString136__25 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileCreate_literalMutationString136__25);
        boolean o_testFileCreate_literalMutationString136__27 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertFalse(o_testFileCreate_literalMutationString136__27);
        boolean o_testFileCreate_literalMutationString136__29 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileCreate_literalMutationString136__29);
        boolean o_testFileCreate_literalMutationString136__31 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertFalse(o_testFileCreate_literalMutationString136__31);
        boolean o_testFileCreate_literalMutationString136__33 = testDirAFile1.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString136__33);
        boolean o_testFileCreate_literalMutationString136__34 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString136__34);
        boolean o_testFileCreate_literalMutationString136__35 = testDirAFile3.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString136__35);
        boolean o_testFileCreate_literalMutationString136__36 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString136__36);
        boolean o_testFileCreate_literalMutationString136__37 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString136__37);
        checkAndNotify();
        testDirAFile1 = touch(testDirAFile1);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString136__45 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString136__45);
        boolean o_testFileCreate_literalMutationString136__46 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileCreate_literalMutationString136__46);
        testDirAFile3 = touch(testDirAFile3);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString136__54 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString136__54);
        boolean o_testFileCreate_literalMutationString136__55 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileCreate_literalMutationString136__55);
        testDirAFile5 = touch(testDirAFile5);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString136__63 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString136__63);
        boolean o_testFileCreate_literalMutationString136__64 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertFalse(o_testFileCreate_literalMutationString136__64);
        Assertions.assertTrue(o_testFileCreate_literalMutationString136__4);
        Assertions.assertFalse(o_testFileCreate_literalMutationString136__23);
        Assertions.assertTrue(o_testFileCreate_literalMutationString136__25);
        Assertions.assertFalse(o_testFileCreate_literalMutationString136__27);
        Assertions.assertTrue(o_testFileCreate_literalMutationString136__29);
        Assertions.assertFalse(o_testFileCreate_literalMutationString136__31);
        Assertions.assertFalse(o_testFileCreate_literalMutationString136__33);
        Assertions.assertTrue(o_testFileCreate_literalMutationString136__34);
        Assertions.assertFalse(o_testFileCreate_literalMutationString136__35);
        Assertions.assertTrue(o_testFileCreate_literalMutationString136__36);
        Assertions.assertTrue(o_testFileCreate_literalMutationString136__37);
        Assertions.assertTrue(o_testFileCreate_literalMutationString136__45);
        Assertions.assertTrue(o_testFileCreate_literalMutationString136__46);
        Assertions.assertTrue(o_testFileCreate_literalMutationString136__54);
        Assertions.assertTrue(o_testFileCreate_literalMutationString136__55);
        Assertions.assertTrue(o_testFileCreate_literalMutationString136__63);
    }

    @EnergyTest
    public void testFileCreate_literalMutationString137() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "test-dir-A");
        boolean o_testFileCreate_literalMutationString137__4 = testDirA.mkdir();
        Assertions.assertTrue(o_testFileCreate_literalMutationString137__4);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        File testDirAFile1 = new File(testDirA, "A-file1.java");
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        File testDirAFile3 = new File(testDirA, "A-file3.java");
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        File testDirAFile5 = new File(testDirA, "Delete");
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString137__23 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testFileCreate_literalMutationString137__23);
        boolean o_testFileCreate_literalMutationString137__25 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileCreate_literalMutationString137__25);
        boolean o_testFileCreate_literalMutationString137__27 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertFalse(o_testFileCreate_literalMutationString137__27);
        boolean o_testFileCreate_literalMutationString137__29 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileCreate_literalMutationString137__29);
        boolean o_testFileCreate_literalMutationString137__31 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertFalse(o_testFileCreate_literalMutationString137__31);
        boolean o_testFileCreate_literalMutationString137__33 = testDirAFile1.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString137__33);
        boolean o_testFileCreate_literalMutationString137__34 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString137__34);
        boolean o_testFileCreate_literalMutationString137__35 = testDirAFile3.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString137__35);
        boolean o_testFileCreate_literalMutationString137__36 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString137__36);
        boolean o_testFileCreate_literalMutationString137__37 = testDirAFile5.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString137__37);
        checkAndNotify();
        testDirAFile1 = touch(testDirAFile1);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString137__45 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString137__45);
        boolean o_testFileCreate_literalMutationString137__46 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileCreate_literalMutationString137__46);
        testDirAFile3 = touch(testDirAFile3);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString137__54 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString137__54);
        boolean o_testFileCreate_literalMutationString137__55 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileCreate_literalMutationString137__55);
        testDirAFile5 = touch(testDirAFile5);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString137__63 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString137__63);
        boolean o_testFileCreate_literalMutationString137__64 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertFalse(o_testFileCreate_literalMutationString137__64);
        Assertions.assertTrue(o_testFileCreate_literalMutationString137__4);
        Assertions.assertFalse(o_testFileCreate_literalMutationString137__23);
        Assertions.assertTrue(o_testFileCreate_literalMutationString137__25);
        Assertions.assertFalse(o_testFileCreate_literalMutationString137__27);
        Assertions.assertTrue(o_testFileCreate_literalMutationString137__29);
        Assertions.assertFalse(o_testFileCreate_literalMutationString137__31);
        Assertions.assertFalse(o_testFileCreate_literalMutationString137__33);
        Assertions.assertTrue(o_testFileCreate_literalMutationString137__34);
        Assertions.assertFalse(o_testFileCreate_literalMutationString137__35);
        Assertions.assertTrue(o_testFileCreate_literalMutationString137__36);
        Assertions.assertFalse(o_testFileCreate_literalMutationString137__37);
        Assertions.assertTrue(o_testFileCreate_literalMutationString137__45);
        Assertions.assertTrue(o_testFileCreate_literalMutationString137__46);
        Assertions.assertTrue(o_testFileCreate_literalMutationString137__54);
        Assertions.assertTrue(o_testFileCreate_literalMutationString137__55);
        Assertions.assertTrue(o_testFileCreate_literalMutationString137__63);
    }

    @EnergyTest
    public void testFileCreate_literalMutationString138() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "test-dir-A");
        boolean o_testFileCreate_literalMutationString138__4 = testDirA.mkdir();
        Assertions.assertTrue(o_testFileCreate_literalMutationString138__4);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        File testDirAFile1 = new File(testDirA, "A-file1.java");
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        File testDirAFile3 = new File(testDirA, "A-file3.java");
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        File testDirAFile5 = new File(testDirA, "A-file.java");
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString138__23 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testFileCreate_literalMutationString138__23);
        boolean o_testFileCreate_literalMutationString138__25 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileCreate_literalMutationString138__25);
        boolean o_testFileCreate_literalMutationString138__27 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertFalse(o_testFileCreate_literalMutationString138__27);
        boolean o_testFileCreate_literalMutationString138__29 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileCreate_literalMutationString138__29);
        boolean o_testFileCreate_literalMutationString138__31 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertFalse(o_testFileCreate_literalMutationString138__31);
        boolean o_testFileCreate_literalMutationString138__33 = testDirAFile1.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString138__33);
        boolean o_testFileCreate_literalMutationString138__34 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString138__34);
        boolean o_testFileCreate_literalMutationString138__35 = testDirAFile3.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString138__35);
        boolean o_testFileCreate_literalMutationString138__36 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString138__36);
        boolean o_testFileCreate_literalMutationString138__37 = testDirAFile5.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString138__37);
        checkAndNotify();
        testDirAFile1 = touch(testDirAFile1);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString138__45 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString138__45);
        boolean o_testFileCreate_literalMutationString138__46 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileCreate_literalMutationString138__46);
        testDirAFile3 = touch(testDirAFile3);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString138__54 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString138__54);
        boolean o_testFileCreate_literalMutationString138__55 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileCreate_literalMutationString138__55);
        testDirAFile5 = touch(testDirAFile5);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString138__63 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString138__63);
        boolean o_testFileCreate_literalMutationString138__64 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileCreate_literalMutationString138__64);
        Assertions.assertTrue(o_testFileCreate_literalMutationString138__4);
        Assertions.assertFalse(o_testFileCreate_literalMutationString138__23);
        Assertions.assertTrue(o_testFileCreate_literalMutationString138__25);
        Assertions.assertFalse(o_testFileCreate_literalMutationString138__27);
        Assertions.assertTrue(o_testFileCreate_literalMutationString138__29);
        Assertions.assertFalse(o_testFileCreate_literalMutationString138__31);
        Assertions.assertFalse(o_testFileCreate_literalMutationString138__33);
        Assertions.assertTrue(o_testFileCreate_literalMutationString138__34);
        Assertions.assertFalse(o_testFileCreate_literalMutationString138__35);
        Assertions.assertTrue(o_testFileCreate_literalMutationString138__36);
        Assertions.assertFalse(o_testFileCreate_literalMutationString138__37);
        Assertions.assertTrue(o_testFileCreate_literalMutationString138__45);
        Assertions.assertTrue(o_testFileCreate_literalMutationString138__46);
        Assertions.assertTrue(o_testFileCreate_literalMutationString138__54);
        Assertions.assertTrue(o_testFileCreate_literalMutationString138__55);
        Assertions.assertTrue(o_testFileCreate_literalMutationString138__63);
    }

    @EnergyTest
    public void testFileCreate_literalMutationString139() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "test-dir-A");
        boolean o_testFileCreate_literalMutationString139__4 = testDirA.mkdir();
        Assertions.assertTrue(o_testFileCreate_literalMutationString139__4);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        File testDirAFile1 = new File(testDirA, "A-file1.java");
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        File testDirAFile3 = new File(testDirA, "A-file3.java");
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        File testDirAFile5 = new File(testDirA, "vg[?i!rb0/|]");
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString139__23 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testFileCreate_literalMutationString139__23);
        boolean o_testFileCreate_literalMutationString139__25 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileCreate_literalMutationString139__25);
        boolean o_testFileCreate_literalMutationString139__27 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertFalse(o_testFileCreate_literalMutationString139__27);
        boolean o_testFileCreate_literalMutationString139__29 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileCreate_literalMutationString139__29);
        boolean o_testFileCreate_literalMutationString139__31 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertFalse(o_testFileCreate_literalMutationString139__31);
        boolean o_testFileCreate_literalMutationString139__33 = testDirAFile1.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString139__33);
        boolean o_testFileCreate_literalMutationString139__34 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString139__34);
        boolean o_testFileCreate_literalMutationString139__35 = testDirAFile3.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString139__35);
        boolean o_testFileCreate_literalMutationString139__36 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString139__36);
        boolean o_testFileCreate_literalMutationString139__37 = testDirAFile5.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString139__37);
        checkAndNotify();
        testDirAFile1 = touch(testDirAFile1);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString139__45 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString139__45);
        boolean o_testFileCreate_literalMutationString139__46 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileCreate_literalMutationString139__46);
        testDirAFile3 = touch(testDirAFile3);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString139__54 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString139__54);
        boolean o_testFileCreate_literalMutationString139__55 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileCreate_literalMutationString139__55);
        testDirAFile5 = touch(testDirAFile5);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString139__63 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString139__63);
        boolean o_testFileCreate_literalMutationString139__64 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertFalse(o_testFileCreate_literalMutationString139__64);
        Assertions.assertTrue(o_testFileCreate_literalMutationString139__4);
        Assertions.assertFalse(o_testFileCreate_literalMutationString139__23);
        Assertions.assertTrue(o_testFileCreate_literalMutationString139__25);
        Assertions.assertFalse(o_testFileCreate_literalMutationString139__27);
        Assertions.assertTrue(o_testFileCreate_literalMutationString139__29);
        Assertions.assertFalse(o_testFileCreate_literalMutationString139__31);
        Assertions.assertFalse(o_testFileCreate_literalMutationString139__33);
        Assertions.assertTrue(o_testFileCreate_literalMutationString139__34);
        Assertions.assertFalse(o_testFileCreate_literalMutationString139__35);
        Assertions.assertTrue(o_testFileCreate_literalMutationString139__36);
        Assertions.assertFalse(o_testFileCreate_literalMutationString139__37);
        Assertions.assertTrue(o_testFileCreate_literalMutationString139__45);
        Assertions.assertTrue(o_testFileCreate_literalMutationString139__46);
        Assertions.assertTrue(o_testFileCreate_literalMutationString139__54);
        Assertions.assertTrue(o_testFileCreate_literalMutationString139__55);
        Assertions.assertTrue(o_testFileCreate_literalMutationString139__63);
    }

    @EnergyTest
    public void testFileCreate_literalMutationString140() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "test-dir-A");
        boolean o_testFileCreate_literalMutationString140__4 = testDirA.mkdir();
        Assertions.assertTrue(o_testFileCreate_literalMutationString140__4);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        File testDirAFile1 = new File(testDirA, "A-file1.java");
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        File testDirAFile3 = new File(testDirA, "A-file3.java");
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        File testDirAFile5 = new File(testDirA, "A-file5B.java");
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString140__23 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testFileCreate_literalMutationString140__23);
        boolean o_testFileCreate_literalMutationString140__25 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileCreate_literalMutationString140__25);
        boolean o_testFileCreate_literalMutationString140__27 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertFalse(o_testFileCreate_literalMutationString140__27);
        boolean o_testFileCreate_literalMutationString140__29 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileCreate_literalMutationString140__29);
        boolean o_testFileCreate_literalMutationString140__31 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertFalse(o_testFileCreate_literalMutationString140__31);
        boolean o_testFileCreate_literalMutationString140__33 = testDirAFile1.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString140__33);
        boolean o_testFileCreate_literalMutationString140__34 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString140__34);
        boolean o_testFileCreate_literalMutationString140__35 = testDirAFile3.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString140__35);
        boolean o_testFileCreate_literalMutationString140__36 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString140__36);
        boolean o_testFileCreate_literalMutationString140__37 = testDirAFile5.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString140__37);
        checkAndNotify();
        testDirAFile1 = touch(testDirAFile1);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString140__45 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString140__45);
        boolean o_testFileCreate_literalMutationString140__46 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileCreate_literalMutationString140__46);
        testDirAFile3 = touch(testDirAFile3);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString140__54 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString140__54);
        boolean o_testFileCreate_literalMutationString140__55 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileCreate_literalMutationString140__55);
        testDirAFile5 = touch(testDirAFile5);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString140__63 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString140__63);
        boolean o_testFileCreate_literalMutationString140__64 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileCreate_literalMutationString140__64);
        Assertions.assertTrue(o_testFileCreate_literalMutationString140__4);
        Assertions.assertFalse(o_testFileCreate_literalMutationString140__23);
        Assertions.assertTrue(o_testFileCreate_literalMutationString140__25);
        Assertions.assertFalse(o_testFileCreate_literalMutationString140__27);
        Assertions.assertTrue(o_testFileCreate_literalMutationString140__29);
        Assertions.assertFalse(o_testFileCreate_literalMutationString140__31);
        Assertions.assertFalse(o_testFileCreate_literalMutationString140__33);
        Assertions.assertTrue(o_testFileCreate_literalMutationString140__34);
        Assertions.assertFalse(o_testFileCreate_literalMutationString140__35);
        Assertions.assertTrue(o_testFileCreate_literalMutationString140__36);
        Assertions.assertFalse(o_testFileCreate_literalMutationString140__37);
        Assertions.assertTrue(o_testFileCreate_literalMutationString140__45);
        Assertions.assertTrue(o_testFileCreate_literalMutationString140__46);
        Assertions.assertTrue(o_testFileCreate_literalMutationString140__54);
        Assertions.assertTrue(o_testFileCreate_literalMutationString140__55);
        Assertions.assertTrue(o_testFileCreate_literalMutationString140__63);
    }

    @EnergyTest
    public void testFileCreate_literalMutationString141() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "test-dir-A");
        boolean o_testFileCreate_literalMutationString141__4 = testDirA.mkdir();
        Assertions.assertTrue(o_testFileCreate_literalMutationString141__4);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        File testDirAFile1 = new File(testDirA, "A-file1.java");
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        File testDirAFile3 = new File(testDirA, "A-file3.java");
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        File testDirAFile5 = new File(testDirA, "A!file5.java");
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString141__23 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testFileCreate_literalMutationString141__23);
        boolean o_testFileCreate_literalMutationString141__25 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileCreate_literalMutationString141__25);
        boolean o_testFileCreate_literalMutationString141__27 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertFalse(o_testFileCreate_literalMutationString141__27);
        boolean o_testFileCreate_literalMutationString141__29 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileCreate_literalMutationString141__29);
        boolean o_testFileCreate_literalMutationString141__31 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertFalse(o_testFileCreate_literalMutationString141__31);
        boolean o_testFileCreate_literalMutationString141__33 = testDirAFile1.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString141__33);
        boolean o_testFileCreate_literalMutationString141__34 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString141__34);
        boolean o_testFileCreate_literalMutationString141__35 = testDirAFile3.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString141__35);
        boolean o_testFileCreate_literalMutationString141__36 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString141__36);
        boolean o_testFileCreate_literalMutationString141__37 = testDirAFile5.exists();
        Assertions.assertFalse(o_testFileCreate_literalMutationString141__37);
        checkAndNotify();
        testDirAFile1 = touch(testDirAFile1);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString141__45 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString141__45);
        boolean o_testFileCreate_literalMutationString141__46 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileCreate_literalMutationString141__46);
        testDirAFile3 = touch(testDirAFile3);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString141__54 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString141__54);
        boolean o_testFileCreate_literalMutationString141__55 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileCreate_literalMutationString141__55);
        testDirAFile5 = touch(testDirAFile5);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileCreate_literalMutationString141__63 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileCreate_literalMutationString141__63);
        boolean o_testFileCreate_literalMutationString141__64 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileCreate_literalMutationString141__64);
        Assertions.assertTrue(o_testFileCreate_literalMutationString141__4);
        Assertions.assertFalse(o_testFileCreate_literalMutationString141__23);
        Assertions.assertTrue(o_testFileCreate_literalMutationString141__25);
        Assertions.assertFalse(o_testFileCreate_literalMutationString141__27);
        Assertions.assertTrue(o_testFileCreate_literalMutationString141__29);
        Assertions.assertFalse(o_testFileCreate_literalMutationString141__31);
        Assertions.assertFalse(o_testFileCreate_literalMutationString141__33);
        Assertions.assertTrue(o_testFileCreate_literalMutationString141__34);
        Assertions.assertFalse(o_testFileCreate_literalMutationString141__35);
        Assertions.assertTrue(o_testFileCreate_literalMutationString141__36);
        Assertions.assertFalse(o_testFileCreate_literalMutationString141__37);
        Assertions.assertTrue(o_testFileCreate_literalMutationString141__45);
        Assertions.assertTrue(o_testFileCreate_literalMutationString141__46);
        Assertions.assertTrue(o_testFileCreate_literalMutationString141__54);
        Assertions.assertTrue(o_testFileCreate_literalMutationString141__55);
        Assertions.assertTrue(o_testFileCreate_literalMutationString141__63);
    }

    @EnergyTest
    public void testFileUpdate() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "test-dir-A");
        boolean o_testFileUpdate__4 = testDirA.mkdir();
        Assertions.assertTrue(o_testFileUpdate__4);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        File testDirAFile1 = touch(new File(testDirA, "A-file1.java"));
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        File testDirAFile5 = touch(new File(testDirA, "A-file5.java"));
        checkAndNotify();
        boolean o_testFileUpdate__25 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileUpdate__25);
        boolean o_testFileUpdate__27 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileUpdate__27);
        boolean o_testFileUpdate__29 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileUpdate__29);
        boolean o_testFileUpdate__31 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileUpdate__31);
        boolean o_testFileUpdate__33 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileUpdate__33);
        boolean o_testFileUpdate__35 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileUpdate__35);
        boolean o_testFileUpdate__36 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileUpdate__36);
        boolean o_testFileUpdate__37 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileUpdate__37);
        boolean o_testFileUpdate__38 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileUpdate__38);
        boolean o_testFileUpdate__39 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileUpdate__39);
        checkAndNotify();
        testDirAFile1 = touch(testDirAFile1);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileUpdate__47 = listener.getChangedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileUpdate__47);
        testDirAFile3 = touch(testDirAFile3);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileUpdate__55 = listener.getChangedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileUpdate__55);
        testDirAFile5 = touch(testDirAFile5);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileUpdate__63 = listener.getChangedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileUpdate__63);
        Assertions.assertTrue(o_testFileUpdate__4);
        Assertions.assertTrue(o_testFileUpdate__25);
        Assertions.assertTrue(o_testFileUpdate__27);
        Assertions.assertTrue(o_testFileUpdate__29);
        Assertions.assertTrue(o_testFileUpdate__31);
        Assertions.assertTrue(o_testFileUpdate__33);
        Assertions.assertTrue(o_testFileUpdate__35);
        Assertions.assertTrue(o_testFileUpdate__36);
        Assertions.assertTrue(o_testFileUpdate__37);
        Assertions.assertTrue(o_testFileUpdate__38);
        Assertions.assertTrue(o_testFileUpdate__39);
        Assertions.assertTrue(o_testFileUpdate__47);
        Assertions.assertTrue(o_testFileUpdate__55);
    }

    @EnergyTest
    public void testFileUpdate_literalMutationString238() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "");
        boolean o_testFileUpdate_literalMutationString238__5 = testDirA.mkdir();
        Assertions.assertFalse(o_testFileUpdate_literalMutationString238__5);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        File testDirAFile1 = touch(new File(testDirA, "A-file1.java"));
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        File testDirAFile5 = touch(new File(testDirA, "A-file5.java"));
        checkAndNotify();
        boolean o_testFileUpdate_literalMutationString238__26 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString238__26);
        boolean o_testFileUpdate_literalMutationString238__28 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString238__28);
        boolean o_testFileUpdate_literalMutationString238__30 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString238__30);
        boolean o_testFileUpdate_literalMutationString238__32 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString238__32);
        boolean o_testFileUpdate_literalMutationString238__34 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString238__34);
        boolean o_testFileUpdate_literalMutationString238__36 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileUpdate_literalMutationString238__36);
        boolean o_testFileUpdate_literalMutationString238__37 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileUpdate_literalMutationString238__37);
        boolean o_testFileUpdate_literalMutationString238__38 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileUpdate_literalMutationString238__38);
        boolean o_testFileUpdate_literalMutationString238__39 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileUpdate_literalMutationString238__39);
        boolean o_testFileUpdate_literalMutationString238__40 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileUpdate_literalMutationString238__40);
        checkAndNotify();
        testDirAFile1 = touch(testDirAFile1);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileUpdate_literalMutationString238__48 = listener.getChangedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString238__48);
        testDirAFile3 = touch(testDirAFile3);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileUpdate_literalMutationString238__56 = listener.getChangedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString238__56);
        testDirAFile5 = touch(testDirAFile5);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileUpdate_literalMutationString238__64 = listener.getChangedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString238__64);
        Assertions.assertFalse(o_testFileUpdate_literalMutationString238__5);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString238__26);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString238__28);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString238__30);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString238__32);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString238__34);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString238__36);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString238__37);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString238__38);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString238__39);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString238__40);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString238__48);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString238__56);
    }

    @EnergyTest
    public void testFileUpdate_literalMutationString239() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "Delete");
        boolean o_testFileUpdate_literalMutationString239__5 = testDirA.mkdir();
        Assertions.assertTrue(o_testFileUpdate_literalMutationString239__5);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        File testDirAFile1 = touch(new File(testDirA, "A-file1.java"));
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        File testDirAFile5 = touch(new File(testDirA, "A-file5.java"));
        checkAndNotify();
        boolean o_testFileUpdate_literalMutationString239__26 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString239__26);
        boolean o_testFileUpdate_literalMutationString239__28 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString239__28);
        boolean o_testFileUpdate_literalMutationString239__30 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString239__30);
        boolean o_testFileUpdate_literalMutationString239__32 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString239__32);
        boolean o_testFileUpdate_literalMutationString239__34 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString239__34);
        boolean o_testFileUpdate_literalMutationString239__36 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileUpdate_literalMutationString239__36);
        boolean o_testFileUpdate_literalMutationString239__37 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileUpdate_literalMutationString239__37);
        boolean o_testFileUpdate_literalMutationString239__38 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileUpdate_literalMutationString239__38);
        boolean o_testFileUpdate_literalMutationString239__39 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileUpdate_literalMutationString239__39);
        boolean o_testFileUpdate_literalMutationString239__40 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileUpdate_literalMutationString239__40);
        checkAndNotify();
        testDirAFile1 = touch(testDirAFile1);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileUpdate_literalMutationString239__48 = listener.getChangedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString239__48);
        testDirAFile3 = touch(testDirAFile3);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileUpdate_literalMutationString239__56 = listener.getChangedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString239__56);
        testDirAFile5 = touch(testDirAFile5);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileUpdate_literalMutationString239__64 = listener.getChangedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString239__64);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString239__5);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString239__26);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString239__28);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString239__30);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString239__32);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString239__34);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString239__36);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString239__37);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString239__38);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString239__39);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString239__40);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString239__48);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString239__56);
    }

    @EnergyTest
    public void testFileUpdate_literalMutationString240() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "tst-dir-A");
        boolean o_testFileUpdate_literalMutationString240__5 = testDirA.mkdir();
        Assertions.assertTrue(o_testFileUpdate_literalMutationString240__5);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        File testDirAFile1 = touch(new File(testDirA, "A-file1.java"));
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        File testDirAFile5 = touch(new File(testDirA, "A-file5.java"));
        checkAndNotify();
        boolean o_testFileUpdate_literalMutationString240__26 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString240__26);
        boolean o_testFileUpdate_literalMutationString240__28 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString240__28);
        boolean o_testFileUpdate_literalMutationString240__30 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString240__30);
        boolean o_testFileUpdate_literalMutationString240__32 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString240__32);
        boolean o_testFileUpdate_literalMutationString240__34 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString240__34);
        boolean o_testFileUpdate_literalMutationString240__36 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileUpdate_literalMutationString240__36);
        boolean o_testFileUpdate_literalMutationString240__37 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileUpdate_literalMutationString240__37);
        boolean o_testFileUpdate_literalMutationString240__38 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileUpdate_literalMutationString240__38);
        boolean o_testFileUpdate_literalMutationString240__39 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileUpdate_literalMutationString240__39);
        boolean o_testFileUpdate_literalMutationString240__40 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileUpdate_literalMutationString240__40);
        checkAndNotify();
        testDirAFile1 = touch(testDirAFile1);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileUpdate_literalMutationString240__48 = listener.getChangedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString240__48);
        testDirAFile3 = touch(testDirAFile3);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileUpdate_literalMutationString240__56 = listener.getChangedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString240__56);
        testDirAFile5 = touch(testDirAFile5);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileUpdate_literalMutationString240__64 = listener.getChangedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString240__64);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString240__5);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString240__26);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString240__28);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString240__30);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString240__32);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString240__34);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString240__36);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString240__37);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString240__38);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString240__39);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString240__40);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString240__48);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString240__56);
    }

    @EnergyTest
    public void testFileUpdate_literalMutationString241() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "teCt-dir-A");
        boolean o_testFileUpdate_literalMutationString241__5 = testDirA.mkdir();
        Assertions.assertTrue(o_testFileUpdate_literalMutationString241__5);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        File testDirAFile1 = touch(new File(testDirA, "A-file1.java"));
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        File testDirAFile5 = touch(new File(testDirA, "A-file5.java"));
        checkAndNotify();
        boolean o_testFileUpdate_literalMutationString241__26 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString241__26);
        boolean o_testFileUpdate_literalMutationString241__28 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString241__28);
        boolean o_testFileUpdate_literalMutationString241__30 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString241__30);
        boolean o_testFileUpdate_literalMutationString241__32 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString241__32);
        boolean o_testFileUpdate_literalMutationString241__34 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString241__34);
        boolean o_testFileUpdate_literalMutationString241__36 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileUpdate_literalMutationString241__36);
        boolean o_testFileUpdate_literalMutationString241__37 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileUpdate_literalMutationString241__37);
        boolean o_testFileUpdate_literalMutationString241__38 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileUpdate_literalMutationString241__38);
        boolean o_testFileUpdate_literalMutationString241__39 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileUpdate_literalMutationString241__39);
        boolean o_testFileUpdate_literalMutationString241__40 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileUpdate_literalMutationString241__40);
        checkAndNotify();
        testDirAFile1 = touch(testDirAFile1);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileUpdate_literalMutationString241__48 = listener.getChangedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString241__48);
        testDirAFile3 = touch(testDirAFile3);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileUpdate_literalMutationString241__56 = listener.getChangedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString241__56);
        testDirAFile5 = touch(testDirAFile5);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileUpdate_literalMutationString241__64 = listener.getChangedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString241__64);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString241__5);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString241__26);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString241__28);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString241__30);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString241__32);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString241__34);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString241__36);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString241__37);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString241__38);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString241__39);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString241__40);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString241__48);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString241__56);
    }

    @EnergyTest
    public void testFileUpdate_literalMutationString242() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "dwpauR%h1,");
        boolean o_testFileUpdate_literalMutationString242__5 = testDirA.mkdir();
        Assertions.assertTrue(o_testFileUpdate_literalMutationString242__5);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        File testDirAFile1 = touch(new File(testDirA, "A-file1.java"));
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        File testDirAFile5 = touch(new File(testDirA, "A-file5.java"));
        checkAndNotify();
        boolean o_testFileUpdate_literalMutationString242__26 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString242__26);
        boolean o_testFileUpdate_literalMutationString242__28 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString242__28);
        boolean o_testFileUpdate_literalMutationString242__30 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString242__30);
        boolean o_testFileUpdate_literalMutationString242__32 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString242__32);
        boolean o_testFileUpdate_literalMutationString242__34 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString242__34);
        boolean o_testFileUpdate_literalMutationString242__36 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileUpdate_literalMutationString242__36);
        boolean o_testFileUpdate_literalMutationString242__37 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileUpdate_literalMutationString242__37);
        boolean o_testFileUpdate_literalMutationString242__38 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileUpdate_literalMutationString242__38);
        boolean o_testFileUpdate_literalMutationString242__39 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileUpdate_literalMutationString242__39);
        boolean o_testFileUpdate_literalMutationString242__40 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileUpdate_literalMutationString242__40);
        checkAndNotify();
        testDirAFile1 = touch(testDirAFile1);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileUpdate_literalMutationString242__48 = listener.getChangedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString242__48);
        testDirAFile3 = touch(testDirAFile3);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileUpdate_literalMutationString242__56 = listener.getChangedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString242__56);
        testDirAFile5 = touch(testDirAFile5);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileUpdate_literalMutationString242__64 = listener.getChangedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString242__64);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString242__5);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString242__26);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString242__28);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString242__30);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString242__32);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString242__34);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString242__36);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString242__37);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString242__38);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString242__39);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString242__40);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString242__48);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString242__56);
    }

    @EnergyTest
    public void testFileUpdate_literalMutationString243() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "test-di*r-A");
        boolean o_testFileUpdate_literalMutationString243__5 = testDirA.mkdir();
        Assertions.assertTrue(o_testFileUpdate_literalMutationString243__5);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        File testDirAFile1 = touch(new File(testDirA, "A-file1.java"));
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        File testDirAFile5 = touch(new File(testDirA, "A-file5.java"));
        checkAndNotify();
        boolean o_testFileUpdate_literalMutationString243__26 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString243__26);
        boolean o_testFileUpdate_literalMutationString243__28 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString243__28);
        boolean o_testFileUpdate_literalMutationString243__30 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString243__30);
        boolean o_testFileUpdate_literalMutationString243__32 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString243__32);
        boolean o_testFileUpdate_literalMutationString243__34 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString243__34);
        boolean o_testFileUpdate_literalMutationString243__36 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileUpdate_literalMutationString243__36);
        boolean o_testFileUpdate_literalMutationString243__37 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileUpdate_literalMutationString243__37);
        boolean o_testFileUpdate_literalMutationString243__38 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileUpdate_literalMutationString243__38);
        boolean o_testFileUpdate_literalMutationString243__39 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileUpdate_literalMutationString243__39);
        boolean o_testFileUpdate_literalMutationString243__40 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileUpdate_literalMutationString243__40);
        checkAndNotify();
        testDirAFile1 = touch(testDirAFile1);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileUpdate_literalMutationString243__48 = listener.getChangedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString243__48);
        testDirAFile3 = touch(testDirAFile3);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileUpdate_literalMutationString243__56 = listener.getChangedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString243__56);
        testDirAFile5 = touch(testDirAFile5);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileUpdate_literalMutationString243__64 = listener.getChangedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString243__64);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString243__5);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString243__26);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString243__28);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString243__30);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString243__32);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString243__34);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString243__36);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString243__37);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString243__38);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString243__39);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString243__40);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString243__48);
        Assertions.assertTrue(o_testFileUpdate_literalMutationString243__56);
    }

    @EnergyTest
    public void testFileDelete() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "test-dir-A");
        boolean o_testFileDelete__4 = testDirA.mkdir();
        Assertions.assertTrue(o_testFileDelete__4);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        final File testDirAFile1 = touch(new File(testDirA, "A-file1.java"));
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        final File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        final File testDirAFile5 = touch(new File(testDirA, "A-file5.java"));
        boolean o_testFileDelete__24 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileDelete__24);
        boolean o_testFileDelete__25 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileDelete__25);
        boolean o_testFileDelete__26 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileDelete__26);
        boolean o_testFileDelete__27 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileDelete__27);
        boolean o_testFileDelete__28 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileDelete__28);
        checkAndNotify();
        boolean o_testFileDelete__30 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileDelete__30);
        boolean o_testFileDelete__32 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileDelete__32);
        boolean o_testFileDelete__34 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileDelete__34);
        boolean o_testFileDelete__36 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileDelete__36);
        boolean o_testFileDelete__38 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileDelete__38);
        checkAndNotify();
        boolean o_testFileDelete__41 = FileUtils.deleteQuietly(testDirAFile1);
        Assertions.assertTrue(o_testFileDelete__41);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileDelete__46 = testDirAFile1.exists();
        Assertions.assertFalse(o_testFileDelete__46);
        boolean o_testFileDelete__47 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileDelete__47);
        boolean o_testFileDelete__49 = FileUtils.deleteQuietly(testDirAFile3);
        Assertions.assertTrue(o_testFileDelete__49);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileDelete__54 = testDirAFile3.exists();
        Assertions.assertFalse(o_testFileDelete__54);
        boolean o_testFileDelete__55 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileDelete__55);
        boolean o_testFileDelete__57 = FileUtils.deleteQuietly(testDirAFile5);
        Assertions.assertTrue(o_testFileDelete__57);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileDelete__62 = testDirAFile5.exists();
        Assertions.assertFalse(o_testFileDelete__62);
        boolean o_testFileDelete__63 = listener.getDeletedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileDelete__63);
        Assertions.assertTrue(o_testFileDelete__4);
        Assertions.assertTrue(o_testFileDelete__24);
        Assertions.assertTrue(o_testFileDelete__25);
        Assertions.assertTrue(o_testFileDelete__26);
        Assertions.assertTrue(o_testFileDelete__27);
        Assertions.assertTrue(o_testFileDelete__28);
        Assertions.assertTrue(o_testFileDelete__30);
        Assertions.assertTrue(o_testFileDelete__32);
        Assertions.assertTrue(o_testFileDelete__34);
        Assertions.assertTrue(o_testFileDelete__36);
        Assertions.assertTrue(o_testFileDelete__38);
        Assertions.assertTrue(o_testFileDelete__41);
        Assertions.assertFalse(o_testFileDelete__46);
        Assertions.assertTrue(o_testFileDelete__47);
        Assertions.assertTrue(o_testFileDelete__49);
        Assertions.assertFalse(o_testFileDelete__54);
        Assertions.assertTrue(o_testFileDelete__55);
        Assertions.assertTrue(o_testFileDelete__57);
        Assertions.assertFalse(o_testFileDelete__62);
    }

    @EnergyTest
    public void testFileDelete_literalMutationString214() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "");
        boolean o_testFileDelete_literalMutationString214__5 = testDirA.mkdir();
        Assertions.assertFalse(o_testFileDelete_literalMutationString214__5);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        final File testDirAFile1 = touch(new File(testDirA, "A-file1.java"));
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        final File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        final File testDirAFile5 = touch(new File(testDirA, "A-file5.java"));
        boolean o_testFileDelete_literalMutationString214__25 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileDelete_literalMutationString214__25);
        boolean o_testFileDelete_literalMutationString214__26 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileDelete_literalMutationString214__26);
        boolean o_testFileDelete_literalMutationString214__27 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileDelete_literalMutationString214__27);
        boolean o_testFileDelete_literalMutationString214__28 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileDelete_literalMutationString214__28);
        boolean o_testFileDelete_literalMutationString214__29 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileDelete_literalMutationString214__29);
        checkAndNotify();
        boolean o_testFileDelete_literalMutationString214__31 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileDelete_literalMutationString214__31);
        boolean o_testFileDelete_literalMutationString214__33 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileDelete_literalMutationString214__33);
        boolean o_testFileDelete_literalMutationString214__35 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileDelete_literalMutationString214__35);
        boolean o_testFileDelete_literalMutationString214__37 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileDelete_literalMutationString214__37);
        boolean o_testFileDelete_literalMutationString214__39 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileDelete_literalMutationString214__39);
        checkAndNotify();
        boolean o_testFileDelete_literalMutationString214__42 = FileUtils.deleteQuietly(testDirAFile1);
        Assertions.assertTrue(o_testFileDelete_literalMutationString214__42);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileDelete_literalMutationString214__47 = testDirAFile1.exists();
        Assertions.assertFalse(o_testFileDelete_literalMutationString214__47);
        boolean o_testFileDelete_literalMutationString214__48 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileDelete_literalMutationString214__48);
        boolean o_testFileDelete_literalMutationString214__50 = FileUtils.deleteQuietly(testDirAFile3);
        Assertions.assertTrue(o_testFileDelete_literalMutationString214__50);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileDelete_literalMutationString214__55 = testDirAFile3.exists();
        Assertions.assertFalse(o_testFileDelete_literalMutationString214__55);
        boolean o_testFileDelete_literalMutationString214__56 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileDelete_literalMutationString214__56);
        boolean o_testFileDelete_literalMutationString214__58 = FileUtils.deleteQuietly(testDirAFile5);
        Assertions.assertTrue(o_testFileDelete_literalMutationString214__58);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileDelete_literalMutationString214__63 = testDirAFile5.exists();
        Assertions.assertFalse(o_testFileDelete_literalMutationString214__63);
        boolean o_testFileDelete_literalMutationString214__64 = listener.getDeletedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileDelete_literalMutationString214__64);
        Assertions.assertFalse(o_testFileDelete_literalMutationString214__5);
        Assertions.assertTrue(o_testFileDelete_literalMutationString214__25);
        Assertions.assertTrue(o_testFileDelete_literalMutationString214__26);
        Assertions.assertTrue(o_testFileDelete_literalMutationString214__27);
        Assertions.assertTrue(o_testFileDelete_literalMutationString214__28);
        Assertions.assertTrue(o_testFileDelete_literalMutationString214__29);
        Assertions.assertTrue(o_testFileDelete_literalMutationString214__31);
        Assertions.assertTrue(o_testFileDelete_literalMutationString214__33);
        Assertions.assertTrue(o_testFileDelete_literalMutationString214__35);
        Assertions.assertTrue(o_testFileDelete_literalMutationString214__37);
        Assertions.assertTrue(o_testFileDelete_literalMutationString214__39);
        Assertions.assertTrue(o_testFileDelete_literalMutationString214__42);
        Assertions.assertFalse(o_testFileDelete_literalMutationString214__47);
        Assertions.assertTrue(o_testFileDelete_literalMutationString214__48);
        Assertions.assertTrue(o_testFileDelete_literalMutationString214__50);
        Assertions.assertFalse(o_testFileDelete_literalMutationString214__55);
        Assertions.assertTrue(o_testFileDelete_literalMutationString214__56);
        Assertions.assertTrue(o_testFileDelete_literalMutationString214__58);
        Assertions.assertFalse(o_testFileDelete_literalMutationString214__63);
    }

    @EnergyTest
    public void testFileDelete_literalMutationString215() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "Delete");
        boolean o_testFileDelete_literalMutationString215__5 = testDirA.mkdir();
        Assertions.assertTrue(o_testFileDelete_literalMutationString215__5);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        final File testDirAFile1 = touch(new File(testDirA, "A-file1.java"));
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        final File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        final File testDirAFile5 = touch(new File(testDirA, "A-file5.java"));
        boolean o_testFileDelete_literalMutationString215__25 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileDelete_literalMutationString215__25);
        boolean o_testFileDelete_literalMutationString215__26 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileDelete_literalMutationString215__26);
        boolean o_testFileDelete_literalMutationString215__27 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileDelete_literalMutationString215__27);
        boolean o_testFileDelete_literalMutationString215__28 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileDelete_literalMutationString215__28);
        boolean o_testFileDelete_literalMutationString215__29 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileDelete_literalMutationString215__29);
        checkAndNotify();
        boolean o_testFileDelete_literalMutationString215__31 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileDelete_literalMutationString215__31);
        boolean o_testFileDelete_literalMutationString215__33 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileDelete_literalMutationString215__33);
        boolean o_testFileDelete_literalMutationString215__35 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileDelete_literalMutationString215__35);
        boolean o_testFileDelete_literalMutationString215__37 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileDelete_literalMutationString215__37);
        boolean o_testFileDelete_literalMutationString215__39 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileDelete_literalMutationString215__39);
        checkAndNotify();
        boolean o_testFileDelete_literalMutationString215__42 = FileUtils.deleteQuietly(testDirAFile1);
        Assertions.assertTrue(o_testFileDelete_literalMutationString215__42);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileDelete_literalMutationString215__47 = testDirAFile1.exists();
        Assertions.assertFalse(o_testFileDelete_literalMutationString215__47);
        boolean o_testFileDelete_literalMutationString215__48 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileDelete_literalMutationString215__48);
        boolean o_testFileDelete_literalMutationString215__50 = FileUtils.deleteQuietly(testDirAFile3);
        Assertions.assertTrue(o_testFileDelete_literalMutationString215__50);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileDelete_literalMutationString215__55 = testDirAFile3.exists();
        Assertions.assertFalse(o_testFileDelete_literalMutationString215__55);
        boolean o_testFileDelete_literalMutationString215__56 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileDelete_literalMutationString215__56);
        boolean o_testFileDelete_literalMutationString215__58 = FileUtils.deleteQuietly(testDirAFile5);
        Assertions.assertTrue(o_testFileDelete_literalMutationString215__58);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileDelete_literalMutationString215__63 = testDirAFile5.exists();
        Assertions.assertFalse(o_testFileDelete_literalMutationString215__63);
        boolean o_testFileDelete_literalMutationString215__64 = listener.getDeletedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileDelete_literalMutationString215__64);
        Assertions.assertTrue(o_testFileDelete_literalMutationString215__5);
        Assertions.assertTrue(o_testFileDelete_literalMutationString215__25);
        Assertions.assertTrue(o_testFileDelete_literalMutationString215__26);
        Assertions.assertTrue(o_testFileDelete_literalMutationString215__27);
        Assertions.assertTrue(o_testFileDelete_literalMutationString215__28);
        Assertions.assertTrue(o_testFileDelete_literalMutationString215__29);
        Assertions.assertTrue(o_testFileDelete_literalMutationString215__31);
        Assertions.assertTrue(o_testFileDelete_literalMutationString215__33);
        Assertions.assertTrue(o_testFileDelete_literalMutationString215__35);
        Assertions.assertTrue(o_testFileDelete_literalMutationString215__37);
        Assertions.assertTrue(o_testFileDelete_literalMutationString215__39);
        Assertions.assertTrue(o_testFileDelete_literalMutationString215__42);
        Assertions.assertFalse(o_testFileDelete_literalMutationString215__47);
        Assertions.assertTrue(o_testFileDelete_literalMutationString215__48);
        Assertions.assertTrue(o_testFileDelete_literalMutationString215__50);
        Assertions.assertFalse(o_testFileDelete_literalMutationString215__55);
        Assertions.assertTrue(o_testFileDelete_literalMutationString215__56);
        Assertions.assertTrue(o_testFileDelete_literalMutationString215__58);
        Assertions.assertFalse(o_testFileDelete_literalMutationString215__63);
    }

    @EnergyTest
    public void testFileDelete_literalMutationString216() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "-ef&bk*201");
        boolean o_testFileDelete_literalMutationString216__5 = testDirA.mkdir();
        Assertions.assertTrue(o_testFileDelete_literalMutationString216__5);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        final File testDirAFile1 = touch(new File(testDirA, "A-file1.java"));
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        final File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        final File testDirAFile5 = touch(new File(testDirA, "A-file5.java"));
        boolean o_testFileDelete_literalMutationString216__25 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileDelete_literalMutationString216__25);
        boolean o_testFileDelete_literalMutationString216__26 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileDelete_literalMutationString216__26);
        boolean o_testFileDelete_literalMutationString216__27 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileDelete_literalMutationString216__27);
        boolean o_testFileDelete_literalMutationString216__28 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileDelete_literalMutationString216__28);
        boolean o_testFileDelete_literalMutationString216__29 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileDelete_literalMutationString216__29);
        checkAndNotify();
        boolean o_testFileDelete_literalMutationString216__31 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileDelete_literalMutationString216__31);
        boolean o_testFileDelete_literalMutationString216__33 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileDelete_literalMutationString216__33);
        boolean o_testFileDelete_literalMutationString216__35 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileDelete_literalMutationString216__35);
        boolean o_testFileDelete_literalMutationString216__37 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileDelete_literalMutationString216__37);
        boolean o_testFileDelete_literalMutationString216__39 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileDelete_literalMutationString216__39);
        checkAndNotify();
        boolean o_testFileDelete_literalMutationString216__42 = FileUtils.deleteQuietly(testDirAFile1);
        Assertions.assertTrue(o_testFileDelete_literalMutationString216__42);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileDelete_literalMutationString216__47 = testDirAFile1.exists();
        Assertions.assertFalse(o_testFileDelete_literalMutationString216__47);
        boolean o_testFileDelete_literalMutationString216__48 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileDelete_literalMutationString216__48);
        boolean o_testFileDelete_literalMutationString216__50 = FileUtils.deleteQuietly(testDirAFile3);
        Assertions.assertTrue(o_testFileDelete_literalMutationString216__50);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileDelete_literalMutationString216__55 = testDirAFile3.exists();
        Assertions.assertFalse(o_testFileDelete_literalMutationString216__55);
        boolean o_testFileDelete_literalMutationString216__56 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileDelete_literalMutationString216__56);
        boolean o_testFileDelete_literalMutationString216__58 = FileUtils.deleteQuietly(testDirAFile5);
        Assertions.assertTrue(o_testFileDelete_literalMutationString216__58);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileDelete_literalMutationString216__63 = testDirAFile5.exists();
        Assertions.assertFalse(o_testFileDelete_literalMutationString216__63);
        boolean o_testFileDelete_literalMutationString216__64 = listener.getDeletedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileDelete_literalMutationString216__64);
        Assertions.assertTrue(o_testFileDelete_literalMutationString216__5);
        Assertions.assertTrue(o_testFileDelete_literalMutationString216__25);
        Assertions.assertTrue(o_testFileDelete_literalMutationString216__26);
        Assertions.assertTrue(o_testFileDelete_literalMutationString216__27);
        Assertions.assertTrue(o_testFileDelete_literalMutationString216__28);
        Assertions.assertTrue(o_testFileDelete_literalMutationString216__29);
        Assertions.assertTrue(o_testFileDelete_literalMutationString216__31);
        Assertions.assertTrue(o_testFileDelete_literalMutationString216__33);
        Assertions.assertTrue(o_testFileDelete_literalMutationString216__35);
        Assertions.assertTrue(o_testFileDelete_literalMutationString216__37);
        Assertions.assertTrue(o_testFileDelete_literalMutationString216__39);
        Assertions.assertTrue(o_testFileDelete_literalMutationString216__42);
        Assertions.assertFalse(o_testFileDelete_literalMutationString216__47);
        Assertions.assertTrue(o_testFileDelete_literalMutationString216__48);
        Assertions.assertTrue(o_testFileDelete_literalMutationString216__50);
        Assertions.assertFalse(o_testFileDelete_literalMutationString216__55);
        Assertions.assertTrue(o_testFileDelete_literalMutationString216__56);
        Assertions.assertTrue(o_testFileDelete_literalMutationString216__58);
        Assertions.assertFalse(o_testFileDelete_literalMutationString216__63);
    }

    @EnergyTest
    public void testFileDelete_literalMutationString217() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "test-Tdir-A");
        boolean o_testFileDelete_literalMutationString217__5 = testDirA.mkdir();
        Assertions.assertTrue(o_testFileDelete_literalMutationString217__5);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        final File testDirAFile1 = touch(new File(testDirA, "A-file1.java"));
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        final File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        final File testDirAFile5 = touch(new File(testDirA, "A-file5.java"));
        boolean o_testFileDelete_literalMutationString217__25 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileDelete_literalMutationString217__25);
        boolean o_testFileDelete_literalMutationString217__26 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileDelete_literalMutationString217__26);
        boolean o_testFileDelete_literalMutationString217__27 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileDelete_literalMutationString217__27);
        boolean o_testFileDelete_literalMutationString217__28 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileDelete_literalMutationString217__28);
        boolean o_testFileDelete_literalMutationString217__29 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileDelete_literalMutationString217__29);
        checkAndNotify();
        boolean o_testFileDelete_literalMutationString217__31 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileDelete_literalMutationString217__31);
        boolean o_testFileDelete_literalMutationString217__33 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileDelete_literalMutationString217__33);
        boolean o_testFileDelete_literalMutationString217__35 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileDelete_literalMutationString217__35);
        boolean o_testFileDelete_literalMutationString217__37 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileDelete_literalMutationString217__37);
        boolean o_testFileDelete_literalMutationString217__39 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileDelete_literalMutationString217__39);
        checkAndNotify();
        boolean o_testFileDelete_literalMutationString217__42 = FileUtils.deleteQuietly(testDirAFile1);
        Assertions.assertTrue(o_testFileDelete_literalMutationString217__42);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileDelete_literalMutationString217__47 = testDirAFile1.exists();
        Assertions.assertFalse(o_testFileDelete_literalMutationString217__47);
        boolean o_testFileDelete_literalMutationString217__48 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileDelete_literalMutationString217__48);
        boolean o_testFileDelete_literalMutationString217__50 = FileUtils.deleteQuietly(testDirAFile3);
        Assertions.assertTrue(o_testFileDelete_literalMutationString217__50);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileDelete_literalMutationString217__55 = testDirAFile3.exists();
        Assertions.assertFalse(o_testFileDelete_literalMutationString217__55);
        boolean o_testFileDelete_literalMutationString217__56 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileDelete_literalMutationString217__56);
        boolean o_testFileDelete_literalMutationString217__58 = FileUtils.deleteQuietly(testDirAFile5);
        Assertions.assertTrue(o_testFileDelete_literalMutationString217__58);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileDelete_literalMutationString217__63 = testDirAFile5.exists();
        Assertions.assertFalse(o_testFileDelete_literalMutationString217__63);
        boolean o_testFileDelete_literalMutationString217__64 = listener.getDeletedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileDelete_literalMutationString217__64);
        Assertions.assertTrue(o_testFileDelete_literalMutationString217__5);
        Assertions.assertTrue(o_testFileDelete_literalMutationString217__25);
        Assertions.assertTrue(o_testFileDelete_literalMutationString217__26);
        Assertions.assertTrue(o_testFileDelete_literalMutationString217__27);
        Assertions.assertTrue(o_testFileDelete_literalMutationString217__28);
        Assertions.assertTrue(o_testFileDelete_literalMutationString217__29);
        Assertions.assertTrue(o_testFileDelete_literalMutationString217__31);
        Assertions.assertTrue(o_testFileDelete_literalMutationString217__33);
        Assertions.assertTrue(o_testFileDelete_literalMutationString217__35);
        Assertions.assertTrue(o_testFileDelete_literalMutationString217__37);
        Assertions.assertTrue(o_testFileDelete_literalMutationString217__39);
        Assertions.assertTrue(o_testFileDelete_literalMutationString217__42);
        Assertions.assertFalse(o_testFileDelete_literalMutationString217__47);
        Assertions.assertTrue(o_testFileDelete_literalMutationString217__48);
        Assertions.assertTrue(o_testFileDelete_literalMutationString217__50);
        Assertions.assertFalse(o_testFileDelete_literalMutationString217__55);
        Assertions.assertTrue(o_testFileDelete_literalMutationString217__56);
        Assertions.assertTrue(o_testFileDelete_literalMutationString217__58);
        Assertions.assertFalse(o_testFileDelete_literalMutationString217__63);
    }

    @EnergyTest
    public void testFileDelete_literalMutationString218() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "test^dir-A");
        boolean o_testFileDelete_literalMutationString218__5 = testDirA.mkdir();
        Assertions.assertTrue(o_testFileDelete_literalMutationString218__5);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        final File testDirAFile1 = touch(new File(testDirA, "A-file1.java"));
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        final File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        final File testDirAFile5 = touch(new File(testDirA, "A-file5.java"));
        boolean o_testFileDelete_literalMutationString218__25 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileDelete_literalMutationString218__25);
        boolean o_testFileDelete_literalMutationString218__26 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileDelete_literalMutationString218__26);
        boolean o_testFileDelete_literalMutationString218__27 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileDelete_literalMutationString218__27);
        boolean o_testFileDelete_literalMutationString218__28 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileDelete_literalMutationString218__28);
        boolean o_testFileDelete_literalMutationString218__29 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileDelete_literalMutationString218__29);
        checkAndNotify();
        boolean o_testFileDelete_literalMutationString218__31 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileDelete_literalMutationString218__31);
        boolean o_testFileDelete_literalMutationString218__33 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileDelete_literalMutationString218__33);
        boolean o_testFileDelete_literalMutationString218__35 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileDelete_literalMutationString218__35);
        boolean o_testFileDelete_literalMutationString218__37 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileDelete_literalMutationString218__37);
        boolean o_testFileDelete_literalMutationString218__39 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileDelete_literalMutationString218__39);
        checkAndNotify();
        boolean o_testFileDelete_literalMutationString218__42 = FileUtils.deleteQuietly(testDirAFile1);
        Assertions.assertTrue(o_testFileDelete_literalMutationString218__42);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileDelete_literalMutationString218__47 = testDirAFile1.exists();
        Assertions.assertFalse(o_testFileDelete_literalMutationString218__47);
        boolean o_testFileDelete_literalMutationString218__48 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileDelete_literalMutationString218__48);
        boolean o_testFileDelete_literalMutationString218__50 = FileUtils.deleteQuietly(testDirAFile3);
        Assertions.assertTrue(o_testFileDelete_literalMutationString218__50);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileDelete_literalMutationString218__55 = testDirAFile3.exists();
        Assertions.assertFalse(o_testFileDelete_literalMutationString218__55);
        boolean o_testFileDelete_literalMutationString218__56 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileDelete_literalMutationString218__56);
        boolean o_testFileDelete_literalMutationString218__58 = FileUtils.deleteQuietly(testDirAFile5);
        Assertions.assertTrue(o_testFileDelete_literalMutationString218__58);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileDelete_literalMutationString218__63 = testDirAFile5.exists();
        Assertions.assertFalse(o_testFileDelete_literalMutationString218__63);
        boolean o_testFileDelete_literalMutationString218__64 = listener.getDeletedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileDelete_literalMutationString218__64);
        Assertions.assertTrue(o_testFileDelete_literalMutationString218__5);
        Assertions.assertTrue(o_testFileDelete_literalMutationString218__25);
        Assertions.assertTrue(o_testFileDelete_literalMutationString218__26);
        Assertions.assertTrue(o_testFileDelete_literalMutationString218__27);
        Assertions.assertTrue(o_testFileDelete_literalMutationString218__28);
        Assertions.assertTrue(o_testFileDelete_literalMutationString218__29);
        Assertions.assertTrue(o_testFileDelete_literalMutationString218__31);
        Assertions.assertTrue(o_testFileDelete_literalMutationString218__33);
        Assertions.assertTrue(o_testFileDelete_literalMutationString218__35);
        Assertions.assertTrue(o_testFileDelete_literalMutationString218__37);
        Assertions.assertTrue(o_testFileDelete_literalMutationString218__39);
        Assertions.assertTrue(o_testFileDelete_literalMutationString218__42);
        Assertions.assertFalse(o_testFileDelete_literalMutationString218__47);
        Assertions.assertTrue(o_testFileDelete_literalMutationString218__48);
        Assertions.assertTrue(o_testFileDelete_literalMutationString218__50);
        Assertions.assertFalse(o_testFileDelete_literalMutationString218__55);
        Assertions.assertTrue(o_testFileDelete_literalMutationString218__56);
        Assertions.assertTrue(o_testFileDelete_literalMutationString218__58);
        Assertions.assertFalse(o_testFileDelete_literalMutationString218__63);
    }

    @EnergyTest
    public void testFileDelete_literalMutationString219() throws IOException {
        checkAndNotify();
        File testDirA = new File(testDir, "test-dirA");
        boolean o_testFileDelete_literalMutationString219__5 = testDirA.mkdir();
        Assertions.assertTrue(o_testFileDelete_literalMutationString219__5);
        testDir = touch(testDir);
        testDirA = touch(testDirA);
        final File testDirAFile1 = touch(new File(testDirA, "A-file1.java"));
        final File testDirAFile2 = touch(new File(testDirA, "A-file2.java"));
        final File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        final File testDirAFile4 = touch(new File(testDirA, "A-file4.java"));
        final File testDirAFile5 = touch(new File(testDirA, "A-file5.java"));
        boolean o_testFileDelete_literalMutationString219__25 = testDirAFile1.exists();
        Assertions.assertTrue(o_testFileDelete_literalMutationString219__25);
        boolean o_testFileDelete_literalMutationString219__26 = testDirAFile2.exists();
        Assertions.assertTrue(o_testFileDelete_literalMutationString219__26);
        boolean o_testFileDelete_literalMutationString219__27 = testDirAFile3.exists();
        Assertions.assertTrue(o_testFileDelete_literalMutationString219__27);
        boolean o_testFileDelete_literalMutationString219__28 = testDirAFile4.exists();
        Assertions.assertTrue(o_testFileDelete_literalMutationString219__28);
        boolean o_testFileDelete_literalMutationString219__29 = testDirAFile5.exists();
        Assertions.assertTrue(o_testFileDelete_literalMutationString219__29);
        checkAndNotify();
        boolean o_testFileDelete_literalMutationString219__31 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileDelete_literalMutationString219__31);
        boolean o_testFileDelete_literalMutationString219__33 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertTrue(o_testFileDelete_literalMutationString219__33);
        boolean o_testFileDelete_literalMutationString219__35 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileDelete_literalMutationString219__35);
        boolean o_testFileDelete_literalMutationString219__37 = listener.getCreatedFiles().contains(testDirAFile4);
        Assertions.assertTrue(o_testFileDelete_literalMutationString219__37);
        boolean o_testFileDelete_literalMutationString219__39 = listener.getCreatedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileDelete_literalMutationString219__39);
        checkAndNotify();
        boolean o_testFileDelete_literalMutationString219__42 = FileUtils.deleteQuietly(testDirAFile1);
        Assertions.assertTrue(o_testFileDelete_literalMutationString219__42);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileDelete_literalMutationString219__47 = testDirAFile1.exists();
        Assertions.assertFalse(o_testFileDelete_literalMutationString219__47);
        boolean o_testFileDelete_literalMutationString219__48 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testFileDelete_literalMutationString219__48);
        boolean o_testFileDelete_literalMutationString219__50 = FileUtils.deleteQuietly(testDirAFile3);
        Assertions.assertTrue(o_testFileDelete_literalMutationString219__50);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileDelete_literalMutationString219__55 = testDirAFile3.exists();
        Assertions.assertFalse(o_testFileDelete_literalMutationString219__55);
        boolean o_testFileDelete_literalMutationString219__56 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testFileDelete_literalMutationString219__56);
        boolean o_testFileDelete_literalMutationString219__58 = FileUtils.deleteQuietly(testDirAFile5);
        Assertions.assertTrue(o_testFileDelete_literalMutationString219__58);
        testDirA = touch(testDirA);
        checkAndNotify();
        boolean o_testFileDelete_literalMutationString219__63 = testDirAFile5.exists();
        Assertions.assertFalse(o_testFileDelete_literalMutationString219__63);
        boolean o_testFileDelete_literalMutationString219__64 = listener.getDeletedFiles().contains(testDirAFile5);
        Assertions.assertTrue(o_testFileDelete_literalMutationString219__64);
        Assertions.assertTrue(o_testFileDelete_literalMutationString219__5);
        Assertions.assertTrue(o_testFileDelete_literalMutationString219__25);
        Assertions.assertTrue(o_testFileDelete_literalMutationString219__26);
        Assertions.assertTrue(o_testFileDelete_literalMutationString219__27);
        Assertions.assertTrue(o_testFileDelete_literalMutationString219__28);
        Assertions.assertTrue(o_testFileDelete_literalMutationString219__29);
        Assertions.assertTrue(o_testFileDelete_literalMutationString219__31);
        Assertions.assertTrue(o_testFileDelete_literalMutationString219__33);
        Assertions.assertTrue(o_testFileDelete_literalMutationString219__35);
        Assertions.assertTrue(o_testFileDelete_literalMutationString219__37);
        Assertions.assertTrue(o_testFileDelete_literalMutationString219__39);
        Assertions.assertTrue(o_testFileDelete_literalMutationString219__42);
        Assertions.assertFalse(o_testFileDelete_literalMutationString219__47);
        Assertions.assertTrue(o_testFileDelete_literalMutationString219__48);
        Assertions.assertTrue(o_testFileDelete_literalMutationString219__50);
        Assertions.assertFalse(o_testFileDelete_literalMutationString219__55);
        Assertions.assertTrue(o_testFileDelete_literalMutationString219__56);
        Assertions.assertTrue(o_testFileDelete_literalMutationString219__58);
        Assertions.assertFalse(o_testFileDelete_literalMutationString219__63);
    }

    @EnergyTest
    public void testObserveSingleFile() throws IOException {
        final File testDirA = new File(testDir, "test-dir-A");
        File testDirAFile1 = new File(testDirA, "A-file1.java");
        boolean o_testObserveSingleFile__5 = testDirA.mkdir();
        Assertions.assertTrue(o_testObserveSingleFile__5);
        final FileFilter nameFilter = FileFilterUtils.nameFileFilter(testDirAFile1.getName());
        Assertions.assertEquals("NameFileFilter(A-file1.java)", ((NameFileFilter) (nameFilter)).toString());
        checkAndNotify();
        boolean o_testObserveSingleFile__10 = testDirAFile1.exists();
        Assertions.assertFalse(o_testObserveSingleFile__10);
        testDirAFile1 = touch(testDirAFile1);
        File testDirAFile2 = touch(new File(testDirA, "A-file2.txt"));
        File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        boolean o_testObserveSingleFile__22 = testDirAFile1.exists();
        Assertions.assertTrue(o_testObserveSingleFile__22);
        boolean o_testObserveSingleFile__23 = testDirAFile2.exists();
        Assertions.assertTrue(o_testObserveSingleFile__23);
        boolean o_testObserveSingleFile__24 = testDirAFile3.exists();
        Assertions.assertTrue(o_testObserveSingleFile__24);
        checkAndNotify();
        boolean o_testObserveSingleFile__26 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile__26);
        boolean o_testObserveSingleFile__28 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile__28);
        boolean o_testObserveSingleFile__30 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile__30);
        testDirAFile1 = touch(testDirAFile1);
        testDirAFile2 = touch(testDirAFile2);
        testDirAFile3 = touch(testDirAFile3);
        checkAndNotify();
        boolean o_testObserveSingleFile__40 = listener.getChangedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile__40);
        boolean o_testObserveSingleFile__42 = listener.getChangedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile__42);
        boolean o_testObserveSingleFile__44 = listener.getChangedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile__44);
        boolean o_testObserveSingleFile__46 = FileUtils.deleteQuietly(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile__46);
        boolean o_testObserveSingleFile__48 = FileUtils.deleteQuietly(testDirAFile2);
        Assertions.assertTrue(o_testObserveSingleFile__48);
        boolean o_testObserveSingleFile__49 = FileUtils.deleteQuietly(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile__49);
        boolean o_testObserveSingleFile__50 = testDirAFile1.exists();
        Assertions.assertFalse(o_testObserveSingleFile__50);
        boolean o_testObserveSingleFile__51 = testDirAFile2.exists();
        Assertions.assertFalse(o_testObserveSingleFile__51);
        boolean o_testObserveSingleFile__52 = testDirAFile3.exists();
        Assertions.assertFalse(o_testObserveSingleFile__52);
        checkAndNotify();
        boolean o_testObserveSingleFile__54 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile__54);
        boolean o_testObserveSingleFile__56 = listener.getDeletedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile__56);
        boolean o_testObserveSingleFile__58 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile__58);
        Assertions.assertTrue(o_testObserveSingleFile__5);
        Assertions.assertEquals("NameFileFilter(A-file1.java)", ((NameFileFilter) (nameFilter)).toString());
        Assertions.assertFalse(o_testObserveSingleFile__10);
        Assertions.assertTrue(o_testObserveSingleFile__22);
        Assertions.assertTrue(o_testObserveSingleFile__23);
        Assertions.assertTrue(o_testObserveSingleFile__24);
        Assertions.assertTrue(o_testObserveSingleFile__26);
        Assertions.assertFalse(o_testObserveSingleFile__28);
        Assertions.assertTrue(o_testObserveSingleFile__30);
        Assertions.assertTrue(o_testObserveSingleFile__40);
        Assertions.assertFalse(o_testObserveSingleFile__42);
        Assertions.assertTrue(o_testObserveSingleFile__44);
        Assertions.assertTrue(o_testObserveSingleFile__46);
        Assertions.assertTrue(o_testObserveSingleFile__48);
        Assertions.assertTrue(o_testObserveSingleFile__49);
        Assertions.assertFalse(o_testObserveSingleFile__50);
        Assertions.assertFalse(o_testObserveSingleFile__51);
        Assertions.assertFalse(o_testObserveSingleFile__52);
        Assertions.assertTrue(o_testObserveSingleFile__54);
        Assertions.assertFalse(o_testObserveSingleFile__56);
    }

    @EnergyTest
    public void testObserveSingleFile_literalMutationString262() throws IOException {
        final File testDirA = new File(testDir, "teat-dir-A");
        File testDirAFile1 = new File(testDirA, "A-file1.java");
        boolean o_testObserveSingleFile_literalMutationString262__6 = testDirA.mkdir();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString262__6);
        final FileFilter nameFilter = FileFilterUtils.nameFileFilter(testDirAFile1.getName());
        Assertions.assertEquals("NameFileFilter(A-file1.java)", ((NameFileFilter) (nameFilter)).toString());
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString262__11 = testDirAFile1.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString262__11);
        testDirAFile1 = touch(testDirAFile1);
        File testDirAFile2 = touch(new File(testDirA, "A-file2.txt"));
        File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        boolean o_testObserveSingleFile_literalMutationString262__23 = testDirAFile1.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString262__23);
        boolean o_testObserveSingleFile_literalMutationString262__24 = testDirAFile2.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString262__24);
        boolean o_testObserveSingleFile_literalMutationString262__25 = testDirAFile3.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString262__25);
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString262__27 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString262__27);
        boolean o_testObserveSingleFile_literalMutationString262__29 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString262__29);
        boolean o_testObserveSingleFile_literalMutationString262__31 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString262__31);
        testDirAFile1 = touch(testDirAFile1);
        testDirAFile2 = touch(testDirAFile2);
        testDirAFile3 = touch(testDirAFile3);
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString262__41 = listener.getChangedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString262__41);
        boolean o_testObserveSingleFile_literalMutationString262__43 = listener.getChangedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString262__43);
        boolean o_testObserveSingleFile_literalMutationString262__45 = listener.getChangedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString262__45);
        boolean o_testObserveSingleFile_literalMutationString262__47 = FileUtils.deleteQuietly(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString262__47);
        boolean o_testObserveSingleFile_literalMutationString262__49 = FileUtils.deleteQuietly(testDirAFile2);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString262__49);
        boolean o_testObserveSingleFile_literalMutationString262__50 = FileUtils.deleteQuietly(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString262__50);
        boolean o_testObserveSingleFile_literalMutationString262__51 = testDirAFile1.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString262__51);
        boolean o_testObserveSingleFile_literalMutationString262__52 = testDirAFile2.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString262__52);
        boolean o_testObserveSingleFile_literalMutationString262__53 = testDirAFile3.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString262__53);
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString262__55 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString262__55);
        boolean o_testObserveSingleFile_literalMutationString262__57 = listener.getDeletedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString262__57);
        boolean o_testObserveSingleFile_literalMutationString262__59 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString262__59);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString262__6);
        Assertions.assertEquals("NameFileFilter(A-file1.java)", ((NameFileFilter) (nameFilter)).toString());
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString262__11);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString262__23);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString262__24);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString262__25);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString262__27);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString262__29);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString262__31);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString262__41);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString262__43);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString262__45);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString262__47);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString262__49);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString262__50);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString262__51);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString262__52);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString262__53);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString262__55);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString262__57);
    }

    @EnergyTest
    public void testObserveSingleFile_literalMutationString263() throws IOException {
        final File testDirA = new File(testDir, "");
        File testDirAFile1 = new File(testDirA, "A-file1.java");
        boolean o_testObserveSingleFile_literalMutationString263__6 = testDirA.mkdir();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString263__6);
        final FileFilter nameFilter = FileFilterUtils.nameFileFilter(testDirAFile1.getName());
        Assertions.assertEquals("NameFileFilter(A-file1.java)", ((NameFileFilter) (nameFilter)).toString());
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString263__11 = testDirAFile1.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString263__11);
        testDirAFile1 = touch(testDirAFile1);
        File testDirAFile2 = touch(new File(testDirA, "A-file2.txt"));
        File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        boolean o_testObserveSingleFile_literalMutationString263__23 = testDirAFile1.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString263__23);
        boolean o_testObserveSingleFile_literalMutationString263__24 = testDirAFile2.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString263__24);
        boolean o_testObserveSingleFile_literalMutationString263__25 = testDirAFile3.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString263__25);
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString263__27 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString263__27);
        boolean o_testObserveSingleFile_literalMutationString263__29 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString263__29);
        boolean o_testObserveSingleFile_literalMutationString263__31 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString263__31);
        testDirAFile1 = touch(testDirAFile1);
        testDirAFile2 = touch(testDirAFile2);
        testDirAFile3 = touch(testDirAFile3);
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString263__41 = listener.getChangedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString263__41);
        boolean o_testObserveSingleFile_literalMutationString263__43 = listener.getChangedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString263__43);
        boolean o_testObserveSingleFile_literalMutationString263__45 = listener.getChangedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString263__45);
        boolean o_testObserveSingleFile_literalMutationString263__47 = FileUtils.deleteQuietly(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString263__47);
        boolean o_testObserveSingleFile_literalMutationString263__49 = FileUtils.deleteQuietly(testDirAFile2);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString263__49);
        boolean o_testObserveSingleFile_literalMutationString263__50 = FileUtils.deleteQuietly(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString263__50);
        boolean o_testObserveSingleFile_literalMutationString263__51 = testDirAFile1.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString263__51);
        boolean o_testObserveSingleFile_literalMutationString263__52 = testDirAFile2.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString263__52);
        boolean o_testObserveSingleFile_literalMutationString263__53 = testDirAFile3.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString263__53);
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString263__55 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString263__55);
        boolean o_testObserveSingleFile_literalMutationString263__57 = listener.getDeletedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString263__57);
        boolean o_testObserveSingleFile_literalMutationString263__59 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString263__59);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString263__6);
        Assertions.assertEquals("NameFileFilter(A-file1.java)", ((NameFileFilter) (nameFilter)).toString());
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString263__11);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString263__23);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString263__24);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString263__25);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString263__27);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString263__29);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString263__31);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString263__41);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString263__43);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString263__45);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString263__47);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString263__49);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString263__50);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString263__51);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString263__52);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString263__53);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString263__55);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString263__57);
    }

    @EnergyTest
    public void testObserveSingleFile_literalMutationString264() throws IOException {
        final File testDirA = new File(testDir, "Delete");
        File testDirAFile1 = new File(testDirA, "A-file1.java");
        boolean o_testObserveSingleFile_literalMutationString264__6 = testDirA.mkdir();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString264__6);
        final FileFilter nameFilter = FileFilterUtils.nameFileFilter(testDirAFile1.getName());
        Assertions.assertEquals("NameFileFilter(A-file1.java)", ((NameFileFilter) (nameFilter)).toString());
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString264__11 = testDirAFile1.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString264__11);
        testDirAFile1 = touch(testDirAFile1);
        File testDirAFile2 = touch(new File(testDirA, "A-file2.txt"));
        File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        boolean o_testObserveSingleFile_literalMutationString264__23 = testDirAFile1.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString264__23);
        boolean o_testObserveSingleFile_literalMutationString264__24 = testDirAFile2.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString264__24);
        boolean o_testObserveSingleFile_literalMutationString264__25 = testDirAFile3.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString264__25);
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString264__27 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString264__27);
        boolean o_testObserveSingleFile_literalMutationString264__29 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString264__29);
        boolean o_testObserveSingleFile_literalMutationString264__31 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString264__31);
        testDirAFile1 = touch(testDirAFile1);
        testDirAFile2 = touch(testDirAFile2);
        testDirAFile3 = touch(testDirAFile3);
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString264__41 = listener.getChangedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString264__41);
        boolean o_testObserveSingleFile_literalMutationString264__43 = listener.getChangedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString264__43);
        boolean o_testObserveSingleFile_literalMutationString264__45 = listener.getChangedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString264__45);
        boolean o_testObserveSingleFile_literalMutationString264__47 = FileUtils.deleteQuietly(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString264__47);
        boolean o_testObserveSingleFile_literalMutationString264__49 = FileUtils.deleteQuietly(testDirAFile2);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString264__49);
        boolean o_testObserveSingleFile_literalMutationString264__50 = FileUtils.deleteQuietly(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString264__50);
        boolean o_testObserveSingleFile_literalMutationString264__51 = testDirAFile1.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString264__51);
        boolean o_testObserveSingleFile_literalMutationString264__52 = testDirAFile2.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString264__52);
        boolean o_testObserveSingleFile_literalMutationString264__53 = testDirAFile3.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString264__53);
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString264__55 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString264__55);
        boolean o_testObserveSingleFile_literalMutationString264__57 = listener.getDeletedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString264__57);
        boolean o_testObserveSingleFile_literalMutationString264__59 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString264__59);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString264__6);
        Assertions.assertEquals("NameFileFilter(A-file1.java)", ((NameFileFilter) (nameFilter)).toString());
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString264__11);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString264__23);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString264__24);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString264__25);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString264__27);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString264__29);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString264__31);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString264__41);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString264__43);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString264__45);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString264__47);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString264__49);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString264__50);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString264__51);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString264__52);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString264__53);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString264__55);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString264__57);
    }

    @EnergyTest
    public void testObserveSingleFile_literalMutationString265() throws IOException {
        final File testDirA = new File(testDir, "tes-dir-A");
        File testDirAFile1 = new File(testDirA, "A-file1.java");
        boolean o_testObserveSingleFile_literalMutationString265__6 = testDirA.mkdir();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString265__6);
        final FileFilter nameFilter = FileFilterUtils.nameFileFilter(testDirAFile1.getName());
        Assertions.assertEquals("NameFileFilter(A-file1.java)", ((NameFileFilter) (nameFilter)).toString());
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString265__11 = testDirAFile1.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString265__11);
        testDirAFile1 = touch(testDirAFile1);
        File testDirAFile2 = touch(new File(testDirA, "A-file2.txt"));
        File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        boolean o_testObserveSingleFile_literalMutationString265__23 = testDirAFile1.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString265__23);
        boolean o_testObserveSingleFile_literalMutationString265__24 = testDirAFile2.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString265__24);
        boolean o_testObserveSingleFile_literalMutationString265__25 = testDirAFile3.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString265__25);
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString265__27 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString265__27);
        boolean o_testObserveSingleFile_literalMutationString265__29 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString265__29);
        boolean o_testObserveSingleFile_literalMutationString265__31 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString265__31);
        testDirAFile1 = touch(testDirAFile1);
        testDirAFile2 = touch(testDirAFile2);
        testDirAFile3 = touch(testDirAFile3);
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString265__41 = listener.getChangedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString265__41);
        boolean o_testObserveSingleFile_literalMutationString265__43 = listener.getChangedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString265__43);
        boolean o_testObserveSingleFile_literalMutationString265__45 = listener.getChangedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString265__45);
        boolean o_testObserveSingleFile_literalMutationString265__47 = FileUtils.deleteQuietly(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString265__47);
        boolean o_testObserveSingleFile_literalMutationString265__49 = FileUtils.deleteQuietly(testDirAFile2);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString265__49);
        boolean o_testObserveSingleFile_literalMutationString265__50 = FileUtils.deleteQuietly(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString265__50);
        boolean o_testObserveSingleFile_literalMutationString265__51 = testDirAFile1.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString265__51);
        boolean o_testObserveSingleFile_literalMutationString265__52 = testDirAFile2.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString265__52);
        boolean o_testObserveSingleFile_literalMutationString265__53 = testDirAFile3.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString265__53);
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString265__55 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString265__55);
        boolean o_testObserveSingleFile_literalMutationString265__57 = listener.getDeletedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString265__57);
        boolean o_testObserveSingleFile_literalMutationString265__59 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString265__59);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString265__6);
        Assertions.assertEquals("NameFileFilter(A-file1.java)", ((NameFileFilter) (nameFilter)).toString());
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString265__11);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString265__23);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString265__24);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString265__25);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString265__27);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString265__29);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString265__31);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString265__41);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString265__43);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString265__45);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString265__47);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString265__49);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString265__50);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString265__51);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString265__52);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString265__53);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString265__55);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString265__57);
    }

    @EnergyTest
    public void testObserveSingleFile_literalMutationString266() throws IOException {
        final File testDirA = new File(testDir, "1Rvnj|}8wu");
        File testDirAFile1 = new File(testDirA, "A-file1.java");
        boolean o_testObserveSingleFile_literalMutationString266__6 = testDirA.mkdir();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString266__6);
        final FileFilter nameFilter = FileFilterUtils.nameFileFilter(testDirAFile1.getName());
        Assertions.assertEquals("NameFileFilter(A-file1.java)", ((NameFileFilter) (nameFilter)).toString());
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString266__11 = testDirAFile1.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString266__11);
        testDirAFile1 = touch(testDirAFile1);
        File testDirAFile2 = touch(new File(testDirA, "A-file2.txt"));
        File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        boolean o_testObserveSingleFile_literalMutationString266__23 = testDirAFile1.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString266__23);
        boolean o_testObserveSingleFile_literalMutationString266__24 = testDirAFile2.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString266__24);
        boolean o_testObserveSingleFile_literalMutationString266__25 = testDirAFile3.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString266__25);
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString266__27 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString266__27);
        boolean o_testObserveSingleFile_literalMutationString266__29 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString266__29);
        boolean o_testObserveSingleFile_literalMutationString266__31 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString266__31);
        testDirAFile1 = touch(testDirAFile1);
        testDirAFile2 = touch(testDirAFile2);
        testDirAFile3 = touch(testDirAFile3);
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString266__41 = listener.getChangedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString266__41);
        boolean o_testObserveSingleFile_literalMutationString266__43 = listener.getChangedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString266__43);
        boolean o_testObserveSingleFile_literalMutationString266__45 = listener.getChangedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString266__45);
        boolean o_testObserveSingleFile_literalMutationString266__47 = FileUtils.deleteQuietly(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString266__47);
        boolean o_testObserveSingleFile_literalMutationString266__49 = FileUtils.deleteQuietly(testDirAFile2);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString266__49);
        boolean o_testObserveSingleFile_literalMutationString266__50 = FileUtils.deleteQuietly(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString266__50);
        boolean o_testObserveSingleFile_literalMutationString266__51 = testDirAFile1.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString266__51);
        boolean o_testObserveSingleFile_literalMutationString266__52 = testDirAFile2.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString266__52);
        boolean o_testObserveSingleFile_literalMutationString266__53 = testDirAFile3.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString266__53);
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString266__55 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString266__55);
        boolean o_testObserveSingleFile_literalMutationString266__57 = listener.getDeletedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString266__57);
        boolean o_testObserveSingleFile_literalMutationString266__59 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString266__59);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString266__6);
        Assertions.assertEquals("NameFileFilter(A-file1.java)", ((NameFileFilter) (nameFilter)).toString());
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString266__11);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString266__23);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString266__24);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString266__25);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString266__27);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString266__29);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString266__31);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString266__41);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString266__43);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString266__45);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString266__47);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString266__49);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString266__50);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString266__51);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString266__52);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString266__53);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString266__55);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString266__57);
    }

    @EnergyTest
    public void testObserveSingleFile_literalMutationString267() throws IOException {
        final File testDirA = new File(testDir, "test-dirU-A");
        File testDirAFile1 = new File(testDirA, "A-file1.java");
        boolean o_testObserveSingleFile_literalMutationString267__6 = testDirA.mkdir();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString267__6);
        final FileFilter nameFilter = FileFilterUtils.nameFileFilter(testDirAFile1.getName());
        Assertions.assertEquals("NameFileFilter(A-file1.java)", ((NameFileFilter) (nameFilter)).toString());
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString267__11 = testDirAFile1.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString267__11);
        testDirAFile1 = touch(testDirAFile1);
        File testDirAFile2 = touch(new File(testDirA, "A-file2.txt"));
        File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        boolean o_testObserveSingleFile_literalMutationString267__23 = testDirAFile1.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString267__23);
        boolean o_testObserveSingleFile_literalMutationString267__24 = testDirAFile2.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString267__24);
        boolean o_testObserveSingleFile_literalMutationString267__25 = testDirAFile3.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString267__25);
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString267__27 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString267__27);
        boolean o_testObserveSingleFile_literalMutationString267__29 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString267__29);
        boolean o_testObserveSingleFile_literalMutationString267__31 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString267__31);
        testDirAFile1 = touch(testDirAFile1);
        testDirAFile2 = touch(testDirAFile2);
        testDirAFile3 = touch(testDirAFile3);
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString267__41 = listener.getChangedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString267__41);
        boolean o_testObserveSingleFile_literalMutationString267__43 = listener.getChangedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString267__43);
        boolean o_testObserveSingleFile_literalMutationString267__45 = listener.getChangedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString267__45);
        boolean o_testObserveSingleFile_literalMutationString267__47 = FileUtils.deleteQuietly(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString267__47);
        boolean o_testObserveSingleFile_literalMutationString267__49 = FileUtils.deleteQuietly(testDirAFile2);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString267__49);
        boolean o_testObserveSingleFile_literalMutationString267__50 = FileUtils.deleteQuietly(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString267__50);
        boolean o_testObserveSingleFile_literalMutationString267__51 = testDirAFile1.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString267__51);
        boolean o_testObserveSingleFile_literalMutationString267__52 = testDirAFile2.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString267__52);
        boolean o_testObserveSingleFile_literalMutationString267__53 = testDirAFile3.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString267__53);
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString267__55 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString267__55);
        boolean o_testObserveSingleFile_literalMutationString267__57 = listener.getDeletedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString267__57);
        boolean o_testObserveSingleFile_literalMutationString267__59 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString267__59);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString267__6);
        Assertions.assertEquals("NameFileFilter(A-file1.java)", ((NameFileFilter) (nameFilter)).toString());
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString267__11);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString267__23);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString267__24);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString267__25);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString267__27);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString267__29);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString267__31);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString267__41);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString267__43);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString267__45);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString267__47);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString267__49);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString267__50);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString267__51);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString267__52);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString267__53);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString267__55);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString267__57);
    }

    @EnergyTest
    public void testObserveSingleFile_literalMutationString268() throws IOException {
        final File testDirA = new File(testDir, "test-dir-A");
        File testDirAFile1 = new File(testDirA, "");
        boolean o_testObserveSingleFile_literalMutationString268__6 = testDirA.mkdir();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString268__6);
        final FileFilter nameFilter = FileFilterUtils.nameFileFilter(testDirAFile1.getName());
        Assertions.assertEquals("NameFileFilter(test-dir-A)", ((NameFileFilter) (nameFilter)).toString());
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString268__11 = testDirAFile1.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString268__11);
        testDirAFile1 = touch(testDirAFile1);
        File testDirAFile2 = touch(new File(testDirA, "A-file2.txt"));
        File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        boolean o_testObserveSingleFile_literalMutationString268__23 = testDirAFile1.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString268__23);
        boolean o_testObserveSingleFile_literalMutationString268__24 = testDirAFile2.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString268__24);
        boolean o_testObserveSingleFile_literalMutationString268__25 = testDirAFile3.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString268__25);
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString268__27 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString268__27);
        boolean o_testObserveSingleFile_literalMutationString268__29 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString268__29);
        boolean o_testObserveSingleFile_literalMutationString268__31 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString268__31);
        testDirAFile1 = touch(testDirAFile1);
        testDirAFile2 = touch(testDirAFile2);
        testDirAFile3 = touch(testDirAFile3);
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString268__41 = listener.getChangedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString268__41);
        boolean o_testObserveSingleFile_literalMutationString268__43 = listener.getChangedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString268__43);
        boolean o_testObserveSingleFile_literalMutationString268__45 = listener.getChangedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString268__45);
        boolean o_testObserveSingleFile_literalMutationString268__47 = FileUtils.deleteQuietly(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString268__47);
        boolean o_testObserveSingleFile_literalMutationString268__49 = FileUtils.deleteQuietly(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString268__49);
        boolean o_testObserveSingleFile_literalMutationString268__50 = FileUtils.deleteQuietly(testDirAFile3);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString268__50);
        boolean o_testObserveSingleFile_literalMutationString268__51 = testDirAFile1.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString268__51);
        boolean o_testObserveSingleFile_literalMutationString268__52 = testDirAFile2.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString268__52);
        boolean o_testObserveSingleFile_literalMutationString268__53 = testDirAFile3.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString268__53);
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString268__55 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString268__55);
        boolean o_testObserveSingleFile_literalMutationString268__57 = listener.getDeletedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString268__57);
        boolean o_testObserveSingleFile_literalMutationString268__59 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString268__59);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString268__6);
        Assertions.assertEquals("NameFileFilter(test-dir-A)", ((NameFileFilter) (nameFilter)).toString());
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString268__11);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString268__23);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString268__24);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString268__25);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString268__27);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString268__29);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString268__31);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString268__41);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString268__43);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString268__45);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString268__47);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString268__49);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString268__50);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString268__51);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString268__52);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString268__53);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString268__55);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString268__57);
    }

    @EnergyTest
    public void testObserveSingleFile_literalMutationString269() throws IOException {
        final File testDirA = new File(testDir, "test-dir-A");
        File testDirAFile1 = new File(testDirA, "Delete");
        boolean o_testObserveSingleFile_literalMutationString269__6 = testDirA.mkdir();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString269__6);
        final FileFilter nameFilter = FileFilterUtils.nameFileFilter(testDirAFile1.getName());
        Assertions.assertEquals("NameFileFilter(Delete)", ((NameFileFilter) (nameFilter)).toString());
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString269__11 = testDirAFile1.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString269__11);
        testDirAFile1 = touch(testDirAFile1);
        File testDirAFile2 = touch(new File(testDirA, "A-file2.txt"));
        File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        boolean o_testObserveSingleFile_literalMutationString269__23 = testDirAFile1.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString269__23);
        boolean o_testObserveSingleFile_literalMutationString269__24 = testDirAFile2.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString269__24);
        boolean o_testObserveSingleFile_literalMutationString269__25 = testDirAFile3.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString269__25);
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString269__27 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString269__27);
        boolean o_testObserveSingleFile_literalMutationString269__29 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString269__29);
        boolean o_testObserveSingleFile_literalMutationString269__31 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString269__31);
        testDirAFile1 = touch(testDirAFile1);
        testDirAFile2 = touch(testDirAFile2);
        testDirAFile3 = touch(testDirAFile3);
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString269__41 = listener.getChangedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString269__41);
        boolean o_testObserveSingleFile_literalMutationString269__43 = listener.getChangedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString269__43);
        boolean o_testObserveSingleFile_literalMutationString269__45 = listener.getChangedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString269__45);
        boolean o_testObserveSingleFile_literalMutationString269__47 = FileUtils.deleteQuietly(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString269__47);
        boolean o_testObserveSingleFile_literalMutationString269__49 = FileUtils.deleteQuietly(testDirAFile2);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString269__49);
        boolean o_testObserveSingleFile_literalMutationString269__50 = FileUtils.deleteQuietly(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString269__50);
        boolean o_testObserveSingleFile_literalMutationString269__51 = testDirAFile1.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString269__51);
        boolean o_testObserveSingleFile_literalMutationString269__52 = testDirAFile2.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString269__52);
        boolean o_testObserveSingleFile_literalMutationString269__53 = testDirAFile3.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString269__53);
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString269__55 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString269__55);
        boolean o_testObserveSingleFile_literalMutationString269__57 = listener.getDeletedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString269__57);
        boolean o_testObserveSingleFile_literalMutationString269__59 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString269__59);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString269__6);
        Assertions.assertEquals("NameFileFilter(Delete)", ((NameFileFilter) (nameFilter)).toString());
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString269__11);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString269__23);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString269__24);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString269__25);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString269__27);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString269__29);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString269__31);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString269__41);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString269__43);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString269__45);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString269__47);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString269__49);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString269__50);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString269__51);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString269__52);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString269__53);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString269__55);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString269__57);
    }

    @EnergyTest
    public void testObserveSingleFile_literalMutationString270() throws IOException {
        final File testDirA = new File(testDir, "test-dir-A");
        File testDirAFile1 = new File(testDirA, "(-file1.java");
        boolean o_testObserveSingleFile_literalMutationString270__6 = testDirA.mkdir();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString270__6);
        final FileFilter nameFilter = FileFilterUtils.nameFileFilter(testDirAFile1.getName());
        Assertions.assertEquals("NameFileFilter((-file1.java)", ((NameFileFilter) (nameFilter)).toString());
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString270__11 = testDirAFile1.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString270__11);
        testDirAFile1 = touch(testDirAFile1);
        File testDirAFile2 = touch(new File(testDirA, "A-file2.txt"));
        File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        boolean o_testObserveSingleFile_literalMutationString270__23 = testDirAFile1.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString270__23);
        boolean o_testObserveSingleFile_literalMutationString270__24 = testDirAFile2.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString270__24);
        boolean o_testObserveSingleFile_literalMutationString270__25 = testDirAFile3.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString270__25);
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString270__27 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString270__27);
        boolean o_testObserveSingleFile_literalMutationString270__29 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString270__29);
        boolean o_testObserveSingleFile_literalMutationString270__31 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString270__31);
        testDirAFile1 = touch(testDirAFile1);
        testDirAFile2 = touch(testDirAFile2);
        testDirAFile3 = touch(testDirAFile3);
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString270__41 = listener.getChangedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString270__41);
        boolean o_testObserveSingleFile_literalMutationString270__43 = listener.getChangedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString270__43);
        boolean o_testObserveSingleFile_literalMutationString270__45 = listener.getChangedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString270__45);
        boolean o_testObserveSingleFile_literalMutationString270__47 = FileUtils.deleteQuietly(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString270__47);
        boolean o_testObserveSingleFile_literalMutationString270__49 = FileUtils.deleteQuietly(testDirAFile2);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString270__49);
        boolean o_testObserveSingleFile_literalMutationString270__50 = FileUtils.deleteQuietly(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString270__50);
        boolean o_testObserveSingleFile_literalMutationString270__51 = testDirAFile1.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString270__51);
        boolean o_testObserveSingleFile_literalMutationString270__52 = testDirAFile2.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString270__52);
        boolean o_testObserveSingleFile_literalMutationString270__53 = testDirAFile3.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString270__53);
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString270__55 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString270__55);
        boolean o_testObserveSingleFile_literalMutationString270__57 = listener.getDeletedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString270__57);
        boolean o_testObserveSingleFile_literalMutationString270__59 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString270__59);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString270__6);
        Assertions.assertEquals("NameFileFilter((-file1.java)", ((NameFileFilter) (nameFilter)).toString());
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString270__11);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString270__23);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString270__24);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString270__25);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString270__27);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString270__29);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString270__31);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString270__41);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString270__43);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString270__45);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString270__47);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString270__49);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString270__50);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString270__51);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString270__52);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString270__53);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString270__55);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString270__57);
    }

    @EnergyTest
    public void testObserveSingleFile_literalMutationString271() throws IOException {
        final File testDirA = new File(testDir, "test-dir-A");
        File testDirAFile1 = new File(testDirA, "A-file1.j(ava");
        boolean o_testObserveSingleFile_literalMutationString271__6 = testDirA.mkdir();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString271__6);
        final FileFilter nameFilter = FileFilterUtils.nameFileFilter(testDirAFile1.getName());
        Assertions.assertEquals("NameFileFilter(A-file1.j(ava)", ((NameFileFilter) (nameFilter)).toString());
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString271__11 = testDirAFile1.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString271__11);
        testDirAFile1 = touch(testDirAFile1);
        File testDirAFile2 = touch(new File(testDirA, "A-file2.txt"));
        File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        boolean o_testObserveSingleFile_literalMutationString271__23 = testDirAFile1.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString271__23);
        boolean o_testObserveSingleFile_literalMutationString271__24 = testDirAFile2.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString271__24);
        boolean o_testObserveSingleFile_literalMutationString271__25 = testDirAFile3.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString271__25);
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString271__27 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString271__27);
        boolean o_testObserveSingleFile_literalMutationString271__29 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString271__29);
        boolean o_testObserveSingleFile_literalMutationString271__31 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString271__31);
        testDirAFile1 = touch(testDirAFile1);
        testDirAFile2 = touch(testDirAFile2);
        testDirAFile3 = touch(testDirAFile3);
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString271__41 = listener.getChangedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString271__41);
        boolean o_testObserveSingleFile_literalMutationString271__43 = listener.getChangedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString271__43);
        boolean o_testObserveSingleFile_literalMutationString271__45 = listener.getChangedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString271__45);
        boolean o_testObserveSingleFile_literalMutationString271__47 = FileUtils.deleteQuietly(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString271__47);
        boolean o_testObserveSingleFile_literalMutationString271__49 = FileUtils.deleteQuietly(testDirAFile2);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString271__49);
        boolean o_testObserveSingleFile_literalMutationString271__50 = FileUtils.deleteQuietly(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString271__50);
        boolean o_testObserveSingleFile_literalMutationString271__51 = testDirAFile1.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString271__51);
        boolean o_testObserveSingleFile_literalMutationString271__52 = testDirAFile2.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString271__52);
        boolean o_testObserveSingleFile_literalMutationString271__53 = testDirAFile3.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString271__53);
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString271__55 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString271__55);
        boolean o_testObserveSingleFile_literalMutationString271__57 = listener.getDeletedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString271__57);
        boolean o_testObserveSingleFile_literalMutationString271__59 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString271__59);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString271__6);
        Assertions.assertEquals("NameFileFilter(A-file1.j(ava)", ((NameFileFilter) (nameFilter)).toString());
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString271__11);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString271__23);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString271__24);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString271__25);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString271__27);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString271__29);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString271__31);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString271__41);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString271__43);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString271__45);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString271__47);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString271__49);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString271__50);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString271__51);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString271__52);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString271__53);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString271__55);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString271__57);
    }

    @EnergyTest
    public void testObserveSingleFile_literalMutationString272() throws IOException {
        final File testDirA = new File(testDir, "test-dir-A");
        File testDirAFile1 = new File(testDirA, "A-file1.jva");
        boolean o_testObserveSingleFile_literalMutationString272__6 = testDirA.mkdir();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString272__6);
        final FileFilter nameFilter = FileFilterUtils.nameFileFilter(testDirAFile1.getName());
        Assertions.assertEquals("NameFileFilter(A-file1.jva)", ((NameFileFilter) (nameFilter)).toString());
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString272__11 = testDirAFile1.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString272__11);
        testDirAFile1 = touch(testDirAFile1);
        File testDirAFile2 = touch(new File(testDirA, "A-file2.txt"));
        File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        boolean o_testObserveSingleFile_literalMutationString272__23 = testDirAFile1.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString272__23);
        boolean o_testObserveSingleFile_literalMutationString272__24 = testDirAFile2.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString272__24);
        boolean o_testObserveSingleFile_literalMutationString272__25 = testDirAFile3.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString272__25);
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString272__27 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString272__27);
        boolean o_testObserveSingleFile_literalMutationString272__29 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString272__29);
        boolean o_testObserveSingleFile_literalMutationString272__31 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString272__31);
        testDirAFile1 = touch(testDirAFile1);
        testDirAFile2 = touch(testDirAFile2);
        testDirAFile3 = touch(testDirAFile3);
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString272__41 = listener.getChangedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString272__41);
        boolean o_testObserveSingleFile_literalMutationString272__43 = listener.getChangedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString272__43);
        boolean o_testObserveSingleFile_literalMutationString272__45 = listener.getChangedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString272__45);
        boolean o_testObserveSingleFile_literalMutationString272__47 = FileUtils.deleteQuietly(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString272__47);
        boolean o_testObserveSingleFile_literalMutationString272__49 = FileUtils.deleteQuietly(testDirAFile2);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString272__49);
        boolean o_testObserveSingleFile_literalMutationString272__50 = FileUtils.deleteQuietly(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString272__50);
        boolean o_testObserveSingleFile_literalMutationString272__51 = testDirAFile1.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString272__51);
        boolean o_testObserveSingleFile_literalMutationString272__52 = testDirAFile2.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString272__52);
        boolean o_testObserveSingleFile_literalMutationString272__53 = testDirAFile3.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString272__53);
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString272__55 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString272__55);
        boolean o_testObserveSingleFile_literalMutationString272__57 = listener.getDeletedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString272__57);
        boolean o_testObserveSingleFile_literalMutationString272__59 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString272__59);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString272__6);
        Assertions.assertEquals("NameFileFilter(A-file1.jva)", ((NameFileFilter) (nameFilter)).toString());
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString272__11);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString272__23);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString272__24);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString272__25);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString272__27);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString272__29);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString272__31);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString272__41);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString272__43);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString272__45);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString272__47);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString272__49);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString272__50);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString272__51);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString272__52);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString272__53);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString272__55);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString272__57);
    }

    @EnergyTest
    public void testObserveSingleFile_literalMutationString273() throws IOException {
        final File testDirA = new File(testDir, "test-dir-A");
        File testDirAFile1 = new File(testDirA, "gh`l V!3a(!.");
        boolean o_testObserveSingleFile_literalMutationString273__6 = testDirA.mkdir();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString273__6);
        final FileFilter nameFilter = FileFilterUtils.nameFileFilter(testDirAFile1.getName());
        Assertions.assertEquals("NameFileFilter(gh`l V!3a(!.)", ((NameFileFilter) (nameFilter)).toString());
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString273__11 = testDirAFile1.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString273__11);
        testDirAFile1 = touch(testDirAFile1);
        File testDirAFile2 = touch(new File(testDirA, "A-file2.txt"));
        File testDirAFile3 = touch(new File(testDirA, "A-file3.java"));
        boolean o_testObserveSingleFile_literalMutationString273__23 = testDirAFile1.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString273__23);
        boolean o_testObserveSingleFile_literalMutationString273__24 = testDirAFile2.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString273__24);
        boolean o_testObserveSingleFile_literalMutationString273__25 = testDirAFile3.exists();
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString273__25);
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString273__27 = listener.getCreatedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString273__27);
        boolean o_testObserveSingleFile_literalMutationString273__29 = listener.getCreatedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString273__29);
        boolean o_testObserveSingleFile_literalMutationString273__31 = listener.getCreatedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString273__31);
        testDirAFile1 = touch(testDirAFile1);
        testDirAFile2 = touch(testDirAFile2);
        testDirAFile3 = touch(testDirAFile3);
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString273__41 = listener.getChangedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString273__41);
        boolean o_testObserveSingleFile_literalMutationString273__43 = listener.getChangedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString273__43);
        boolean o_testObserveSingleFile_literalMutationString273__45 = listener.getChangedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString273__45);
        boolean o_testObserveSingleFile_literalMutationString273__47 = FileUtils.deleteQuietly(testDirAFile1);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString273__47);
        boolean o_testObserveSingleFile_literalMutationString273__49 = FileUtils.deleteQuietly(testDirAFile2);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString273__49);
        boolean o_testObserveSingleFile_literalMutationString273__50 = FileUtils.deleteQuietly(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString273__50);
        boolean o_testObserveSingleFile_literalMutationString273__51 = testDirAFile1.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString273__51);
        boolean o_testObserveSingleFile_literalMutationString273__52 = testDirAFile2.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString273__52);
        boolean o_testObserveSingleFile_literalMutationString273__53 = testDirAFile3.exists();
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString273__53);
        checkAndNotify();
        boolean o_testObserveSingleFile_literalMutationString273__55 = listener.getDeletedFiles().contains(testDirAFile1);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString273__55);
        boolean o_testObserveSingleFile_literalMutationString273__57 = listener.getDeletedFiles().contains(testDirAFile2);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString273__57);
        boolean o_testObserveSingleFile_literalMutationString273__59 = listener.getDeletedFiles().contains(testDirAFile3);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString273__59);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString273__6);
        Assertions.assertEquals("NameFileFilter(gh`l V!3a(!.)", ((NameFileFilter) (nameFilter)).toString());
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString273__11);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString273__23);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString273__24);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString273__25);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString273__27);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString273__29);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString273__31);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString273__41);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString273__43);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString273__45);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString273__47);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString273__49);
        Assertions.assertTrue(o_testObserveSingleFile_literalMutationString273__50);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString273__51);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString273__52);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString273__53);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString273__55);
        Assertions.assertFalse(o_testObserveSingleFile_literalMutationString273__57);
    }

    protected void checkAndNotify() {
        observer.checkAndNotify();
    }
}